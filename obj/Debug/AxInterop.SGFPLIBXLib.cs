//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("2.3.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("11/15/2013 17:30:38")]

namespace AxSGFPLIBXLib {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{d547fdd7-82f6-44e8-afba-7553adcee7c8}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("PaintEvent")]
    public class AxFpLibXCapture : System.Windows.Forms.AxHost {
        
        private SGFPLIBXLib._DFpLibXCapture ocx;
        
        private AxFpLibXCaptureEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxFpLibXCapture() : 
                base("d547fdd7-82f6-44e8-afba-7553adcee7c8") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-525)]
        public virtual int ReadyState {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadyState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ReadyState;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual int CodeName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CodeName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CodeName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CodeName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CodeName = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual int PortAddr {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PortAddr", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PortAddr;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PortAddr", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PortAddr = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual bool EnableContextMenu {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableContextMenu", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.EnableContextMenu;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableContextMenu", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.EnableContextMenu = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual short Brightness {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Brightness", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Brightness;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Brightness", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Brightness = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual short Contrast {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Contrast", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Contrast;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Contrast", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Contrast = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual short Gain {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Gain", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Gain;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Gain", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Gain = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual int ImageWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImageWidth;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageWidth = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual int ImageHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImageHeight;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageHeight = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual int MinutiaeSize {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MinutiaeSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MinutiaeSize;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MinutiaeSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MinutiaeSize = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual string ErrorString {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrorString", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrorString;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrorString", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrorString = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual int ErrorCode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrorCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrorCode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrorCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrorCode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual int ImageSize {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImageSize;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageSize = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IsCaptured {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsCaptured", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IsCaptured;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsCaptured", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IsCaptured = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual int MinutiaeMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MinutiaeMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MinutiaeMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MinutiaeMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MinutiaeMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual string ImageTextData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageTextData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImageTextData;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageTextData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageTextData = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual string MinTextData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MinTextData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MinTextData;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MinTextData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MinTextData = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual int DeviceID {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DeviceID", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DeviceID;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DeviceID", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DeviceID = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual string DevSerialNum {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DevSerialNum", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DevSerialNum;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DevSerialNum", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DevSerialNum = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-515)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hWnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hWnd);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.hWnd = ((int)((value)));
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual int Reserved {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Reserved", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Reserved;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Reserved", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Reserved = value;
            }
        }
        
        public event System.EventHandler ReadyStateChange;
        
        public event System.EventHandler Error;
        
        public event System.EventHandler ClickEvent;
        
        public event System.EventHandler DblClick;
        
        public event _DFpLibXCaptureEvents_KeyDownEventHandler KeyDownEvent;
        
        public event _DFpLibXCaptureEvents_KeyPressEventHandler KeyPressEvent;
        
        public event _DFpLibXCaptureEvents_KeyUpEventHandler KeyUpEvent;
        
        public event _DFpLibXCaptureEvents_MouseDownEventHandler MouseDownEvent;
        
        public event _DFpLibXCaptureEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event _DFpLibXCaptureEvents_MouseUpEventHandler MouseUpEvent;
        
        public event _DFpLibXCaptureEvents_PaintEventHandler PaintEvent;
        
        public virtual bool Capture() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Capture", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.Capture()));
            return returnValue;
        }
        
        public virtual bool LiveCapture(int nTime, short nQuality) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LiveCapture", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.LiveCapture(nTime, nQuality)));
            return returnValue;
        }
        
        public virtual bool GetImageData(ref object imageData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetImageData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.GetImageData(ref imageData)));
            return returnValue;
        }
        
        public virtual bool GetMinutiaeData(ref object minutiaeData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMinutiaeData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.GetMinutiaeData(ref minutiaeData)));
            return returnValue;
        }
        
        public virtual bool SetImageData(object imageData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetImageData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetImageData(imageData)));
            return returnValue;
        }
        
        public virtual bool Configure() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Configure", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.Configure()));
            return returnValue;
        }
        
        public virtual bool SetLed(short mode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetLed(mode)));
            return returnValue;
        }
        
        public virtual bool DrawImage(int hWnd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.DrawImage(hWnd)));
            return returnValue;
        }
        
        public virtual bool Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.Clear()));
            return returnValue;
        }
        
        public virtual int GetImageQuality() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetImageQuality", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetImageQuality()));
            return returnValue;
        }
        
        public virtual bool SetData(int index, int data) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetData(index, data)));
            return returnValue;
        }
        
        public virtual int GetData(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetData(index)));
            return returnValue;
        }
        
        public virtual bool EnableAutoOnEvent(bool enableAutoOn, int hWnd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableAutoOnEvent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.EnableAutoOnEvent(enableAutoOn, hWnd)));
            return returnValue;
        }
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void DoClick() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DoClick", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DoClick();
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxFpLibXCaptureEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(SGFPLIBXLib._DFpLibXCaptureEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((SGFPLIBXLib._DFpLibXCapture)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReadyStateChange(object sender, System.EventArgs e) {
            if ((this.ReadyStateChange != null)) {
                this.ReadyStateChange(sender, e);
            }
        }
        
        internal void RaiseOnError(object sender, System.EventArgs e) {
            if ((this.Error != null)) {
                this.Error(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, _DFpLibXCaptureEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, _DFpLibXCaptureEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, _DFpLibXCaptureEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, _DFpLibXCaptureEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, _DFpLibXCaptureEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, _DFpLibXCaptureEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnPaintEvent(object sender, _DFpLibXCaptureEvents_PaintEvent e) {
            if ((this.PaintEvent != null)) {
                this.PaintEvent(sender, e);
            }
        }
    }
    
    public delegate void _DFpLibXCaptureEvents_KeyDownEventHandler(object sender, _DFpLibXCaptureEvents_KeyDownEvent e);
    
    public class _DFpLibXCaptureEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DFpLibXCaptureEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DFpLibXCaptureEvents_KeyPressEventHandler(object sender, _DFpLibXCaptureEvents_KeyPressEvent e);
    
    public class _DFpLibXCaptureEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public _DFpLibXCaptureEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void _DFpLibXCaptureEvents_KeyUpEventHandler(object sender, _DFpLibXCaptureEvents_KeyUpEvent e);
    
    public class _DFpLibXCaptureEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DFpLibXCaptureEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DFpLibXCaptureEvents_MouseDownEventHandler(object sender, _DFpLibXCaptureEvents_MouseDownEvent e);
    
    public class _DFpLibXCaptureEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DFpLibXCaptureEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DFpLibXCaptureEvents_MouseMoveEventHandler(object sender, _DFpLibXCaptureEvents_MouseMoveEvent e);
    
    public class _DFpLibXCaptureEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DFpLibXCaptureEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DFpLibXCaptureEvents_MouseUpEventHandler(object sender, _DFpLibXCaptureEvents_MouseUpEvent e);
    
    public class _DFpLibXCaptureEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DFpLibXCaptureEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DFpLibXCaptureEvents_PaintEventHandler(object sender, _DFpLibXCaptureEvents_PaintEvent e);
    
    public class _DFpLibXCaptureEvents_PaintEvent {
        
        public int hWnd;
        
        public int hDC;
        
        public _DFpLibXCaptureEvents_PaintEvent(int hWnd, int hDC) {
            this.hWnd = hWnd;
            this.hDC = hDC;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxFpLibXCaptureEventMulticaster : SGFPLIBXLib._DFpLibXCaptureEvents {
        
        private AxFpLibXCapture parent;
        
        public AxFpLibXCaptureEventMulticaster(AxFpLibXCapture parent) {
            this.parent = parent;
        }
        
        public virtual void ReadyStateChange() {
            System.EventArgs readystatechangeEvent = new System.EventArgs();
            this.parent.RaiseOnReadyStateChange(this.parent, readystatechangeEvent);
        }
        
        public virtual void Error() {
            System.EventArgs errorEvent = new System.EventArgs();
            this.parent.RaiseOnError(this.parent, errorEvent);
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            _DFpLibXCaptureEvents_KeyDownEvent keydownEvent = new _DFpLibXCaptureEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            _DFpLibXCaptureEvents_KeyPressEvent keypressEvent = new _DFpLibXCaptureEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            _DFpLibXCaptureEvents_KeyUpEvent keyupEvent = new _DFpLibXCaptureEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            _DFpLibXCaptureEvents_MouseDownEvent mousedownEvent = new _DFpLibXCaptureEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            _DFpLibXCaptureEvents_MouseMoveEvent mousemoveEvent = new _DFpLibXCaptureEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            _DFpLibXCaptureEvents_MouseUpEvent mouseupEvent = new _DFpLibXCaptureEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void Paint(int hWnd, int hDC) {
            _DFpLibXCaptureEvents_PaintEvent paintEvent = new _DFpLibXCaptureEvents_PaintEvent(hWnd, hDC);
            this.parent.RaiseOnPaintEvent(this.parent, paintEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{8d613732-7d38-4664-a8b7-a24049b96117}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    public class AxFpLibXVerify : System.Windows.Forms.AxHost {
        
        private SGFPLIBXLib._DFpLibXVerify ocx;
        
        private AxFpLibXVerifyEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxFpLibXVerify() : 
                base("8d613732-7d38-4664-a8b7-a24049b96117") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual string ErrorString {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrorString", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrorString;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrorString", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrorString = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual int ErrorCode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrorCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrorCode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrorCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrorCode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual int SecurityLevel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SecurityLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SecurityLevel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SecurityLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SecurityLevel = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual int MinutiaeMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MinutiaeMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MinutiaeMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MinutiaeMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MinutiaeMode = value;
            }
        }
        
        public event System.EventHandler Error;
        
        public virtual bool Register(object minutiaeData1, object minutiaeData2) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Register", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.Register(minutiaeData1, minutiaeData2)));
            return returnValue;
        }
        
        public virtual bool Verify(object regMinutiaeData, object curMinutiaeData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Verify", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.Verify(regMinutiaeData, curMinutiaeData)));
            return returnValue;
        }
        
        public virtual bool VerifyEx(object regMinutiaeData1, object regMinutiaeData2, object curMinutiaeData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerifyEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.VerifyEx(regMinutiaeData1, regMinutiaeData2, curMinutiaeData)));
            return returnValue;
        }
        
        public virtual bool ResetMatchingEngine() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ResetMatchingEngine", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.ResetMatchingEngine()));
            return returnValue;
        }
        
        public virtual bool ConvertMinutiaeFormat(object inMinData, int inMinType, object outMinData, int outMinType) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ConvertMinutiaeFormat", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.ConvertMinutiaeFormat(inMinData, inMinType, outMinData, outMinType)));
            return returnValue;
        }
        
        public virtual bool RegisterForText(string mintext1, string mintext2) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RegisterForText", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.RegisterForText(mintext1, mintext2)));
            return returnValue;
        }
        
        public virtual bool VerifyForText(string regtextmin, string curtextmin) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerifyForText", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.VerifyForText(regtextmin, curtextmin)));
            return returnValue;
        }
        
        public virtual bool VerifyExForText(string regtextmin1, string regtextmin2, string curtextmin) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerifyExForText", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.VerifyExForText(regtextmin1, regtextmin2, curtextmin)));
            return returnValue;
        }
        
        public virtual int GetMatchingScore(object minutiaeData1, object minutiaeData2) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMatchingScore", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetMatchingScore(minutiaeData1, minutiaeData2)));
            return returnValue;
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxFpLibXVerifyEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(SGFPLIBXLib._DFpLibXVerifyEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((SGFPLIBXLib._DFpLibXVerify)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnError(object sender, System.EventArgs e) {
            if ((this.Error != null)) {
                this.Error(sender, e);
            }
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxFpLibXVerifyEventMulticaster : SGFPLIBXLib._DFpLibXVerifyEvents {
        
        private AxFpLibXVerify parent;
        
        public AxFpLibXVerifyEventMulticaster(AxFpLibXVerify parent) {
            this.parent = parent;
        }
        
        public virtual void Error() {
            System.EventArgs errorEvent = new System.EventArgs();
            this.parent.RaiseOnError(this.parent, errorEvent);
        }
    }
}
