<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GSNetWin</name>
    </assembly>
    <members>
        <member name="T:GraphicsServer.GSNet.Charting.AnimatedGif">
            <summary>
            Allows one to add individual images, or Bitmaps, to a chart to create an
            animation or slideshow.
            </summary>
            <remarks>
            To use this class you must assign each frame of the animation.
            You can also define the speed of the animation.
            </remarks>
            <example>
            This example shows how to create a Animated Gif using the Chart and 
            utilizes 4 frames representing each quarter of a year.
            <code lang="CS" title="C# Example">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.SeriesData;
            using System.IO;
            using System.Drawing.Imaging;
            
            private void TestAnimation()
            {
            	Chart chart1 = this.gsNetWinChart1.Chart;
            
            	// bar chart
            	chart1.ChartType = ChartType.BarSimple3D;
            
            	SetupChartAxes(chart1);
            
            	// remove all data from chart
            	chart1.RemoveAllSeries();
            
            	// create new chart series to work with
            	Series s1 = new Series();
            	s1.SeriesName = "Sales";
            
            	// add data to chart
            	chart1.AddSeries(s1);
            	chart1.ReconcileAndRecalcAll();
            
            	AddFrameToChart(chart1, 0, 31);
            	AddFrameToChart(chart1, 1, 44);
            	AddFrameToChart(chart1, 2, 68);
            	AddFrameToChart(chart1, 3, 83);
            
            	// save animated gif to disk
            	chart1.AnimatedGif.TransparentWhiteEnabled = false;
            	chart1.AnimatedGif.FrameSpeed = 20; // 20/100 = 5 frames per second
            	chart1.AnimatedGif.LoopCount = 0; // zero = continuous looping
            	chart1.AnimatedGif.ExportAnimatedGif(@"C:\AnimatedChart_v30.Gif");
            }
            
            private void SetupChartAxes(Chart chart)
            {
            	// setup x-axis
            	chart.Grid.Axis3DX.AxisMode = AxisMode.Category;
            	chart.Grid.Axis3DX.AxisScale = AxisScaleType.UserDefined;
            	chart.Grid.Axis3DX.MinAxisValueUser = 0;
            	chart.Grid.Axis3DX.MaxAxisValueUser = 4;
            	chart.Grid.Axis3DX.SetUserLabel(0, "Q1");
            	chart.Grid.Axis3DX.SetUserLabel(1, "Q2");
            	chart.Grid.Axis3DX.SetUserLabel(2, "Q3");
            	chart.Grid.Axis3DX.SetUserLabel(3, "Q4");
            	
            	// setup y-axis
            	chart.Grid.Axis3DY.AxisMode = AxisMode.ValueLinear;
            	chart.Grid.Axis3DY.AxisScale = AxisScaleType.UserDefined;
            	chart.Grid.Axis3DY.MinAxisValueUser = 0;
            	chart.Grid.Axis3DY.MaxAxisValueUser = 100;
            }
            	
            private void AddFrameToChart(Chart chart, int dataPoint, double dataValue)
            {
            	if (chart.SeriesDrawingList.Count > 0)
            	{
            		// create Frame by assigning a new data value
            		chart.GetSeriesDrawing(0).GetSeries().SetValue(SeriesComponent.Y, dataPoint, dataValue);
            		chart.ReconcileAndRecalcAll();
            	
            		// save chart image
            		MemoryStream strm = new MemoryStream();
            		chart.Export(strm, ImageFormat.Gif);
            		
            		// add frame to animated gif
            		Image img = Bitmap.FromStream(strm);
            		chart.AnimatedGif.FrameList.Add(img);
            	}
            }
            </code>
            <code lang="VB" title="VB Example">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.SeriesData
            Imports System.IO
            Imports System.Drawing.Imaging
            
            Private Sub TestAnimation()
            	Dim chart1 As Chart = Me.GsNetWinChart1.Chart
            
            	' bar chart
            	chart1.ChartType = ChartType.BarSimple3D
            
            	SetupChartAxes(chart1)
            
            	' remove all data from chart
            	chart1.RemoveAllSeries()
            
            	' create new chart series to work with
            	Dim s1 As Series = New Series
            	s1.SeriesName = "Sales"
            
            	' add data to chart
            	chart1.AddSeries(s1)
            	chart1.ReconcileAndRecalcAll()
            
            	AddFrameToChart(chart1, 0, 31)
            	AddFrameToChart(chart1, 1, 44)
            	AddFrameToChart(chart1, 2, 68)
            	AddFrameToChart(chart1, 3, 83)
            
            	' save animated gif to disk
            	chart1.AnimatedGif.TransparentWhiteEnabled = False
            	chart1.AnimatedGif.FrameSpeed = 20 ' 20/100 = 5 frames per second
            	chart1.AnimatedGif.LoopCount = 0 ' zero = continuous looping
            	chart1.AnimatedGif.ExportAnimatedGif("C:\AnimatedChart_v30.Gif")
            End Sub
            
            Private Sub SetupChartAxes(ByVal chart As Chart)
            	' setup x-axis
            	Chart.Grid.Axis3DX.AxisMode = AxisMode.Category
            	Chart.Grid.Axis3DX.AxisScale = AxisScaleType.UserDefined
            	Chart.Grid.Axis3DX.MinAxisValueUser = 0
            	Chart.Grid.Axis3DX.MaxAxisValueUser = 4
            	Chart.Grid.Axis3DX.SetUserLabel(0, "Q1")
            	Chart.Grid.Axis3DX.SetUserLabel(1, "Q2")
            	Chart.Grid.Axis3DX.SetUserLabel(2, "Q3")
            	Chart.Grid.Axis3DX.SetUserLabel(3, "Q4")
            
            	' setup y-axis
            	Chart.Grid.Axis3DY.AxisMode = AxisMode.ValueLinear
            	Chart.Grid.Axis3DY.AxisScale = AxisScaleType.UserDefined
            	Chart.Grid.Axis3DY.MinAxisValueUser = 0
            	Chart.Grid.Axis3DY.MaxAxisValueUser = 100
            End Sub
            
            Private Sub AddFrameToChart(ByVal chart As Chart, ByVal dataPoint As Integer, ByVal dataValue As Double)
            	If (Chart.SeriesDrawingList.Count > 0) Then
            		' create Frame by assigning a new data value
            		Chart.GetSeriesDrawing(0).GetSeries().SetValue(SeriesComponent.Y, dataPoint, dataValue)
            		Chart.ReconcileAndRecalcAll()
            
            		' save chart image
            		Dim strm As MemoryStream = New MemoryStream
            		Chart.Export(strm, ImageFormat.Gif)
            
            		' add frame to animated gif
            		Dim img As Image = Bitmap.FromStream(strm)
            		Chart.AnimatedGif.FrameList.Add(img)
            	End If
            End Sub
            </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnimatedGif.ExportAnimatedGif(System.String)">
            <summary>
            Saves the animated gif to a file on disk.
            </summary>
            <param name="fileName">The filename to save the Animated Gif under.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AnimatedGif.FrameList">
            <summary>
            Sets or gets an ArrayList object containing Image objects.
            </summary>
            <remarks>
            The order in which images are added to the FrameList is the 
            same order the animation will display the images.
            </remarks>
            <value><see cref="T:System.Collections.ArrayList"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AnimatedGif.FrameSpeed">
            <summary>Defines amount of time, in hundredths of a second, frames are displayed.</summary>
            <value>short</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AnimatedGif.LoopCount">
            <summary>Defines the number of times the animation will loop.</summary>
            <remarks>
            If LoopCount is zero, the animation will continually loop. Set
            LoopCount to 1 if you want the animation to run only one time.
            </remarks>
            <value>short</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AnimatedGif.TransparentWhiteEnabled">
            <summary>
            Controls whether or not there will be transparency in the Animated Gif.
            </summary>
            <remarks>
            <para>
            If enabled, the Animated Gif will show transparency wherever there
            is a white colored pixel.
            </para>
            <para>
            If disabled, the Animated Gif will display the original images
            without any modifications.
            </para>
            </remarks>
            <value>bool</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Axis2DLinear">
            <base>GraphicsServer.GSNet.Charting.AxisLinear</base>
            <summary>
            This is the 2D linear axis base class. This class contains
            2D properties that any derived 2D axis will inherit.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisLinear">
            <base>GraphicsServer.GSNet.Charting.AxisBase</base>
            <summary>
            This is the linear axis class. All 2D and 3D linear axis objects are derived 
            from this base.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisBase">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            This is the base axis class.  All axis objects are derived from this base.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.PropertyObject">
            <summary>
            This is the base class from which all chart property related
            objects are derived.  The main purpose of this class is to 
            facilitate the firing of propety change events to the chart.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.PropertyObject.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.PropertyObject.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Reads object property settings from an XmlNode.</summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
            <param name="node">XmlNode that contains the properties of the object.</param>
            <param name="flags"><see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags</see> 
            to control how properties are read.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.PropertyObject.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>
            Writes object properties to an XmlElement. </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
            <returns>
            Returns an XmlElement if properties were written, otherwise a null value if there
            were no properties to write.
            </returns>
            <param name="doc">The XmlDocument context used to create the new element node.</param>
            <param name="flags"><see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags</see> 
            to control how properties are written.</param>
            <param name="nodeName">Name that will be given to the element node.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.PropertyObject.SerializeToTemplate(System.Xml.XmlTextWriter,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.PropertyObject.SerializeFromTemplate(System.Xml.XmlTextReader,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.PropertyObject.SerializeFontToTemplate(System.Xml.XmlTextWriter,GraphicsServer.GSNet.Charting.TemplateFlags,System.Drawing.Font)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.PropertyObject.SerializeFontFromTemplate(System.Xml.XmlTextReader,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.PropertyObject.WriteFontProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String,System.Drawing.Font)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.PropertyObject.ReadFontProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.PropertyObject.FireChangedEvent(System.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.PropertyObject.FireChangedEvent">
            <exclude/>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.PropertyObject.PropertyChangedEvent">
            <exclude/>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.PropertyObject.DesignTimeEvent">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.PropertyObject.PropertyChangedEventHandler">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.PropertyObject.DesignTimeEventHandler">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.ShouldSerializeColor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.ResetColor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.GetSeriesComponentType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.ReconcileAxisToData(GraphicsServer.GSNet.Charting.SeriesDrawingCollection,GraphicsServer.GSNet.Charting.ChartTypeBase,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.PrepareAxisCoordinateSystem(System.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.TransformPoint(System.Double)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.TransformToValue(System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.GenerateDrawingObjects(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.DoesSeriesBelongToAxis(GraphicsServer.GSNet.Charting.SeriesDrawing)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.GetAxisType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.GetUserLabel(System.Double)">
            <summary>Retrieves a user defined label for the specified value.</summary>
            <returns>
            Returns an object for the label corresponding to the specified value. Returns
            null if a user-defined label does not exist for the value.
            </returns>
            <param name="val">Value for which a user defined label is returned.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.SetUserLabel(System.Double,System.Object)">
            <summary>Sets a user defined label for the specified value.</summary>
            <remarks>
            When overriding a category-based axis label, the specified value should be an
            integer. Note, however, that labels can be overridden for real numbers (e.g. 0.25,
            1.6).
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AxisBase.RemoveAllUserLabels">RemoveAllUserLabels Method</seealso>
            <param name="val">Value for which to override label.</param>
            <param name="obj">The user label, typically a string but can be a number.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.RemoveAllUserLabels">
            <summary>Removes all the user labels currently set for the axis.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.GetLabel(System.Double)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.FormatLabelValue(System.Double)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisBase.TextPainterPropsChanged">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.AxisLabelGenerator">
            <summary>
            Sets and gets an instance of a user-defined class that will generate axis labels for the
            visible tick marks.
            </summary>
            <remarks>
            This property can be used to implement a label generator of your own design. The object 
            assigned to the property must support the <see cref="T:GraphicsServer.GSNet.Charting.IAxisLabelGenerator"/> 
            interface. If this object is present, then the axis label generator will get first 
            try at creating a label.
            <para>For an example showing how to use the AxisLabelGenerator property with a custom
            label-generating object, see 
            <a href="http://www.graphicsserver.com/samplecode/index.aspx?sample=DotNet%2fGeneral%2fAxis%2fLabels%2fIAxisLabelGenerator+Interface">Creating Custom Labels</a>.
            </para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.IAxisLabelGenerator"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.MajorTickGenerator">
            <summary>
            Sets and gets an instance of a user-defined class that will generate axis major ticks.
            </summary>
            <remarks>
            <para>
            This property allows a developer to implement their own major tick generation. If MajorTickGenerator is
            implemented, then MajorTickCount and MajorTickInterval will not be used.
            </para>
            <para>
            Note: IMajorTickGenerator is currently only implemented for the AxisX, AxisY, AxisXPrime, AxisYPrime.
            </para>
            <para>
            See <see cref="T:GraphicsServer.GSNet.Charting.IMajorTickGenerator"/> for a code example
            on how to use the MajorTickGenerator property.
            </para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.LabelSeries">
            <summary>
            Sets and gets the Series object for category-based labels.  
            </summary>
            <remarks>
                To use this property, create a Series object and bind data to the Label component.
                Then simply assign the Series object to this property. 
                <para>Note that assigning a Series object to this property causes the chart to read
                only the Label component of the series. If you want the chart to read data in other
                components of the series, you must add the Series object to the chart using the
                AddSeries method.</para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.SeriesData.Series">Series Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent">SeriesComponent Enumeration</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.AddSeries(GraphicsServer.GSNet.SeriesData.Series)">AddSeries Method</seealso>
            <value><see cref="T:GraphicsServer.GSNet.SeriesData.Series"/></value>
            <example>
            	<code lang="CS" title="Using the LabelSeries property">
            //Get data from an OLEDB Data Provider
            OleDBDataProvider dp = new OleDBDataProvider();
             
            //TODO: Replace the ConnectionString with one that is valid on your system
            dp.ConnectionString = "Provider=SQLOLEDB;Integrated Security=SSPI;"
                      + "Initial Catalog=Northwind;Data Source=(local)\\VSDotNet";
            dp.SelectString = "SELECT CategoryName, CategorySales FROM [Category Sales for 1997]";
            dp.OpenConnection();
             
            //Bind fields of the database to components of a data series
            Series sales = new Series();
            sales.SeriesName = "Category Sales";
            sales.BindComponent(SeriesComponent.Y, dp, "CategorySales");
            sales.BindComponent(SeriesComponent.Label, dp, "CategoryName");
             
            //Save some typing
            Chart cht = this.gsNetWinChart1.Chart; 
             
            //Remove any previously loaded series
            cht.RemoveAllSeries();
             
            //Add the new data series to the chart
            int salesIndex = cht.AddSeries(sales);
             
            //Add category labels
            cht.Grid.AxisPie.LabelSeries = sales; //Category labels show in a pie chart's legend
                </code>
            	<code lang="VB" title="Using the LabelSeries property">
            'Get  data from an OLEDB Data Provider
            Dim dp As OleDBDataProvider = New OleDBDataProvider()
             
            'TODO: Replace the ConnectionString with one that is valid on your system
            dp.ConnectionString = "Provider=SQLOLEDB;Integrated Security=SSPI;" _
                                + "Initial Catalog=Northwind;Data Source=(local)\VSDotNet"
            dp.SelectString = "SELECT CategoryName, CategorySales FROM [Category Sales for 1997]"
            dp.OpenConnection()
             
            'Bind fields of the database to components of a data series
            Dim sales As New Series()
            sales.SeriesName = "Category Sales"
            sales.BindComponent(SeriesComponent.Y, dp, "CategorySales")
            sales.BindComponent(SeriesComponent.Label, dp, "CategoryName")
                   
            With Me.GSNetWinChart1.Chart
                'Remove any previously loaded series
                .RemoveAllSeries()
                'Send data to chart
                Dim SalesIndex As Integer = .AddSeries(sales)
                'Add category labels
                .Grid.AxisPie.LabelSeries = sales 'Category labels show in a pie chart's legend
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.MaxDisplayedLabelChars">
            <summary>
            Sets and gets the maximum number of axis label characters to display when
            axis labels exist.  
            </summary>
            <remarks>
            This property is ignored when the value is zero.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.GridLinesOn">
            <summary>
            Controls whether grid lines are displayed for the axis.
            </summary>
            <remarks>
                Grid lines are rules extending perpendicularly from the axis, one line for each
                major tick. 
                <para>The setting of this property is specific to the axis. If you want to turn
                grid lines on for both the X and Y axis, then you must set this property to true in
                both the AxisX object and the AxisY object.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisBase.GridLineProperties">GridLineProperties Property</seealso>
            <value>bool</value>
            <example>
            	<code lang="CS" title="Configuring grid lines">
            Chart cht = this.gsNetWinChart1.Chart;
             
            //Turn grid lines on for X and Y axes
            cht.Grid.AxisX.GridLinesOn = true;
            cht.Grid.AxisY.GridLinesOn = true;
             
            // Make grid lines dotted
            cht.Grid.AxisX.GridLineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot; 
            cht.Grid.AxisY.GridLineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
                </code>
            	<code lang="VB" title="Configuring grid lines">
            With Me.GsNetWinChart1.Chart.Grid
                'Turn grid lines on for X and Y axes
                .AxisX.GridLinesOn = True
                .AxisY.GridLinesOn = True
                'Make grid lines dotted
                .AxisX.GridLineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
                .AxisY.GridLineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.GridLineProperties">
            <summary>
            Gets the Line object that draws grid lines for this axis. This property
            provides access to the properties of the underlying Line object. 
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Line">Line</see> class 
            for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line">Line</see></value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisBase.GridLinesOn">GridLinesOn Property</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.AxisMode">
            <summary>
            Sets or gets the numeric mode (category, date, linear, or log) for the axis.
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.AxisMode">AxisMode</see> enumeration
            for more information on the axis modes supported.  
            <para>Note that a chart with more than one axis can have different modes applied 
            to each axis. For example, a bar chart may have a category-based X axis and a value-
            based linear Y axis.</para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisMode">AxisMode</see></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.AxisMode">AxisMode Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.LabelProperties">
            <summary>
            Gets the TextPainter object that controls how axis labels are drawn. This property
            provides access to the properties of the underlying TextPainter object.
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.TextPainter">TextPainter</see> class for 
            specific property information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TextPainter">TextPainter Class</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisBase.LabelFormatMask">LabelFormatMask Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisBase.LabelOffset">LabelOffset Property</seealso>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TextPainter">TextPainter</see></value>
            <example>
            	<code lang="CS" title="Setting axis label properties">
            Chart cht = this.gsNetWinChart1.Chart;
             
            //Set axis label color
            cht.Grid.AxisX.LabelProperties.Color = Color.DimGray;
            cht.Grid.AxisY.LabelProperties.Color = Color.DimGray;
             
            //Set label trimming mode for X axis
            cht.Grid.AxisX.LabelProperties.TextTrimmingMode = StringTrimming.Word;
                </code>
            	<code lang="VB" title="Setting axis label properties">
            With Me.GsNetWinChart1.Chart.Grid
                'Set axis label color
                .AxisX.LabelProperties.Color = Color.DimGray
                .AxisY.LabelProperties.Color = Color.DimGray
                'Set label trimming mode for X axis
                .AxisX.LabelProperties.TextTrimmingMode = StringTrimming.Word
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.LabelOffset">
            <summary>
            Sets and gets the offset from the axis for axis labels.  
            </summary>
            <remarks>
            This value is an integer. There is no real upper limit, 
            but if the value is large enough the labels will paint 
            outside the grid area and hence not be visible.
            <para>For a Radar axis, this offset is for the value labels that paint beside
            the tick marks. The labels that are the end of each spoke use the 
            <see cref="P:GraphicsServer.GSNet.Charting.AxisRadar.SpokeLabelOffset">SpokeLabelOffset</see> value.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisBase.LabelProperties">LabelProperties Property</seealso>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.LabelFormatMask">
            <summary>Sets and gets the mask for formatting axis label and marker label strings.</summary>
            <remarks>
            This property accepts any format string that is accepted by the .NET Framework
            ToString() method. For more information, see "Custom Numeric Format Strings" and
            "Custom DateTime Format Strings" in the <i>.NET Framework Developer's Guide</i>.
            </remarks>
            <value>String</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.Color">
            <summary>Sets and gets the color of the axis.</summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.LineWidth">
            <summary>Sets and gets the line width of the axis.</summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.IsActive">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisBase.Name">
            <summary>Gets or sets the name of the axis.</summary>
            <value>string</value>
            <remarks>
            The name text is not displayed but can be used to retrieve an axis from the
            AxisXList or AxisYList. See the example for the GetAxis method.
            </remarks>
            <seealso cref="!:GraphicsServer.GSNet.Charting.Chart.AxisXList">AxisXList Property</seealso>
            <seealso cref="!:GraphicsServer.GSNet.Charting.Chart.AxisYList">AxisYList Property</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AnnotationCollection.GetAnnotation(System.String)">GetAnnotation Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisLinear.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisLinear.GetTotalDataPoints">
            <summary>Returns the greatest number of data points that can display on the axis, given
            the series data assigned to the chart.</summary>
            <returns>Number of data points.</returns>
            <remarks>
            	<para>If there are multiple series and each series contains a different number of
                data points, the returned value is the number of data points in the largest series.
                For example, if two series are displayed on the chart, and one series has six data
                points while the other has five, this method returns six.</para>
            	<para>Note that this number does <strong>not</strong> reflect how many data points
                are currently displayed on the axis. It is possible, for example, that some data
                points are marked as hidden (see <see cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.HideDataPoint(System.Int32)">HideDataPoint</see>), 
                or that only a select range of data points is on display (see <see cref="P:GraphicsServer.GSNet.Charting.Grid.StartDataPoint">StartDataPoint</see>
                and <see cref="P:GraphicsServer.GSNet.Charting.Grid.EndDataPoint">EndDataPoint</see>). 
                GetTotalDataPoints() simply finds the largest series and returns the number of data 
                points in it.</para>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisLinear.GetActiveMinValue">
            <summary>Returns the current starting value of the axis range.
            </summary>
            <remarks>
            The active minimum value is the value that the axis system is currently using for
            the start of the axis. This value is assigned internally at the time the chart does a
            ReconcileLayout(). It is based on a combination of the AxisMode, the minimum calculated
            axis value, and the user defined minimum value.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AxisLinear.GetActiveMaxValue">GetActiveMaxValue Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AxisLinear.GetCalculatedMaxValue">GetCalculatedMinValue Method</seealso>
            <returns>A double representing the active minimum value.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisLinear.GetActiveMaxValue">
            <summary>Returns the current ending value of the axis range.
            </summary>
            <remarks>
            The active maximum value is the value that the axis system is currently using for
            the end of the axis range. This value is assigned internally at the time the chart does
            a ReconcileLayout(). It is based on a combination of the AxisMode, the maximum
            calculated axis value, and the user defined maximum value.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AxisLinear.GetActiveMinValue">GetActiveMinValue Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AxisLinear.GetCalculatedMaxValue">GetCalculatedMaxValue Method</seealso>
            <returns>A double representing the active maximum value.</returns>
            <example>
            	<code lang="CS" title="Axis values">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Prepare data for the chart
            Series series_0 = new Series();
            Series series_1 = new Series();
            for (int dataPoint = 0; dataPoint &lt; 6; dataPoint ++)
            {
                 //Use the memory data provider to store an arbitrary value
                 series_0.SetValue(SeriesComponent.Y, dataPoint, (7 + dataPoint) * 2);
                 series_1.SetValue(SeriesComponent.Y, dataPoint, (7 - dataPoint) * 3);
            }
             
            //Remove any previously loaded series
            cht.RemoveAllSeries(); 
             
            //Send new data to chart
            int index_0 = cht.AddSeries(series_0);
            int index_1 = cht.AddSeries(series_1);
             
            //chart type
            cht.ChartType = ChartType.Bar2D;
             
            //Y axis 
            cht.Grid.AxisY.AxisMode = AxisMode.ValueLinear;
            cht.Grid.AxisY.AxisScale = AxisScaleType.AutoRound;
             
            //Draw the chart
            cht.RecalcLayout();
             
            //Show axis values
            string msg = "Max Active Value:     " + cht.Grid.AxisY.GetActiveMaxValue() + "\n" +
                         "Min Active Value:     " + cht.Grid.AxisY.GetActiveMinValue() + "\n" +
                         "Max Calculated Value: " + cht.Grid.AxisY.GetCalculatedMaxValue() + "\n" +
                         "Min Calculated Value: " + cht.Grid.AxisY.GetCalculatedMinValue();
             
            MessageBox.Show(msg);
                </code>
            	<code lang="VB" title="Axis values">
            ' Prepare data for the chart
            Dim series_0 As New Series
            Dim series_1 As New Series
            Dim dataPoint As Integer = 0
            For dataPoint = 0 To 5
                series_0.SetValue(SeriesComponent.Y, dataPoint, (7 + dataPoint) * 2)
                series_1.SetValue(SeriesComponent.Y, dataPoint, (7 - dataPoint) * 3)
            Next
            With Me.GsNetWinChart1.Chart
                'Remove any previously loaded series
                .RemoveAllSeries()
             
                 'Send new data to chart
                 Dim index_0 As Integer = .AddSeries(series_0)
                 Dim index_1 As Integer = .AddSeries(series_1)
             
                 'Set chart type
                 .ChartType = ChartType.Bar2D
             
                 'Y axis 
                 .Grid.AxisY.AxisMode = AxisMode.ValueLinear
                 .Grid.AxisY.AxisScale = AxisScaleType.AutoRound
             
                  'Draw the chart
                  .RecalcLayout()
             
                  'Show axis values
                  Dim msg As String = "Max Active Value:     " + Convert.ToString(.Grid.AxisY.GetActiveMaxValue()) + vbCrLf + _
                                      "Min Active Value:     " + Convert.ToString(.Grid.AxisY.GetActiveMinValue()) + vbCrLf + _
                                      "Max Calculated Value: " + Convert.ToString(.Grid.AxisY.GetCalculatedMaxValue()) + vbCrLf + _
                                      "Min Calculated Value: " + Convert.ToString(.Grid.AxisY.GetCalculatedMinValue())
                  MessageBox.Show(msg)
            End With
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisLinear.GetCalculatedMinValue">
            <summary>Returns the calculated minimum value that can display on the axis.
            </summary>
            <remarks>
            The calculated minimum value is assigned internally based on the axis and the type of
            chart that has been selected. This value is typically the minimum value across the
            series data that will display on the axis. For some chart types, however, this value
            may be calculated differently. For example, a Z cluster 3D bar chart sets the Z
            axis minimum value to 0 and the maximum value to the total number of series that are active.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AxisLinear.GetCalculatedMaxValue">GetCalculatedMaxValue Method</seealso>
            <returns>A double representing the calculated minimum value.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisLinear.GetCalculatedMaxValue">
            <summary>Returns the calculated maximum value that can display on the axis.
            </summary>
            <remarks>
            The calculated maximum value is assigned internally based on the axis and the type of
            chart that has been selected. This value is typically the maximum value across the
            series data that will display on the axis. For some chart types, however, this value
            may be calculated differently. For example, a Z cluster 3D bar chart sets the Z
            axis minimum value to 0 and the maximum value to the total number of series that are active.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AxisLinear.GetCalculatedMinValue">GetCalculatedMinValue Method</seealso>
            <returns>A double representing the calculated maximum value.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisLinear.DoesSeriesBelongToAxis(GraphicsServer.GSNet.Charting.SeriesDrawing)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisLinear.ReconcileAxisToData(GraphicsServer.GSNet.Charting.SeriesDrawingCollection,GraphicsServer.GSNet.Charting.ChartTypeBase,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisLinear.AxisScale">
            <summary>
            Specifies where and how an axis obtains the value range for the axis.
            </summary>
            <remarks>
            An axis can be scaled only if two conditions are met. First, the 
            <see cref="P:GraphicsServer.GSNet.Charting.AxisBase.AxisMode">AxisMode</see> property
            must be set to some value other than Category. Second, the chart data must contain
            values for the <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent">SeriesComponent</see> 
            that corresponds to the axis.
            <para>
            <para>
            For example, stacked, two-dimensional bar charts do not support scaling of the X axis.
            When the ChartType is BarStacked2D, the AxisMode property of the X axis is forced
            to Category, and any setting for the AxisScaleType property of the X axis is ignored.
            </para>
            <para>
            Among three-dimensional charts, the only ChartType that allows scaling of the X and Z axes
            is Scatter3D.
            </para>
            For information on types of scaling available, see the <see cref="T:GraphicsServer.GSNet.Charting.AxisScaleType">AxisScaleType</see> 
            enumeration.
            </para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisScaleType">AxisScaleType</see></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisLinear.MinAxisValueUser">
            <summary>
            Sets and gets the lower limit of the range of values measured along the axis.
            </summary>
            <remarks>
            The setting for this property has no effect until the AxisScale property is set to 
            AxisScaleType.UserDefined.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisLinear.AxisScale">AxisScale Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisLinear.MaxAxisValueUser">MaxAxisValueUser Property</seealso>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisLinear.MaxAxisValueUser">
            <summary>
            Sets and gets the upper limit of the range of values measured along the axis.
            </summary>
            <remarks>
            The setting for this property has no effect until the AxisScale property is set to 
            AxisScaleType.UserDefined.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisLinear.AxisScale">AxisScale Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisLinear.MinAxisValueUser">MinAxisValueUser Property</seealso>
            <value>double</value>
            <example>
            	<code lang="CS" title="User-defined scaling">
            Chart cht = this.gsNetWinChart1.Chart;
             
            //Y axis 
            cht.Grid.AxisY.AxisMode = AxisMode.ValueLinear;
            cht.Grid.AxisY.AxisScale = AxisScaleType.UserDefined;
            cht.Grid.AxisY.MaxAxisValueUser = 25;
            cht.Grid.AxisY.MinAxisValueUser = 0;
                </code>
            	<code lang="VB" title="User-defined scaling">
            With Me.GsNetWinChart1.Chart
                'Y axis 
                .Grid.AxisY.AxisMode = AxisMode.ValueLinear
                .Grid.AxisY.AxisScale = AxisScaleType.UserDefined
                .Grid.AxisY.MaxAxisValueUser = 25
                .Grid.AxisY.MinAxisValueUser = 0
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisLinear.MajorTickInterval">
            <summary>
            Sets and gets the interval between major tick marks. 
            </summary>
            <remarks>
            	<para>This property is mutually exclusive with the MajorTickCount property. If both
                properties are set, the MajorTickCount property is used.</para>
            	<para>Note that when a Date axis is active (AxisMode.Date) then the
                MajorTickInterval should contain a TimeSpan.Ticks value. For example, if a tick
                mark is desired every 5 minutes, then MajorTickInterval can be set to
                TimeSpan(0,0,5,0,0).Ticks (i.e., the number of 100-nanosecond intervals in 5
                minutes).</para>
            </remarks>
            <value>double</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisLinear.MajorTickCount">MajorTickCount Property</seealso>
            <example>
            	<code lang="CS" title="Tick interval vs tick count">
            Chart cht = this.gsNetWinChart1.Chart;
             
            //Y axis 
            cht.Grid.AxisY.TickMode = TickMode.OnStartAtZero;
            cht.Grid.AxisY.MajorTickInterval = 5;
            cht.Grid.AxisY.MajorTickCount = 0; //If count is nonzero, interval is ignored
                </code>
            	<code lang="VB" title="Tick interval vs tick count">
            With Me.GsNetWinChart1.Chart
                'Y axis 
                .Grid.AxisY.TickMode = TickMode.OnStartAtZero
                .Grid.AxisY.MajorTickInterval = 5
                .Grid.AxisY.MajorTickCount = 0 'If count is nonzero, interval is ignored    
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisLinear.MajorTickCount">
            <summary>
            Sets and gets the total number of major tick marks on the axis.
            </summary>
            <remarks>
                Setting this property to a value greater than zero guarantees the 
                axis will always start and end with a major tick mark, even when the
                AxisScale property is set to AxisScaleType.BestFit.
                <para>
                The MajorTickCount property is mutually exclusive with the MajorTickInterval 
                property. If both properties are set, the MajorTickCount property is used. 
                </para>
            </remarks>
            <value>
            	<para>int</para>
            	<para><strong>Note:</strong> If the tick count is set to a value greater than 500,
                the drawing engine ignores the setting and defaults to displaying only 10 major
                ticks. This is a safety valve to prevent the system from trying to draw an
                excessive number of ticks. It is likely that tick marks will become indistinct well
                before this limit.</para>
            </value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisLinear.MajorTickInterval">MajorTickInterval Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisLinear.AxisScale">AxisScale Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisLinear.MinorTicks">
            <summary>
            Sets and gets the number of minor ticks to display between each major tick.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisLinear.TickMode">
            <summary>
            Controls whether tick marks are displayed and, if displayed, where they start. 
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.TickMode">TickMode</see>
            enumeration for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TickMode">TickMode Enumeration</seealso>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TickMode">TickMode</see></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisLinear.TickSize">
            <summary>Sets and gets the length of the tick marks.</summary>
            <value>int</value>
            <remarks>Minor tick marks are always half the size of the major tick marks.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisLinear.IsGapAligned">
            <summary>
            Controls whether data points are aligned on tick marks or on the gaps between
            tick marks.
            </summary>
            <remarks>
                This property applies only to a category-based axis. If the axis is value-based,
                it is ignored.
                <para>When IsGapAligned is set to false, data points are aligned with tick marks.
                If you have not set the LabelSeries property, data points are labeled with numbers,
                starting with 0.
                </para>
            	<para>When IsGapAligned is set to true, data points are shifted to the right 
                so that they line up in the middle of the gaps between tick marks. If you 
                have not set the LabelSeries property, data point numbering starts with 1. 
                </para>
            	<para>A setting of true is most useful for bar charts. For that reason, the default 
                IsGapAligned setting for bar charts is true. For all other chart types, the default 
                setting is false.
                </para>
            </remarks>
            <value>bool</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisBase.AxisMode">AxisMode Property</seealso>
            <example>
            	<code lang="CS" title="Setting the IsGapAligned property">
            Chart cht = this.gsNetWinChart1.Chart;
             
            //cht type
            cht.ChartType = ChartType.Bar2D;
             
            //X axis
            cht.Grid.AxisX.AxisMode = AxisMode.Category;
            cht.Grid.AxisX.IsGapAligned = false;
            cht.Grid.AxisX.TickMode = TickMode.OnStartAtZero;
            cht.Grid.AxisX.AxisScale = AxisScaleType.ZeroOrigin;
             
            /* When the X axis is not gap-aligned and 
             * the X axis scale is ZeroOrigin, set the 
             * Y axis position to something other than 
             * Variable 
             */
            cht.Grid.AxisY.AxisPosition = AxisPositionType.Left; 
             
            //Draw the chart
            cht.RecalcLayout();
                </code>
            	<code lang="VB" title="Setting the IsGapAligned property">
            With Me.GsNetWinChart1.Chart
                'Set chart type
                .ChartType = ChartType.Bar2D
             
                'X axis
                .Grid.AxisX.AxisMode = AxisMode.Category
                .Grid.AxisX.IsGapAligned = False
                .Grid.AxisX.TickMode = TickMode.OnStartAtZero
                .Grid.AxisX.AxisScale = AxisScaleType.ZeroOrigin
             
                ' When the X axis is not gap-aligned and 
                ' the X axis scale is ZeroOrigin, set the 
                ' Y axis position to something other than 
                ' Variable 
                .Grid.AxisY.AxisPosition = AxisPositionType.Left
             
                'Draw the chart
                .RecalcLayout()
            End With
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis2DLinear.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis2DLinear.PrepareAxisCoordinateSystem(System.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis2DLinear.SetWorldExtents(System.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis2DLinear.GetHitTestOffset">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis2DLinear.GetTickIntervalSpan">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis2DLinear.CalculateIntervalSpan">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis2DLinear.IsAxisHorizontal">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis2DLinear.SetAxisHorizontal(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis2DLinear.AxisPositionChanged">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis2DLinear.TextPainterPropsChanged">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis2DLinear.AxisPosition">
            <summary>
            Defines where and how the axis will display on the chart.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.AxisPositionType"/> enumeration for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisPositionType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis2DLinear.DateMinAxisValueUser">
            <summary>
            Gets the DateTimeExt object that provides the user-defined minimum value for 
            the axis when it is in AxisMode.Date.  
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.DateTimeExt"/></value>
            <remarks>
            This property exists to provide access to the underlying DateTimeExt object.
            See the <see cref="T:GraphicsServer.GSNet.Charting.DateTimeExt"/> class
            for further information on how to define this value.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Axis2DLinear.DateMaxAxisValueUser">DateMaxAxisValueUser Property</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.DateTimeExt">DateTimeExt Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.AxisMode">AxisMode Enumeration</seealso>
            <example>
            See the example for the DateMaxAxisValueUser property.
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis2DLinear.DateMaxAxisValueUser">
            <summary>
            Gets the DateTimeExt object that provides the user-defined maximum value for 
            the axis when it is in AxisMode.Date.  
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.DateTimeExt"/></value>
            <remarks>
            This property exists to provide access to the underlying DateTimeExt object.
            See the <see cref="T:GraphicsServer.GSNet.Charting.DateTimeExt"/> class
            for further information on how to define this value.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Axis2DLinear.DateMinAxisValueUser">DateMinAxisValueUser Property</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.DateTimeExt">DateTimeExt Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.AxisMode">AxisMode Enumeration</seealso>
            <example>
                The following code fragment formats the X axis to display DateTime values that can
                range from 17 Sep 2004 at 00:00 to 17 Sep 2004 at 15:00. 
                <code lang="CS" title="C# Example">
            // Make the X axis a Date axis.
            this.gsNetWinChart1.Chart.Grid.AxisX.AxisMode = AxisMode.Date;
                        
            // Set the major tick interval to be 3 hours long.
            this.gsNetWinChart1.Chart.Grid.AxisX.MajorTickInterval = TimeSpan.FromHours(3).Ticks;
            this.gsNetWinChart1.Chart.Grid.AxisX.MajorTickCount = 0; // If non-zero, interval is ignored.
                       
            // Change the X axis to a user defined scale.
            this.gsNetWinChart1.Chart.Grid.AxisX.AxisScale = AxisScaleType.UserDefined;
             
            // Now set the min and max date values to show on the axis.
            // Min = 00:00 on 17 Sep 2004
            this.gsNetWinChart1.Chart.Grid.AxisX.DateMinAxisValueUser.Date = new DateTime(2004, 9, 17, 0, 0, 0, 0);
            // Max = 15:00 on 17 Sep 2004
            this.gsNetWinChart1.Chart.Grid.AxisX.DateMaxAxisValueUser.Date = new DateTime(2004, 9, 17, 15, 0, 0, 0);
                        
            // The LabelFormatMask property takes a standard .Net string mask.
            this.gsNetWinChart1.Chart.Grid.AxisX.LabelFormatMask = "t"; // short time
             
            // Rotate axis labels so they don't overwrite each other
            this.gsNetWinChart1.Chart.Grid.AxisX.LabelProperties.RotateAngle = 45;
                </code>
            	<code lang="VB" title="VB Example">
            ' Make the X axis a Date axis.
            Me.GsNetWinChart1.Chart.Grid.AxisX.AxisMode = AxisMode.Date
             
            ' Set the major tick interval to be 3 hours long.
            Me.GsNetWinChart1.Chart.Grid.AxisX.MajorTickInterval = TimeSpan.FromHours(3).Ticks
            Me.GsNetWinChart1.Chart.Grid.AxisX.MajorTickCount = 0 ' If non-zero, interval is ignored.
             
            ' Change the X axis to a user defined scale.
            Me.GsNetWinChart1.Chart.Grid.AxisX.AxisScale = AxisScaleType.UserDefined
             
            ' Now set the min and max date values to show on the axis.
            ' Min = 00:00 on 17 Sep 2004
            Me.GsNetWinChart1.Chart.Grid.AxisX.DateMinAxisValueUser.Date = New DateTime(2004, 9, 17, 0, 0, 0, 0)
            ' Max = 15:00 on 17 Sep 2004
            Me.GsNetWinChart1.Chart.Grid.AxisX.DateMaxAxisValueUser.Date = New DateTime(2004, 9, 17, 15, 0, 0, 0)
             
            ' The LabelFormatMask property takes a standard .Net string mask.
            Me.GsNetWinChart1.Chart.Grid.AxisX.LabelFormatMask = "t" ' short time
             
            ' Rotate axis labels so they don't overwrite each other
            Me.GsNetWinChart1.Chart.Grid.AxisX.LabelProperties.RotateAngle = 45
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis2DLinear.DisplayOriginLine">
            <summary>Draws a line through the origin point of the axis.
            </summary>
            <remarks>
            Setting this property to true displays a line through the origin point of the
            axis. This property is useful if the AxisPosition property is forcing
            the axis crossing point to be some place other than the actual origin.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Axis2DLinear.AxisPosition">AxisPosition Property</seealso>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis2DLinear.OriginLine">
            <summary>
            Gets the Line object that draws the optional origin line.
            </summary>
            <remarks>
            Use this property to access the properties of the underlying Line object.
            See the <see cref="T:GraphicsServer.GSNet.Charting.Line"/> class for more 
            information concerning line properties.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis2DLinear.TickDrawStyle">
            <summary>
            This property determines how the tick marks will draw.  
            </summary>
            <remarks>
            Tick marks can draw through the axis, above the axis, or below the axis.  
            See the <see cref="T:GraphicsServer.GSNet.Charting.TickDrawStyle"/> enumeration
            for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TickDrawStyle"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis2DLinear.ReverseValueDirection">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis2DLinear.IntervalSpan">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis2DLinear.Offset">
            <summary>
            The offset is a pixel value that specifies how far off the visible axis will be drawn from the 
            actual axis edge. If zero, then the visible axis is the same as the actual axis edge. 
            </summary>
            <value>Integer representing the space between the actual axis edge and the visible drawn axis.</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis2DLinear.AxisLineVisible">
            <summary>
            When the AxisLineVisible is true the axis line will be displayed.
            </summary>
            <remarks>
            When the AxisLineVisible is false, only the axis line will be hidden. The ticks along the axis
            will still be displayed, whether or not the AxisLineVisible is true or false.
            </remarks>
            <value>Bool that displays axis line, or hides axis line.</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Axis3DLinear">
            <base>GraphicsServer.GSNet.Charting.AxisLinear</base>
            <summary>
            This is the 3D linear axis class.  This class contains base
            3D properties that any derived 3D axis will inherit.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DLinear.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DLinear.PrepareAxisCoordinateSystem(System.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DLinear.DoesSeriesBelongToAxis(GraphicsServer.GSNet.Charting.SeriesDrawing)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DLinear.GenerateDrawingObjects(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis3DLinear.TickSize">
            <summary>
            Sets and gets the length of the tick marks.
            </summary>
            <remarks>
            Minor tick marks are always half the size of the major tick marks.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis3DLinear.MinorTicks">
            <summary>
            Sets and gets the number of minor ticks to display between each major tick. 
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Axis3DX">
            <summary>Provides the X axis for three-dimensional charts.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DX.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DX.GetSeriesComponentType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DX.GetAxisType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DX.ToString">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis3DX.BarGap">
            <summary>Sets and gets the gap between sets of bars.</summary>
            <value>int</value>
            <remarks>
            Valid values can range from 0 to 100 and represent the percentage gap on either
            side of a set of bars within an interval.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis3DX.IsPareto">
            <value>bool</value>
            <remarks>
            Setting this property to true sorts the chart's data points based on a descending
            sort order of the values in the first series added to the chart. Note that each time
            this value is set to true the existing set of sorted data points will be cleared and
            then recreated.
            </remarks>
            <summary>Determines whether values on the axis are sorted in descending order.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Axis3DY">
            <summary>Provides the Y axis on three-dimensional charts.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DY.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DY.GetSeriesComponentType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DY.GetAxisType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DY.ToString">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Axis3DZ">
            <base>GraphicsServer.GSNet.Charting.Axis3DLinear</base>
            <summary>
            Provides the Z axis on three-dimensional charts.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DZ.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DZ.GetSeriesComponentType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DZ.GetAxisType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DZ.ReconcileAxisToData(GraphicsServer.GSNet.Charting.SeriesDrawingCollection,GraphicsServer.GSNet.Charting.ChartTypeBase,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Axis3DZ.ToString">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis3DZ.BarGap">
            <summary>Sets and gets the gap between sets of bars.</summary>
            <value>int</value>
            <remarks>
            Valid values can range from 0 to 100 (a percentage). This is the gap on either
            side of a set of bars within an interval.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Axis3DZ.BarDepthToWidthRatio">
            <summary>Sets and gets the ratio of bar depth to width.</summary>
            <value>float</value>
            <remarks>
            The larger the value, the longer the bars will be in the Z direction. Note also
            that this value can be set to less than 1 (e.g. .25).
            </remarks>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisAngular">
            <base>GraphicsServer.GSNet.Charting.AxisBase</base>
            <summary>
            This is the angular axis for polar coordinate chart types
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.GetSeriesComponentType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.GenerateDrawingObjects(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.GetAxisType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.ReconcileAxisToData(GraphicsServer.GSNet.Charting.SeriesDrawingCollection,GraphicsServer.GSNet.Charting.ChartTypeBase,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.PrepareAxisCoordinateSystem(System.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.SetWorldExtents(System.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.GetHitTestOffset">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.GetTickIntervalSpan">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.GetCenterPoint">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.CalculateIntervalSpan">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.GetLabel(System.Double)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisAngular.ToString">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.AxisScale">
            <summary>
            Defines where and how an axis obtains its value range.
            </summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.AxisScaleType"/> enum for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisScaleType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.StartPosition">
            <summary>
            Defines the angular starting position, where the minimum value displays.
            </summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.PolarAxisPositionType"/> enumeration for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.PolarAxisPositionType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.RotationDirection">
            <summary>Defines in which direction from the origin the series displays.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.RotationDirection"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.AngularUnits">
            <summary>Defines the units for the angular values on the axis.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AngularUnits"/></value>
            <remarks>
            The units can be degrees or radians. If set to radians, be sure to specify all
            relevant angular axis property values in radians instead of degrees.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.DegreesPerRevolution">
            <summary>Sets and gets the number degrees in a full revolution of the axis.</summary>
            <value>float</value>
            <remarks>Note that a full revolution is allowed to be greater than 360 degrees.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.MinAxisValueUser">
            <summary>Sets and gets a user-defined minimum axis value.</summary>
            <value>double</value>
            <remarks>
            Note that this value will not be active until the AxisScale property is set to
            AxisScaleType.UserDefined
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisAngular.AxisScale">AxisScale Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.MaxAxisValueUser">
            <summary>Sets and gets a user-defined maximum axis value.</summary>
            <value>double</value>
            <remarks>
            Note that this value will not be active until the AxisScale property is set to
            AxisScaleType.UserDefined
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisAngular.AxisScale">AxisScale Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.MajorTickInterval">
            <summary>Sets and gets the interval between major tick marks.</summary>
            <value>double</value>
            <remarks>
            If the tick interval is set such that greater than 500 major tick marks are
            required to draw, then the engine will ignore this setting and default to displaying
            only 10 major ticks. This is a safety value to prevent the system from trying to draw
            an impossibly large number of tick marks.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.TickDrawStyle">
            <summary>
            Determines how the tick marks draw.  
            </summary>
            <remarks>For example, the tick marks can
            draw through the axis, above the axis or below the axis.  
            See the <see cref="T:GraphicsServer.GSNet.Charting.TickDrawStyle"/> enumeration
            for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TickDrawStyle"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.TickMode">
            <summary>
            Turns tick drawing on and off.  
            </summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.TickMode"/> 
            enumeration for more information.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TickMode"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.MinorTicks">
            <summary>
            Sets and gets the number of minor ticks to display between each major
            tick.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.TickSize">
            <summary>Sets and gets the size of the tick marks.</summary>
            <value>int</value>
            <remarks>
            The minor ticks marks will always be half the size of the major tick
            marks.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.LabelUnitsOn">
            <summary>
            Sets and gets whether or not the labels will write out
            Radians or Degrees (°) units along with the data value.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.StartAngle">
            <summary>
            Sets and gets the start angle for the axis. This is used
            in conjunction with StartPostion. The StartPosition must
            equal UseStartAngle for the StartAngle to be used.
            </summary>
            <remarks>
            <para>
            The StartAngle will always be between 0 degrees and 360 degrees.
            </para>
            <para>
            The StartAngle will always specify the start angle according to a
            counterclockwise polar circle, with 0 degrees being at the right
            edge of the polar circle, 90 degrees at top of circle, 180 degrees
            at left of circle, 270 degrees at bottom of circle, and so forth.
            </para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.GridLineStartRadius">
            <summary>
            Sets and gets the starting radius for the grid lines.
            </summary>
            <remarks>
            <para>
            One can limit the grid lines to only a certain range of
            the axis by assigning the GridLineStartRadius
            and GridLineEndRadius.
            </para>
            <para>
            Note that if both GridLineStartRadius = -1 and 
            GridLineEndRadius = -1 (their default values), then
            the grid lines will be drawn as normal, spanning the
            entire axis range.
            </para>
            </remarks>
            <value><see cref="T:System.Double"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisAngular.GridLineEndRadius">
            <summary>
            Sets and gets the ending radius for the grid lines.
            </summary>
            <remarks>
            <para>
            One can limit the grid lines to only a certain range of
            the axis by assigning the GridLineStartRadius
            and GridLineEndRadius.
            </para>
            <para>
            Note that if both GridLineStartRadius = -1 and 
            GridLineEndRadius = -1 (their default values), then
            the grid lines will be drawn as normal, spanning the
            entire axis range.
            </para>
            </remarks>
            <value><see cref="T:System.Double"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisPositionType">
            <summary>
            Specifies the location of a linear axis.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisPositionType.Variable">
            <summary>
            The axis tries to draw itself through the origin point (0,0). If the
            origin point does not exist in the range of data graphed, then the axis 
            positions itself close to the origin point. For example, if the Y values 
            for a chart go from -5 to -20, then a variable-mode X axis displays at the 
            top of the chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisPositionType.Left">
            <summary>
            A vertical axis displays on the left side of the chart. A horizontal axis 
            displays on the bottom.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisPositionType.Right">
            <summary>
            A vertical axis displays on the right side of the chart. A horizontal axis 
            displays on the top.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisPositionType.Top">
            <summary>
            A horizontal axis displays on the top of the chart. A vertical axis displays
            on the right.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisPositionType.Bottom">
            <summary>
            A horizontal axis displays on the bottom of the chart. A vertical axis displays
            on the left.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.PolarAxisPositionType">
            <summary>
            	Specifies axis position for Radial, Angular, Radar and Pie charts.
            </summary>
            <remarks>
            	<para>For a Radial axis, this enumeration defines the position where the axis
                draws. For Angular and Pie axes, it defines the starting position, the place where
                the minimum value is drawn.</para>
            	<para>
            		<para>For example, for a Radial axis, Left means the axis draws from the center
                    to the left. For a Radar axis, Left defines the starting position for the first
                    data point's spoke.</para>
            	</para>
            	<para>
            	If UseStartAngle is specified, then the <see cref="P:GraphicsServer.GSNet.Charting.AxisAngular.StartAngle"/>
            	property will be used instead of the StartPosition.
            	</para></remarks>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PolarAxisPositionType.Left">
            <summary>Left</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PolarAxisPositionType.Right">
            <summary>Right</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PolarAxisPositionType.Top">
            <summary>Top</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PolarAxisPositionType.Bottom">
            <summary>Bottom</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PolarAxisPositionType.UseStartAngle">
            <summary>UseStartAngle</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisScaleType">
            <summary>
            Specifies where and how an axis obtains the value range for the axis.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisScaleType.ZeroOrigin">
            <summary>
            The axis always displays zero within the axis range.
            For example, if a data series goes from 300 to 900, the axis displays a range
            from 0 to 900.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisScaleType.BestFit">
            <summary>
            Use the min and max values across all of the series that display on the axis. For
            example, if there are three series displaying on an axis, and the min/max values are
            300 and 900, then the axis displays a range from 300 to 900.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisScaleType.UserDefined">
            <summary>
            Display an axis range defined by the user. The axis object has 
            MaxAxisValueUser and MinAxisValueUser properties exposed for this purpose.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisScaleType.AutoRound">
            <summary>
                Display an axis range from a round minimum value to a round maximum value. For
                example, if the max data value is 97, the maximum axis value is set to 100. 
                <para>Note that AutoRound produces a different result depending on whether the axis
                is using MajorTickCount or MajorTickInterval. In either case, there is always a
                tick mark at the minimum value on the axis and a tick mark at the maximum
                value.</para>
            	<para>When AutoRound is active, the
                <see cref="T:GraphicsServer.GSNet.Charting.TickMode">TickMode</see> setting is
                ignored and forced to the OnStartAtMinValue setting. This ensures a tick mark will
                draw and the min and max values on the axis will be as described above.</para>
            	<para>For Radial and Angular axes, the AutoRound setting produces the same results
                as the ZeroOrigin setting.</para>
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisScaleType.SmartScaling">
            <summary>
            	Displays an axis with each axis tick or axis label containing mostly zeros. An
            	example would be a tick or label of 150000 rather than 147652. This works
            	quite similar to AutoRound, but produces labels that more consistenly contain mostly zeros.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TickDrawStyle">
            <summary>
            Specifies how the tick marks paint.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TickDrawStyle.ThroughAxis">
            <summary>
            Draws the tick marks through the axis such that they display on both sides of the axis.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TickDrawStyle.InsideAxis">
            <summary>
            Draws the tick marks on the inside of the axis only. Note that if an axis is moved to the 
            opposite side of the chart, the direction of the tick marks does not reverse.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TickDrawStyle.OutsideAxis">
            <summary>
            Draws the tick marks on the outside of the axis only. Note that if an axis is moved to the 
            opposite side of the chart, the direction of the tick marks does not reverse.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TickMode">
            <summary>
            Specifies whether tick marks are turned off or turned on. Note there are two
            modes for ticks when they are turned on.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TickMode.Off">
            <summary>Tick marks do not display.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TickMode.OnStartAtZero">
            <summary>
            Tick marks display and numbering starts at zero whether going
            in the negative direction or the positive direction. If zero does not appear in the axis
            range, then numbering still starts at zero. The visual effect of this may be that 
            no major tick mark appears at the start of the axis.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TickMode.OnStartAtMinValue">
            <summary>
            Tick marks display and numbering starts at the smallest number
            on the axis. The visual effect of this is that there is always a major tick mark
            at the start of the axis. Note that if zero is in the axis range, it may not display
            a tick mark in this mode.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AngularUnits">
            <summary>
            Specifies the unit of measurement to use for an Angular axis.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AngularUnits.Degrees">
            <summary>Degrees</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AngularUnits.Radians">
            <summary>Radians</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.RotationDirection">
            <summary>
            Specifies the direction of rotation for Angular and Pie axes.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RotationDirection.Clockwise">
            <summary>Clockwise</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RotationDirection.CounterClockwise">
            <summary>Counterclockwise</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.PieUnits">
            <summary>
            Specifies the value to display in labels for pie wedges when marker labels are visible.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PieUnits.Value">
            <summary>Display the actual numeric value represented by the wedge.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PieUnits.Percent">
            <summary>Display the wedge's percentage of the pie.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.PieLabelLocation">
             <summary>
             Specifies where pie labels draw.
             </summary>
             <remarks>
             Smart pie labels use the <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieSmartLabelOffset"/> property.
             to determine how far from the pie the labels will be offset.  
             The <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieSmartLabelMidPoint"/> property is used 
             to determine where the label line will bend.
             <para>
             The smart label mechanism will paint the pie labels on both the left and right sides of the
             pie.  To make more space available for the labels you can manipulate the Grid margin 
             properties (e.g. <see cref="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisLeft"/>,
             <see cref="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisRight"/>).  Or you can use the
             <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieSize"/> property to shrink the size
             of the pie.
            </para>
             </remarks>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PieLabelLocation.Inside">
            <summary>Pie labels paint inside the pie wedges.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PieLabelLocation.Outside">
            <summary>Pie labels paint outside the pie wedges.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PieLabelLocation.SmartLabels">
            <summary>Pie labels aligned on left and right of pie, so as not to overlap each other.
            See remarks for more information.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisMode">
            <summary>
            Specifies the numeric mode for an axis. 
            </summary>
            <remarks>Note that some modes may not be valid for certain chart types. Refer to 
            the <see cref="T:GraphicsServer.GSNet.Charting.ChartType">ChartType</see> documentation.</remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisBase.AxisMode">AxisMode Property</seealso>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisMode.Category">
            <summary>
                Values on the axis are not quantitative but are instead used only for
                identification (e.g., point 1, point 2, point 3). The order of values has no
                significance. 
                <para>The MajorTickInterval property for a category-based axis should be set to 1
                for best results.</para>
            	<para>Category mode does not have any effect on a Radar chart.</para>
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisMode.Date">
            <summary>
            	<para>Values on the axis are dates. The order of values is chronological.</para>
            	<para>When an axis is in date mode, the Series data graphed on the axis must
                contain date data.</para>
            	<para>Date mode does not have any effect on the Radar chart.</para>
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisMode.ValueLinear">
            <summary>Values on the axis are numeric and the scale is linear.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AxisMode.ValueLog">
            <summary>Values on the axis are numeric and the scale is logarithmic.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.GridLineType">
            <summary>Specifies the type of grid lines for a Radar chart.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GridLineType.Circle">
            <summary>
            Drawn as circles when grid lines are enabled.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GridLineType.Polygon">
            <summary>
            Drawn as polygons when grid lines are enabled.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisFunnel">
            <summary>Provides the axis for a funnel chart.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisFunnel.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisFunnel.GetSeriesComponentType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisFunnel.GenerateDrawingObjects(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisFunnel.GetAxisType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisFunnel.GetTotalDataPoints">
            <summary>
            Return the total number of data points within the series containing the funnel data.
            <para>Note that this number does NOT reflect how many data points are currently displaying on the
            axis.</para>
            </summary>
            <returns>Number of data points.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisFunnel.GetActiveMaxValue">
            <summary>
            The active max axis value is the value that the axis system is currently using
            to caculate the percent fill for each funnel marker.  This value will either be
            the calculated max value, or if the MaxAxisValueUser property is non zero then
            this value will be the value from the MaxAxisValueUser.
            </summary>
            <returns>A double representing the active max value.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisFunnel.GetCalculatedMaxValue">
            <summary>
            The calculated max value is assigned internally when the axis is reconciled
            against the series data attached to the chart.  This value is the max
            value returned by the data provided attached to the Y component within the series.
            </summary>
            <returns>A double representing the calculated max value.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisFunnel.ReconcileAxisToData(GraphicsServer.GSNet.Charting.SeriesDrawingCollection,GraphicsServer.GSNet.Charting.ChartTypeBase,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisFunnel.PrepareAxisCoordinateSystem(System.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisFunnel.MaxAxisValueUser">
            <summary>Sets and gets a user-defined maximum axis value.</summary>
            <remarks>
            	<para>Note that if MaxAxisValueUser is zero, the calculated max value is
                used.</para>
            	<para>The funnel segments (i.e. funnel markers) fill themselves based on the
                maximum funnel axis value and the segment value. In other words, the fill is the
                percentage of the segment value to the axis maximum value.</para>
            	<para>The funnel axis calculates a maximum axis value by calling the attached
                series, which in turn talk to the corresponding data provider to return the maximum
                value within the data. This calculated maximum value is used as the default maximum
                value unless overridden via this property by setting the value to someting other
                than zero.</para>
            </remarks>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisFunnel.SmallEndSizePercent">
            <summary>
            Sets and gets a value between 0 and 100, representing the size of the small end
            of the funnel as a percentage of the size of the large end of the funnel.
            </summary>
            <remarks>
            The size of the large end of the funnel is determined by the 
            <see cref="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisTop"/> grid property and
            the <see cref="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisBottom"/> grid property.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisFunnel.LabelsEnabled">
            <summary>
            Sets and gets the boolean that turns funnel bottom labels on and off.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisFunnel.ArcWidth">
            <summary>
            Sets and gets the value that controls the curve of the funnel.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisFunnel.FunnelFill">
            <summary>
            Gets the Background object that provides the background for the main funnel
            area.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisFunnel.FunnelEndFill">
            <summary>Gets the Background object that fills the large end of the funnel area.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisFunnel.LabelFormatMaskPercentFill">
            <summary>
            Sets and gets the mask for formatting marker labels showing the percent fill of
            each sement.
            </summary>
            <value>String</value>
            <remarks>
            This property accepts any valid .NET format string that is accepted by the
            ToString() method. See the .NET documentation for more information.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisFunnel.AxisMode">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisFunnel.GridLineProperties">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisFunnel.GridLinesOn">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisPie">
            <base>GraphicsServer.GSNet.Charting.AxisBase</base>
            <summary>
            Pie axis. This axis is never drawn but does contain several properties
            that effect how a Pie chart is displayed.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisPie.StartPosition">
            <summary>
            Defines the starting position of the first pie slice.  See the
            <see cref="T:GraphicsServer.GSNet.Charting.PolarAxisPositionType"/> enum for more information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.PolarAxisPositionType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisPie.Direction">
            <summary>
            Defines which direction the the pie slices will display around the pie.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.RotationDirection"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisRadar">
            <summary>This is the radial axis for radar charts.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.GetSeriesComponentType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.CalculateSpokeAngle(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.GenerateDrawingObjects(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.GetAxisType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.GetMaxWorldExtent">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.GetMinWorldExtent">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.GetActiveMinValue">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.GetActiveMaxValue">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.ReconcileAxisToData(GraphicsServer.GSNet.Charting.SeriesDrawingCollection,GraphicsServer.GSNet.Charting.ChartTypeBase,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.PrepareAxisCoordinateSystem(System.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.SetWorldExtents(System.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadar.CalculateIntervalSpan">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.SpokeLabelOffset">
            <summary>
            Sets and gets the offset the offset of the spoke labels from the end of each
            radar spoke.
            </summary>
            <value>int</value>
            <remarks>
            There is no upper limit to this value but if the value is large enough, the
            labels will paint outside the grid area and hence not be visible.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.ReverseValues">
            <value>bool</value>
            <remarks>
            Setting this property to true reverses the values on the axis system such that
            the larger max axis value is at the origin of the radar graph and the smaller min axis
            value is at the end of the radar graph.
            </remarks>
            <summary>Reverses the order of values on the axis.</summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.AxisPosition">
            <summary>
            Defines the position where the first datapoint spoke starts.  
            </summary>
            <remarks>Note that this value is also used for the Polar chart type but 
            is used slightly differently in that chart type.  See the
            <see cref="T:GraphicsServer.GSNet.Charting.PolarAxisPositionType"/> enumeration 
            for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.PolarAxisPositionType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.AxisScale">
            <summary>
            Defines where and how an axis obtains the value range for the axis.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.AxisScaleType"/> enumeration for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisScaleType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.MinAxisValueUser">
            <summary>Sets and gets a user-defined minimum axis value.</summary>
            <value>double</value>
            <remarks>
            Note that this value is not active until the AxisScale property is set to
            AxisScaleType.UserDefined.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.MaxAxisValueUser">
            <summary>Sets and gets a user-defined maximum axis value.</summary>
            <value>double</value>
            <remarks>
            Note that this value is not active until the AxisScale property is set to
            AxisScaleType.UserDefined.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.MajorTickInterval">
            <summary>Sets and gets the interval between major tick marks.</summary>
            <value>double</value>
            <remarks>
            If the tick interval is set such that greater than 500 major tick marks are
            required to draw, the engine will ignore this setting and default to displaying only 10
            major ticks. This is a safety value to prevent the system from trying to draw an
            impossibly large number of tick marks.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.MajorTickCount">
            <summary>Sets and gets the total number of major ticks to display.</summary>
            <value>int</value>
            <remarks>
                This property guarantees the axis will always start and end with a major tick mark.
                
                <para>This property is mutually exclusive with the MajorTickInterval property. If
                both properties are set, the MajorTickCount property is used.</para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.MinorTicks">
            <summary>
            Sets and gets the number of minor ticks to display between each major tick.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.TickDrawStyle">
            <summary>
            Determines how the tick marks are drawn.  
            for more information.
            </summary>
            <remarks>For example, tick marks can draw through the axis, above the axis, or below the axis.
            See the <see cref="T:GraphicsServer.GSNet.Charting.TickDrawStyle"/> enumeration.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TickDrawStyle"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.TickMode">
            <summary>
            Turns tick drawing on and off.  
            </summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.TickMode"/> enumeration 
            for more information.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TickMode"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.GridLineType">
            <summary>
            Determines whether to draw grid lines as circles or polygons.  
            </summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.GridLineType"/> enumeration 
            for more information.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.GridLineType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.TickSize">
            <summary>Sets and gets the size of the tick marks.</summary>
            <value>int</value>
            <remarks>Minor ticks marks are always half the size of the major tick marks.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.IntervalSpan">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadar.RotationDirection">
            <summary>
            Defines which direction the radar spokes will display around the graph from the 
            AxisPosition starting point.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.RotationDirection"/></value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisRadar.AxisPosition">AxisPosition Property</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisRadial">
            <base>GraphicsServer.GSNet.Charting.AxisBase</base>
            <summary>
            This is the radial axis for polar coordinate chart types.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.GetSeriesComponentType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.GenerateDrawingObjects(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.GetAxisType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.GetMaxWorldExtent">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.GetMinWorldExtent">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.GetActiveMinValue">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.GetActiveMaxValue">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.ReconcileAxisToData(GraphicsServer.GSNet.Charting.SeriesDrawingCollection,GraphicsServer.GSNet.Charting.ChartTypeBase,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.PrepareAxisCoordinateSystem(System.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.SetWorldExtents(System.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.GetHitTestOffset">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.GetTickIntervalSpan">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.CalculateIntervalSpan">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.IsAxisHorizontal">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisRadial.AxisPositionChanged">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadial.AxisPosition">
            <summary>
            Defines the ending position of the radial axis on the angular axis.  
            </summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.PolarAxisPositionType"/> 
            enumeration for more information.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.PolarAxisPositionType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadial.AxisScale">
            <summary>
            Defines where and how an axis obtains the value range for the axis.  
            </summary>
            <remarks>
            See the AxisScaleType enumeration for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisScaleType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadial.MinAxisValueUser">
            <summary>
            Sets and gets a user-defined minimum axis value.  
            </summary>
            <remarks>
            Note that this value is not active until the 
            AxisScale property is set to AxisScaleType.UserDefined.
            </remarks>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadial.MaxAxisValueUser">
            <summary>
            Sets and gets a user-defined maximum axis value. 
            </summary>
            <remarks>Note that this value is not active until the AxisScale property 
            is set to AxisScaleType.UserDefined.</remarks>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadial.MajorTickInterval">
            <summary>Sets and gets the interval between major tick marks.</summary>
            <remarks>
            If the tick interval is set such that greater than 500 major tick marks are
            required to draw then the engine will ignore this setting and default to displaying
            only 10 major ticks. This is a safety value to prevent the system from trying to draw
            an impossibly large number of tick marks.
            </remarks>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadial.MinorTicks">
            <summary>
            Sets and gets the number of minor ticks to display between each major tick.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadial.TickDrawStyle">
            <summary>Determines how tick marks are drawn.</summary>
            <remarks>Tick marks can draw through the axis, above the axis 
            or below the axis. See the <see cref="T:GraphicsServer.GSNet.Charting.TickDrawStyle"/>
            enumeration for more information.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TickDrawStyle"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadial.TickMode">
            <summary>
            Turns tick drawing on and off.  
            </summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.TickMode"/> 
            enumeration for more information.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TickMode"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadial.TickSize">
            <summary>
            Sets and gets the size of the tick marks.  
            </summary>
            <remarks>Minor ticks marks are always half the size of the 
            major tick marks.</remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisRadial.IntervalSpan">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisTypeListBase">
            <summary>
            AxisTypeListBase is the base class for all axis lists, including AxisYList,
            AxisXList, AxisYPrimeList, AxisXPrimeList.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisTypeListBase.#ctor(System.Collections.ICollection)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisTypeListBase.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisTypeListBase.Add(System.Object)">
            <summary>Adds a new axis to the axis list.</summary>
            <returns>The index of the new axis.</returns>
            <remarks>
            Axis spacing is automatically adjusted when a new axis is added if the
            AutoArrange property is set to true.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisTypeListBase.AutoArrange">AutoArrange Property</seealso>
            <param name="value">An AxisY axis to add to the list.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisTypeListBase.Remove(System.Object)">
            <summary>
            Removes an axis from the axis list. 
            </summary>
            <remarks>
            The object passed in should be type AxisBase, or a derivative.
            </remarks>
            <param name="value">The AxisBase object to remove from the 
            AxisTypeList.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisTypeListBase.UpdateMapping">
            <summary>Updates all Series Drawing mapping to the axis list.</summary>
            <remarks>
            This method verifies that each SeriesDrawing object maps to a valid instantiated
            Axis object in the Axis list.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisTypeListBase.Clear">
            <summary>Removes all elements from the list</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisTypeListBase.ClearAllMapping">
            <summary>Clears all axis list mapping from within the SeriesDrawing list.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisTypeListBase.ArrangeEvenly">
            <summary>Arranges all axes so that they are evenly spaced within the grid margin.</summary>
            <remarks>
            This method achieves even spacing by setting the Offset property of each axis.
            The setting is calculated by dividing the size of the grid margin by the number of axes
            in the list plus one.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisTypeListBase.AutoArrange">AutoArrange Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisTypeListBase.GetAxis(System.String)">
            <summary>Retrieves an axis whose Name property matches the specified string.</summary>
            <remarks>
            This method searches the axes in the chart's axis list and returns 
            the first one that contains the specified string in its Name property.
            </remarks>
            <returns>Axis object or null if not found.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisTypeListBase.GetAxis(System.Int32)">
            <summary>Retrieves an axis at the specified index.</summary>
            <returns>Axis object or null if no axis exists at the specified index.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisTypeListBase.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>
            Writes all the axis objects currently in the list out to XML.
            </summary>
            <param name="doc">The XmlDocument context used to create the new element node.</param>
            <param name="flags">Template flags to control template writing.  See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
            <returns>This method returns an XmlElement if properties were written. A null value is returned if there were no properties to write.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisTypeListBase.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>Reads axis objects from the xml node and rebuilds the
            SpecialEffectsList.</summary>
            <param name="node">XmlNode that contains the properties.</param>
            <param name="flags">Template flags to control template writing.  See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisTypeListBase.AutoArrange">
            <summary>
            Controls whether axes in the list are automatically arranged so that each axis is evenly
            spaced within the grid margin.
            </summary>
            <remarks>
            	<para>When this property is set to true (the default), axes are automatically
                spaced evenly within the grid margin. The control achieves even spacing by dividing
                the number of axes plus one into the size of the margin and then setting the result
                in the Offset property of each axis.</para>
            	<para>If you want to determine axis spacing manually, set AutoArrange to false
                before setting the Offset properties of axes in the list.</para>
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisTypeListBase.Item(System.String)">
            <summary>Retrieves an axis whose Name property matches the specified string.</summary>
            <remarks>
            This method searches the axes in the chart's axis list and returns 
            the first one that contains the specified string in its Name property.
            </remarks>
            <returns>Axis object or null if not found.</returns>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisTypeListHelper">
            <summary>
            AxisTypeListHelper will assist in producing all the extra axis lists, such
            as AxisYList, AxisYPrimeList, AxisXList, AxisXPrimeList.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisX">
            <summary>Supports the X axis on two-dimensional linear charts.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisX.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisX.GetSeriesComponentType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisX.DoesSeriesBelongToAxis(GraphicsServer.GSNet.Charting.SeriesDrawing)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisX.GenerateDrawingObjects(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisX.GenerateDrawingObjects(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable,GraphicsServer.GSNet.Charting.Axis2DLinear)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisX.GetAxisType">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisX.BarGap">
            <value>int</value>
            <remarks>
            Valid values range from 0 to 100 (a percentage). This is the gap on either side
            of a set of bars within an interval.
            </remarks>
            <summary>Sets or gets the percentage gap between bars.</summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisX.BarOverlap">
            <value>int</value>
            <remarks>
            Valid values range from 0 to 100. This is the percentage that each bar overlaps
            the previous one.
            </remarks>
            <summary>Sets or gets the percentage that bars overlap.</summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisX.IsOverlappedFirstOnTop">
            <value>bool</value>
            <remarks>
            If the value is true, then the first bar is on top and the rest cascade
            underneath. If false, then the last bar is on top and they cascade in the other
            direction.
            </remarks>
            <summary>Determines which direction to overlap bars.</summary>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisX.BarOverlap">BarOverlap Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisX.IsPareto">
            <value>bool</value>
            <remarks>
            Setting this property to true sorts data points in descending order of the values
            of the X components in the first series added to the chart. Note that each time this
            value is set to true the existing set of sorted data points is cleared and then
            recreated.
            </remarks>
            <summary>Determines whether X component data values are sorted in descending order.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisXList">
            <summary>
            The AxisXList allows for as many 2D X axes as desired, in addition
            to the main X axis available through Grid.AxisX.
            </summary>
            <remarks>
            <para>
            To use the AxisXList, create a new AxisX object, add it to the AxisXList,
            and finally map a series to the new AxisX object by using the
            <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToXList"/>
            property.
            </para>
            <para>
            Note that all the X axes will be drawn within the grid margins:
            <see cref="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisBottom"/> or
            <see cref="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisTop"/>.
            </para>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXList.#ctor(System.Collections.ICollection)">
            <exclude/>
            <param name="c"></param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXList.ClearAllMapping">
            <summary>
            Removes all SeriesDrawing mapping to the Axis X List. Instead it 
            maps to the main Axis X.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXList.UpdateMapping">
            <summary>
            Updates all Series Drawing mapping to the axis list. This 
            will verify that the Series Drawing maps to a valid instantiated
            Axis object in the Axis list.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXList.ArrangeEvenly">
            <summary>
            ArrangeEvenly will arrange all the axes offset values so
            that the result is that the axes are evenly spaced within the 
            grid margin.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXList.GetAxis(System.String)">
            <summary>Retrieves an axis whose Name property matches the specified string.</summary>
            <remarks>
            This method searches the axes in the chart grid's AxisXList and returns 
            the first one that contains the specified string in its Name property.
            </remarks>
            <returns>AxisX object or null if not found.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXList.GetAxis(System.Int32)">
            <summary>Retrieves an axis at the specified index.</summary>
            <returns>AxisX object or null if no axis exists at the specified index.</returns>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisXList.Item(System.String)">
            <summary>Retrieves an axis whose Name property matches the specified string.</summary>
            <remarks>
            This method searches the axes in the chart grid's AxisXList and returns 
            the first one that contains the specified string in its Name property.
            </remarks>
            <returns>AxisX object or null if not found.</returns>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisXPrime">
            <base>GraphicsServer.GSNet.Charting.AxisX</base>
            <summary>
            Supports a secondary X axis on two-dimensional linear charts.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXPrime.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXPrime.DoesSeriesBelongToAxis(GraphicsServer.GSNet.Charting.SeriesDrawing)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXPrime.GetSeriesComponentType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXPrime.GetAxisType">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisXPrime.AxisPosition">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisXPrimeList">
            <summary>
            The AxisXPrimeList allows for as many 2D X Prime axes as desired, in addition
            to the main X Prime axis available through Grid.AxisXPrime.
            </summary>
            <remarks>
            <para>
            To use the AxisXPrimeList, create a new AxisXPrime object, add it to the AxisXPrimeList,
            and finally map a series to the new AxisXPrime object by using the
            <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToXPrimeList"/>
            property.
            </para>
            <para>
            Note that all the X Prime axes will be drawn within the grid margins:
            <see cref="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisBottom"/> or
            <see cref="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisTop"/>.
            </para>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXPrimeList.#ctor(System.Collections.ICollection)">
            <exclude/>
            <param name="c"></param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXPrimeList.ClearAllMapping">
            <summary>
            Removes all SeriesDrawing mapping to the Axis X Prime List. Instead it 
            maps to the main Axis X Prime.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXPrimeList.UpdateMapping">
            <summary>
            Updates all Series Drawing mapping to the axis list. This 
            will verify that the Series Drawing maps to a valid instantiated
            Axis object in the Axis list.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXPrimeList.ArrangeEvenly">
            <summary>
            ArrangeEvenly will arrange all the axes offset values so
            that the result is that the axes are evenly spaced within the 
            grid margin.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXPrimeList.GetAxis(System.String)">
            <summary>Retrieves an axis whose Name property matches the specified string.</summary>
            <remarks>
            This method searches the axes in the chart grid's AxisXPrimeList and returns 
            the first one that contains the specified string in its Name property.
            </remarks>
            <returns>AxisXPrime object or null if not found.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisXPrimeList.GetAxis(System.Int32)">
            <summary>Retrieves an axis at the specified index.</summary>
            <returns>AxisXPrime object or null if no axis exists at the specified index.</returns>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisXPrimeList.Item(System.String)">
            <summary>Retrieves an axis whose Name property matches the specified string.</summary>
            <remarks>
            This method searches the axes in the chart grid's AxisXPrimeList and returns 
            the first one that contains the specified string in its Name property.
            </remarks>
            <returns>AxisXPrime object or null if not found.</returns>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisY">
            <base>GraphicsServer.GSNet.Charting.Axis2DLinear</base>
            <summary>
            Supports the Y axis on two-dimensional linear charts.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisY.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisY.GetSeriesComponentType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisY.DoesSeriesBelongToAxis(GraphicsServer.GSNet.Charting.SeriesDrawing)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisY.GenerateDrawingObjects(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisY.GenerateDrawingObjects(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable,GraphicsServer.GSNet.Charting.Axis2DLinear)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisY.GetAxisType">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisYList">
            <summary>
            Allows for as many 2D Y axes as desired, in addition
            to the main Y axis available through Grid.AxisY.
            </summary>
            <remarks>
            	<para>
            To use the AxisYList, create a new AxisY object, add it to the AxisYList,
            and then map a series to the new AxisY object by using the
            <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToYList"/>
            property.
            </para>
            	<para>
            Note that all the Y axes will be drawn within the grid margins:
            <see cref="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisLeft"/> or
            <see cref="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisRight"/>.
            </para>
            </remarks>
            <example>
            	<para>The following example is from code that creates a chart comparing data for
                apple production in four regions with data for sunshine and rainfall in each
                region. On the chart, each data set maps to a different Y axis.</para>
            	<para>The fragment below creates three data series and two additional Y axes. The
                first data series is mapped to the main Y axis and each of the two remaining series
                is mapped to an axis in the AxisYList.</para>
            	<code lang="CS" title="[C# Example]">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.SeriesData;
             
            private void Form1_Load(object sender, System.EventArgs e)
            {
             
                /* Create three data series using the array 
                 * data provider.*/
             
                // load data in arrays
                double[] arraySun = new double[] {350, 330, 225, 300}; // days annually
                double[] arrayRain = new double[] {8, 20, 30, 8}; //inches annually
                double[] arrayApples = new double[] {660, 604, 580, 788}; //bushels per acre
             
                // create data providers
                ArrayDataProvider provSun = new ArrayDataProvider(arraySun);
                ArrayDataProvider provRain = new ArrayDataProvider(arrayRain);
                ArrayDataProvider provApples = new ArrayDataProvider(arrayApples);
             
                // create Sun series
                Series serSun = new Series();
                serSun.SeriesName = "Days of Sun";
                serSun.BindComponent(SeriesComponent.Y, provSun, string.Empty);
             
                // create Rain series
                Series serRain = new Series();
                serRain.SeriesName = "Inches of Rain";
                serRain.BindComponent(SeriesComponent.Y, provRain, string.Empty);
             
                // create Apples series
                Series serApples = new Series();
                serApples.SeriesName = "Bushels per Acre";
                serApples.BindComponent(SeriesComponent.Y, provApples, string.Empty);
             
                // create label series for X axis
                Series serLabels = new Series();
                serLabels.SetValue(SeriesComponent.Label, 0, "Argentina");
                serLabels.SetValue(SeriesComponent.Label, 1, "Chile");
                serLabels.SetValue(SeriesComponent.Label, 2, "New Zealand");
                serLabels.SetValue(SeriesComponent.Label, 3, "Yakima");
             
                /* 
                 * Load data in the chart 
                 */
                Chart chart = this.gsNetWinChart1.Chart; 
             
                // remove old data
                chart.RemoveAllSeries();  
                
                // add new series
                int indexSun = chart.AddSeries(serSun); // capture index for later use
                int indexRain = chart.AddSeries(serRain);
                int indexApples = chart.AddSeries(serApples);
             
                // label X axis
                chart.Grid.AxisX.LabelSeries = serLabels;
             
                /* 
                 * Format primary Y axis for apple data
                 */
                chart.Grid.AxisY.Color = chart.GetSeriesDrawing(indexApples).MarkerFill.Color;
                chart.Grid.AxisY.LabelProperties.Color = chart.Grid.AxisY.Color;
             
                // scale the axis
                chart.Grid.AxisY.AxisScale = AxisScaleType.UserDefined;
                chart.Grid.AxisY.MaxAxisValueUser = 800;
                chart.Grid.AxisY.MinAxisValueUser = 550;
                chart.Grid.AxisY.MajorTickCount = 0;
                chart.Grid.AxisY.MajorTickInterval = 50;
             
                // map apple series to axis
                chart.GetSeriesDrawing(indexApples).MapToYList = -1;
             
                /* Create two additional Y axes for sun and rain data. 
                 * Set the color to match the marker color for each series.
                 * Set a tick interval appropriate for data.
                 * Map the corresponding series drawing to the axis.
                 */
                chart.Grid.MarginAxisLeft = 150; // make room for additional axes
                chart.Grid.AxisYList.Clear();  // remove any existing axes from the list
                chart.Grid.AxisYList.AutoArrange = true; // let GS arrange the axes
             
                // create axis for rainfall data
                AxisY axisRain = new AxisY();
                axisRain.Color = chart.GetSeriesDrawing(indexRain).MarkerFill.Color;
                axisRain.LabelProperties.Color = axisRain.Color;
                
                // scale the axis
                axisRain.AxisScale = AxisScaleType.UserDefined;
                axisRain.MaxAxisValueUser = 35;
                axisRain.MinAxisValueUser = 5;
                axisRain.MajorTickCount = 0;
                axisRain.MajorTickInterval = 5;
             
                // map rainfall series to axis
                chart.GetSeriesDrawing(indexRain).MapToYList = chart.Grid.AxisYList.Add(axisRain);
             
                // create axis for sun data
                AxisY axisSun = new AxisY();
                axisSun.Color = chart.GetSeriesDrawing(indexSun).MarkerFill.Color;
                axisSun.LabelProperties.Color = axisSun.Color;
                
                // scale the axis
                axisSun.AxisScale = AxisScaleType.UserDefined;
                axisSun.MaxAxisValueUser = 360;
                axisSun.MinAxisValueUser = 120;
                axisSun.MajorTickCount = 0;
                axisSun.MajorTickInterval = 40;
                
                // map sunshine series to axis
                chart.GetSeriesDrawing(indexSun).MapToYList = chart.Grid.AxisYList.Add(axisSun);
                
                // redraw the chart
                chart.RecalcLayout();
            }
                </code>
            	<code lang="VB" title="[VB Example]">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.SeriesData
             
            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
             
                ' 
                ' Create three data series using the array 
                ' data provider.
                '
             
                ' load data in arrays
                Dim arraySun() As Double = {350, 330, 225, 300}    'days annually
                Dim arrayRain() As Double = {8, 20, 30, 8}         'inches annually
                Dim arrayApples() As Double = {660, 604, 580, 788} 'bushels per acre
             
                ' create data providers
                Dim provSun As ArrayDataProvider = New ArrayDataProvider(arraySun)
                Dim provRain As ArrayDataProvider = New ArrayDataProvider(arrayRain)
                Dim provApples As ArrayDataProvider = New ArrayDataProvider(arrayApples)
             
                ' create Sun series
                Dim serSun As Series = New Series
                serSun.SeriesName = "Days of Sun"
                serSun.BindComponent(SeriesComponent.Y, provSun, String.Empty)
             
                ' create Rain series
                Dim serRain As Series = New Series
                serRain.SeriesName = "Inches of Rain"
                serRain.BindComponent(SeriesComponent.Y, provRain, String.Empty)
             
                ' create Apples series
                Dim serApples As Series = New Series
                serApples.SeriesName = "Bushels per Acre"
                serApples.BindComponent(SeriesComponent.Y, provApples, String.Empty)
             
                ' create label series for X axis
                Dim serLabels As Series = New Series
                serLabels.SetValue(SeriesComponent.Label, 0, "Argentina")
                serLabels.SetValue(SeriesComponent.Label, 1, "Chile")
                serLabels.SetValue(SeriesComponent.Label, 2, "New Zealand")
                serLabels.SetValue(SeriesComponent.Label, 3, "Yakima")
             
                ' 
                ' Load data in the chart 
                '
                Dim chart As Chart = Me.GsNetWinChart1.Chart
             
                ' remove old data
                chart.RemoveAllSeries()
             
                ' add new series
                Dim indexSun As Integer = chart.AddSeries(serSun) ' capture index for later use
                Dim indexRain As Integer = chart.AddSeries(serRain)
                Dim indexApples As Integer = chart.AddSeries(serApples)
             
                ' label X axis
                chart.Grid.AxisX.LabelSeries = serLabels
             
                ' 
                ' Format primary Y axis for apple data
                '
                chart.Grid.AxisY.Color = chart.GetSeriesDrawing(indexApples).MarkerFill.Color
                chart.Grid.AxisY.LabelProperties.Color = chart.Grid.AxisY.Color
             
                ' scale the axis
                chart.Grid.AxisY.AxisScale = AxisScaleType.UserDefined
                chart.Grid.AxisY.MaxAxisValueUser = 800
                chart.Grid.AxisY.MinAxisValueUser = 550
                chart.Grid.AxisY.MajorTickCount = 0
                chart.Grid.AxisY.MajorTickInterval = 50
             
                ' map apple series to axis
                chart.GetSeriesDrawing(indexApples).MapToYList = -1
             
                ' Create two additional Y axes for sun and rain data. 
                ' Set the color to match the marker color for each series.
                ' Set a tick interval appropriate for data.
                ' Map the corresponding series drawing to the axis.
                '
                chart.Grid.MarginAxisLeft = 150 ' make room for additional axes
                chart.Grid.AxisYList.Clear()  ' remove any existing axes from the list
                chart.Grid.AxisYList.AutoArrange = True ' let GS arrange the axes
             
                ' create axis for rainfall data
                Dim axisRain As AxisY = New AxisY
                axisRain.Color = chart.GetSeriesDrawing(indexRain).MarkerFill.Color
                axisRain.LabelProperties.Color = axisRain.Color
             
                ' scale the axis
                axisRain.AxisScale = AxisScaleType.UserDefined
                axisRain.MaxAxisValueUser = 35
                axisRain.MinAxisValueUser = 5
                axisRain.MajorTickCount = 0
                axisRain.MajorTickInterval = 5
             
                ' map rainfall series to axis
                chart.GetSeriesDrawing(indexRain).MapToYList = chart.Grid.AxisYList.Add(axisRain)
             
                ' create axis for sun data
                Dim axisSun As AxisY = New AxisY
                axisSun.Color = chart.GetSeriesDrawing(indexSun).MarkerFill.Color
                axisSun.LabelProperties.Color = axisSun.Color
             
                ' scale the axis
                axisSun.AxisScale = AxisScaleType.UserDefined
                axisSun.MaxAxisValueUser = 360
                axisSun.MinAxisValueUser = 120
                axisSun.MajorTickCount = 0
                axisSun.MajorTickInterval = 40
             
                ' map sunshine series to axis
                chart.GetSeriesDrawing(indexSun).MapToYList = chart.Grid.AxisYList.Add(axisSun)
             
                ' redraw the chart
                chart.RecalcLayout()
             
            End Sub
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYList.#ctor(System.Collections.ICollection)">
            <exclude/>
            <param name="c"></param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYList.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYList.ClearAllMapping">
            <summary><para>Clears all axis list mapping from within the SeriesDrawing list.</para></summary>
            <remarks>
            After this method is called, SeriesDrawing objects will map to the main Y
            axis.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYList.UpdateMapping">
            <summary>Updates all Series Drawing mapping to the axis list.</summary>
            <remarks>
            This method verifies that each SeriesDrawing object maps to a valid instantiated
            Axis object in the Axis list.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYList.ArrangeEvenly">
            <summary>Arranges all axes so that they are evenly spaced within the grid margin.</summary>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisTypeListBase.AutoArrange">AutoArrange Property</seealso>
            <remarks>
            This method achieves even spacing by setting the Offset property of each axis.
            The setting is calculated by dividing the size of the left or right grid margin
            (depending on the setting of AxisY.AxisPosition) by the number of axes in the list plus
            one.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYList.GetAxis(System.String)">
            <summary>Retrieves an axis whose Name property matches the specified string.</summary>
            <remarks>
            This method searches the axes in the chart grid's AxisYList and returns 
            the first one that contains the specified string in its Name property.
            </remarks>
            <returns>AxisY object or null if not found.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYList.GetAxis(System.Int32)">
            <summary>Retrieves an axis at the specified index.</summary>
            <returns>AxisY object or null if no axis exists at the specified index.</returns>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisYList.Item(System.String)">
            <summary>Retrieves an axis whose Name property matches the specified string.</summary>
            <remarks>
            This property returns the first axis the AxisYList that
            contains the specified string in its Name property.
            </remarks>
            <value>string</value>
            <returns>AxisY object or null if not found.</returns>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisYPrime">
            <summary>Supports a secondary Y axis on two-dimensional linear charts.</summary>
            <example>
                The following code creates a chart that compares profit in dollars over seven years
                with profit as a percent of sales during the same period. Actual dollar values are
                measured against a Y axis scale on the left side of the chart. Percentage values
                are measured against the scale of the Y prime axis on the right side of the chart.
                <code lang="CS" title="[C# Example]">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.SeriesData;
             
            private void Form1_Load(object sender, System.EventArgs e)
            {
                // this saves some typing
                Chart chart = this.gsNetWinChart1.Chart;
             
                // make it a 2D line chart
                chart.ChartType = ChartType.Line2D;
             
                // get rid of default series data
                chart.RemoveAllSeries();
             
                /* 
                 * Set up Y axis 
                 */
                // mode and scale
                AxisY axisY = chart.Grid.AxisY;
                axisY.AxisMode = AxisMode.ValueLinear;
                axisY.AxisPosition = AxisPositionType.Left;
                axisY.AxisScale = AxisScaleType.UserDefined;
                axisY.MaxAxisValueUser = 12000000;
                axisY.MinAxisValueUser = 0;
                axisY.LabelFormatMask = "$0,,"; // scale value by millions
             
                // tick marks
                axisY.MajorTickCount = 6;
             
                // Y data
                double[] arrayDollars = {2500000, 2600000, 3800000, 4100000, 4500000, 5900000, 6500000};
                int indexDollars = AddData(chart, arrayDollars);
             
                // make the axis labels the same color as the marker line
                axisY.LabelProperties.Color = chart.GetSeriesDrawing(indexDollars).MarkerLine.Color;
             
                // axis title
                AddAxisTitle(chart, "Profit in millions of dollars", RelativeLocation.LeftMiddle);
                chart.Grid.MarginAxisLeft = 55;
             
                /*
                 * Set up Y prime axis 
                 */
                // mode and scale
                AxisYPrime axisYPrime = chart.Grid.AxisYPrime;
                axisYPrime.AxisMode = AxisMode.ValueLinear;
                axisYPrime.AxisPosition = AxisPositionType.Right;
                axisYPrime.AxisScale = AxisScaleType.UserDefined;
                axisYPrime.MaxAxisValueUser = 0.2;
                axisYPrime.MinAxisValueUser = 0;
                axisYPrime.LabelFormatMask = "#0%";
             
                // tick marks
                axisYPrime.MajorTickCount = 0;
                axisYPrime.MajorTickInterval = 0.05;
             
                // Y prime data
                double[] arrayPercent = {.175, .152, .153, .142, .125, .108, .101};
                int indexPercent = AddData(chart, arrayPercent);
             
                // map data to the Y prime axis
                chart.GetSeriesDrawing(indexPercent).MapToYPrime = true;
             
                // make the axis labels the same color as the marker line
                axisYPrime.LabelProperties.Color = chart.GetSeriesDrawing(indexPercent).MarkerLine.Color;
             
                // axis title
                AddAxisTitle(chart, "Profit as a percent of sales", RelativeLocation.RightMiddle);
                chart.Grid.MarginAxisRight = 65;
             
                /* 
                 * Set up X axis 
                 */
                DateTime dt = new DateTime(1998, 1, 1);
                SetupXAxis(chart, dt, arrayDollars.Length);
             
                /* 
                 * Redraw the chart 
                 */
                chart.RecalcLayout();
            }
             
            private int AddData(Chart chart, double[] dataArray)
            {
                // create a data provider
                ArrayDataProvider prov = new ArrayDataProvider(dataArray);
                // create a data series
                Series ser = new Series();
                // bind data to component of series
                ser.BindComponent(SeriesComponent.Y, prov, string.Empty);
                // add data to chart and return index into SeriesDrawingList
                return chart.AddSeries(ser);
            }
             
            private void SetupXAxis(Chart chart, DateTime dtFirstYear, int numYears)
            {
                // mode and scale
                AxisX axisX = chart.Grid.AxisX;
                axisX.AxisMode = AxisMode.Category;
                axisX.AxisPosition = AxisPositionType.Bottom;
                axisX.MajorTickCount = 0;
                axisX.MajorTickInterval = 1;
             
                // create a label series
                Series serLabels = new Series(); 
                for (int i = 0; i &lt; numYears; i++)  
                    serLabels.SetValue(SeriesComponent.Label, i, dtFirstYear.AddYears(i).ToString("yyyy"));
             
                // attach labels to axis
                axisX.LabelSeries = serLabels;
            }
             
            private void AddAxisTitle(Chart chart, string titleText, RelativeLocation titleLocation)
            {
                BorderLabel axisTitle = new BorderLabel(); 
                axisTitle.Text = titleText; 
                axisTitle.RelativeLocation = titleLocation; 
                chart.Grid.BorderLabelList.Add(axisTitle); 
            }
                </code>
            	<code lang="VB" title="[VB Example]">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.SeriesData
             
            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
             
                 ' this saves some typing
                 Dim chart As Chart = Me.GsNetWinChart1.Chart
             
                 ' make it a 2D line chart
                 chart.ChartType = ChartType.Line2D
             
                 ' get rid of default series data
                 chart.RemoveAllSeries()
             
                 ' 
                 ' Set up Y axis 
                 '
                 
                 ' mode and scale
                 Dim axisY As AxisY = chart.Grid.AxisY
                 axisY.AxisMode = AxisMode.ValueLinear
                 axisY.AxisPosition = AxisPositionType.Left
                 axisY.AxisScale = AxisScaleType.UserDefined
                 axisY.MaxAxisValueUser = 12000000
                 axisY.MinAxisValueUser = 0
                 axisY.LabelFormatMask = "$0,," ' scale value by millions
             
                 ' tick marks
                 axisY.MajorTickCount = 6
             
                 ' Y data
                 Dim arrayDollars() As Double = {2500000, 2600000, 3800000, 4100000, 4500000, 5900000, 6500000}
                 Dim indexDollars As Integer = AddData(chart, arrayDollars)
             
                 ' make the axis labels the same color as the marker line
                 AxisY.LabelProperties.Color = chart.GetSeriesDrawing(indexDollars).MarkerLine.Color
             
                 ' axis title
                 AddAxisTitle(chart, "Profit in millions of dollars", RelativeLocation.LeftMiddle)
                 chart.Grid.MarginAxisLeft = 55
             
                 '
                 ' Set up Y prime axis 
                 '
                 
                 ' mode and scale
                 Dim axisYPrime As AxisYPrime = chart.Grid.AxisYPrime
                 axisYPrime.AxisMode = AxisMode.ValueLinear
                 axisYPrime.AxisPosition = AxisPositionType.Right
                 axisYPrime.AxisScale = AxisScaleType.UserDefined
                 axisYPrime.MaxAxisValueUser = 0.2
                 axisYPrime.MinAxisValueUser = 0
                 axisYPrime.LabelFormatMask = "#0%"
             
                 ' tick marks
                 axisYPrime.MajorTickCount = 0
                 axisYPrime.MajorTickInterval = 0.05
             
                 ' Y prime data
                 Dim arrayPercent() As Double = {0.175, 0.152, 0.153, 0.142, 0.125, 0.108, 0.101}
                 Dim indexPercent As Integer = AddData(chart, arrayPercent)
             
                 ' map data to the Y prime axis
                 chart.GetSeriesDrawing(indexPercent).MapToYPrime = True
             
                 ' make the axis labels the same color as the marker line
                 AxisYPrime.LabelProperties.Color = chart.GetSeriesDrawing(indexPercent).MarkerLine.Color
             
                 ' axis title
                 AddAxisTitle(chart, "Profit as a percent of sales", RelativeLocation.RightMiddle)
                 chart.Grid.MarginAxisRight = 65
             
                 ' 
                 ' Set up X axis 
                 '
                 Dim dt As DateTime = New DateTime(1998, 1, 1)
                 SetupXAxis(chart, dt, arrayDollars.Length)
             
                 '
                 ' redraw the chart
                 '
                 chart.RecalcLayout()
            End Sub
             
            Private Function AddData(ByRef chart As Chart, ByVal dataArray() As Double) As Integer
                 ' create a data provider
                 Dim prov As ArrayDataProvider = New ArrayDataProvider(dataArray)
                 ' create a data series
                 Dim ser As Series = New Series
                 ' bind data to component of series
                 ser.BindComponent(SeriesComponent.Y, prov, String.Empty)
                 ' add data to chart and return index into SeriesDrawingList
                 Return chart.AddSeries(ser)
            End Function
             
            Private Sub SetupXAxis(ByRef chart As Chart, ByVal dtFirstYear As DateTime, ByVal numYears As Integer)
                 ' mode and scale
                 Dim axisX As AxisX = chart.Grid.AxisX
                 AxisX.AxisMode = AxisMode.Category
                 AxisX.AxisPosition = AxisPositionType.Bottom
                 AxisX.MajorTickCount = 0
                 AxisX.MajorTickInterval = 1
             
                 ' create a label series
                 Dim serLabels As Series = New Series
                 For i As Integer = 0 To numYears - 1
                     serLabels.SetValue(SeriesComponent.Label, i, dtFirstYear.AddYears(i).ToString("yyyy"))
                 Next
             
                 ' attach labels to axis
                 axisX.LabelSeries = serLabels
            End Sub
             
            Sub AddAxisTitle(ByRef chart As Chart, ByVal titleText As String, ByVal titleLocation As RelativeLocation)
                 Dim axisTitle As BorderLabel = New BorderLabel
                 axisTitle.Text = titleText
                 axisTitle.RelativeLocation = titleLocation
                 chart.Grid.BorderLabelList.Add(axisTitle)
            End Sub
                </code>
            </example>
            <seealso cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToYPrime">MapToYPrime Property (SeriesDrawing Class)</seealso>
            <remarks>
            	<para>A secondary Y axis is useful when two or more data series use different units
                of measurement or have widely different ranges of value.</para>
            	<para>By default, the Y axis and the Y prime axis are on opposite sides of the
                chart, with the Y axis on the left, and the Y prime axis on the right. You can
                change the position of either axis by setting its AxisPosition property. If you
                choose to position both axes on the same side, they will overwrite one another
                unless you also set the Offset property of one axis to a value large enough to move
                the axis, its tick marks, and its labels into the grid margin. You might also need
                to increase the size of the margin by setting the Grid object's MarginAxisLeft or
                MarginAxisRight property.</para>
            	<para>The key to using the Y prime axis lies in mapping data to it. By default, the
                Y component data of all data series map to the Y axis. To map a particular data
                series to the Y prime axis rather than the Y axis, you must set the MapToYPrime
                property of that data series' SeriesDrawing object. The Y prime axis does not
                display until at least one SeriesDrawing object's MapToYPrime property is set to
                true.</para>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYPrime.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYPrime.DoesSeriesBelongToAxis(GraphicsServer.GSNet.Charting.SeriesDrawing)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYPrime.GetSeriesComponentType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYPrime.GetAxisType">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYPrime.ToString">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisYPrime.AxisPosition">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisYPrimeList">
            <summary>
            The AxisYPrimeList allows for as many 2D Y Prime axes as desired, in addition
            to the main Y Prime axis available through Grid.AxisYPrime.
            </summary>
            <remarks>
            <para>
            To use the AxisYPrimeList, create a new AxisYPrime object, add it to the AxisYPrimeList,
            and finally map a series to the new AxisYPrime object by using the
            <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToYPrimeList"/>
            property.
            </para>
            <para>
            Note that all the Y Prime axes will be drawn within the grid margins:
            <see cref="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisLeft"/> or
            <see cref="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisRight"/>.
            </para>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYPrimeList.#ctor(System.Collections.ICollection)">
            <exclude/>
            <param name="c"></param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYPrimeList.ClearAllMapping">
            <summary>
            Removes all SeriesDrawing mapping to the Axis Y Prime List. Instead it 
            maps to the main Axis Y Prime.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYPrimeList.UpdateMapping">
            <summary>
            Updates all Series Drawing mapping to the axis list. This 
            will verify that the Series Drawing maps to a valid instantiated
            Axis object in the Axis list.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYPrimeList.ArrangeEvenly">
            <summary>
            ArrangeEvenly will arrange all the axes offset values so
            that the result is that the axes are evenly spaced within the 
            grid margin.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYPrimeList.GetAxis(System.String)">
            <summary>Retrieves an axis whose Name property matches the specified string.</summary>
            <remarks>
            This method searches the axes in the chart grid's AxisYPrimeList and returns 
            the first one that contains the specified string in its Name property.
            </remarks>
            <returns>AxisYPrime object or null if not found.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisYPrimeList.GetAxis(System.Int32)">
            <summary>Retrieves an axis at the specified index.</summary>
            <returns>AxisYPrime object or null if no axis exists at the specified index.</returns>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.AxisYPrimeList.Item(System.String)">
            <summary>Retrieves an axis whose Name property matches the specified string.</summary>
            <remarks>
            This method searches the axes in the chart grid's AxisYPrimeList and returns 
            the first one that contains the specified string in its Name property.
            </remarks>
            <returns>AxisYPrime object or null if not found.</returns>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.IAxisLabelGenerator">
            <summary>
            IAxisLabelGenerator interface allows developers to build custom
            label generator objects and attach these objects to any chart Axis via the
            <see cref="P:GraphicsServer.GSNet.Charting.AxisBase.AxisLabelGenerator"/> property.
            </summary>
            <remarks>When an axis label generator object is attach to an axis that object
            is responsible for generating an axis label for any value passed in via the
            <see cref="M:GraphicsServer.GSNet.Charting.IAxisLabelGenerator.GenerateLabel(System.Double)"/> 
            interface method.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.IAxisLabelGenerator.GenerateLabel(System.Double)">
            <summary>
            GenerateLabel can either return a string that represents the label for the
            passed in value or it can return null to indicate it is not interested in
            generating a label for that value.  If null is returned then the the 
            axis will continue it's search for a label via other mechanisms.
            </summary>
            <param name="tickValue">The value of the tick mark that requires an axis label.</param>
            <returns>Returns a string if the value was converted to a label, otherwise null.</returns>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.IMajorTickGenerator">
            <summary>
            The IMajorTickGenerator interface allows developers to build custom
            tick generator objects and attach these objects to any chart Axis via the
            <see cref="P:GraphicsServer.GSNet.Charting.AxisBase.MajorTickGenerator"/> property.
            </summary>
            <remarks>
            The <see cref="P:GraphicsServer.GSNet.Charting.AxisBase.MajorTickGenerator"/> property
            takes precedence over both the <see cref="P:GraphicsServer.GSNet.Charting.AxisLinear.MajorTickCount"/>
            and the <see cref="P:GraphicsServer.GSNet.Charting.AxisLinear.MajorTickInterval"/> properties. The
            MajorTickCount and MajorTickInterval will only be used if MajorTickGenerator has not be set
            (i.e. when MajorTickGenerator = null).
            </remarks>
            <example>
            The following code example will draw custom x-axis ticks at values: 1, 2, 22, 50, 75, 80.
            <code lang="CS" title="C# Example">
            using GraphicsServer.GSNet.Charting;
            public class Form1 : System.Windows.Forms.Form
            {
              private void Form1_Load(object sender, System.EventArgs e)
              {
                Chart chart = this.gsNetWinChart1.Chart;
            		
                // assign x-axis ticks to our custom tick generator
                chart.Grid.AxisX.MajorTickGenerator = new AFewCustomTicks();
            
                // refresh chart
                chart.RecalcLayout();
              }
            }
            
            public class AFewCustomTicks : IMajorTickGenerator
            {
              public double[] GenerateTicks(double axisMin, double axisMax)
              {
                // create a few tick values to test custom tick generation
            
                // note that we don't use the min-axis value and max-axis value passed in, but
                // we could check to see our ticks are within these values if we wanted to check this
            
                // we'll create 6 ticks
                // the value on the right side of the equals is where the ticks will be displayed on the chart
                double [] myTicks = new double[6];
                myTicks[0] = 1;
                myTicks[1] = 2;
                myTicks[2] = 50;
                myTicks[3] = 75;
                myTicks[4] = 22; //note the ticks don't need to be in any ascending/descending order
                myTicks[5] = 80;
            
                return myTicks;
              }
            }
            </code>
            <code lang="VB" title="VB Example">
            Imports GraphicsServer.GSNet.Charting
            Public Class Form1
              Inherits System.Windows.Forms.Form
            
              Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                Dim chart As Chart = Me.GsNetWinChart1.Chart
            
                ' assign x-axis ticks to our custom tick generator
                chart.Grid.AxisX.MajorTickGenerator = New AFewCustomTicks
            
                ' refresh chart
                chart.RecalcLayout()
              End Sub
            End Class
            
            Public Class AFewCustomTicks
              Implements IMajorTickGenerator
              
              Public Function GenerateTicks(ByVal axisMin As Double, ByVal axisMax As Double) As Double() Implements GraphicsServer.GSNet.Charting.IMajorTickGenerator.GenerateTicks
                ' create a few tick values to test custom tick generation
            
                ' note that we don't use the min-axis value and max-axis value passed in, but
                ' we could check to see our ticks are within these values if we wanted to check this
            
                ' we'll create 6 ticks
                ' the value on the right side of the equals is where the ticks will be displayed on the chart
                Dim myTicks(5) As Double
                myTicks(0) = 1
                myTicks(1) = 2
                myTicks(2) = 50
                myTicks(3) = 75
                myTicks(4) = 22 'note the ticks don't need to be in any ascending/descending order
                myTicks(5) = 80
            
                Return myTicks
              End Function
            End Class
            </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.IMajorTickGenerator.GenerateTicks(System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TextPainter">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            The TextPainter object is a helper class that will paint a specified string
            at a specified point. Note it contains it's own set of text properties.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TextPainter.propAutoAdjustAlignment">
            <summary>
            When true, the AutoAdjustAlignment will change the TextPainter's
            VerticalAlignment and HorizontalAlignment automatically.
            </summary>
            <remarks>
            This applies in such cases as the Polar2D chart's 
            <see cref="T:GraphicsServer.GSNet.Charting.AxisAngular"/> alignment
            for aligning labels around the polar circle.
            </remarks>
            <value>System.Boolean</value>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TextPainter.#ctor">
            <summary>Constructs an instance of this type.</summary>
            <remarks>
            The object contains its own font, color, and text properties but draws text where
            you tell it to draw, either at a specific point or in a rectangle.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TextPainter.DrawString(System.Windows.Forms.PaintEventArgs,System.String,System.Drawing.PointF)">
            <summary>
            Draw the specified text at the specified point.
            </summary>
            <param name="e">PaintEventArgs.</param>
            <param name="text">The text to begin drawing.</param>
            <param name="point">The point at which to draw.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TextPainter.DrawString(System.Windows.Forms.PaintEventArgs,System.String,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draw the specified text in the specified rectangle using the specified text
            color.
            </summary>
            <param name="e">PaintEventArgs.</param>
            <param name="text">The text to draw.</param>
            <param name="rect">The rectangle to draw inside of.</param>
            <param name="color">The color of the text to draw.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TextPainter.DrawString(System.Windows.Forms.PaintEventArgs,System.String,System.Drawing.Rectangle)">
            <summary>
            Draw the specified text in the specified rectangle.
            </summary>
            <param name="e">PaintEventArgs.</param>
            <param name="text">The text to draw.</param>
            <param name="rect">The rectangle to draw inside of.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TextPainter.AutoSetAlignment(GraphicsServer.GSNet.Charting.TextPainter.LabelPosition,System.Single)">
            <summary>
                Automatically set the horizontal and vertical alignment values
                of the text based on the specified position and the rotation angle passed in. 
            </summary>
            <remarks>
                This method is useful when dealing with rotated text.
                <para>Note that this routine changes the angle of rotation without firing an
                invalidation.</para>
            </remarks>
            <param name="pos">LabelPosition enumeration value.</param>
            <param name="rotation">The angle from horizontal at which to rotate the text.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TextPainter.AutoSetAlignment(GraphicsServer.GSNet.Charting.TextPainter.LabelPosition)">
            <summary>
            Automatically set the horizontal and vertical alignment values of the text
            based on the specified position and the orientation within this object.
            </summary>
            <remarks>
            This method is useful when dealing with rotated text. 
            </remarks>
            <param name="pos"><see cref="T:GraphicsServer.GSNet.Charting.TextPainter.LabelPosition">LabelPosition</see> enumeration value.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextPainter.Font">
            <summary>
            Sets or gets a Font object that controls font face, size, and style attributes of
            the text.
            </summary>
            <value>Font</value>
            <remarks>See the System.Drawing.Font class for more information.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextPainter.HorizontalAlignment">
            <summary>
            Sets or gets the horizontal alignment attribute of the text within the textbox.
            </summary>
            <value>System.Drawing.StringAlignment enumeration</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextPainter.VerticalAlignment">
            <summary>
            Sets or gets the verical alignment attribute of the text within the textbox.
            </summary>
            <value>System.Drawing.StringAlignment enumeration</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextPainter.TextTransparency">
            <summary>
            Sets or gets the transparency attribute of the text. 
            </summary>
            <remarks>
            Valid values can range from 0-100, where 0 is opaque 
            and 100 is completely transparent.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextPainter.RotateAngle">
            <summary>
            Sets or gets the angle in degrees that the text is rotated. 
            </summary>
            <remarks>
                Valid values range from -359 to +359 degrees. 
                <para>Note that when rotated the text is automatically centered vertically and
                horizontally.</para>
            </remarks>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextPainter.Color">
            <summary>
            Sets or gets the text color value.
            </summary>
            <value>System.Drawing.Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextPainter.TextRenderingMode">
            <summary>
            Sets or get the text rendering mode.  
            </summary>
            <remarks>
            See the System.Drawing.Text.TextRenderingHint enumeration for more information.
            </remarks>
            <value>System.Drawing.Text.TextRenderingHint</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextPainter.TextTrimmingMode">
            <summary>
            Sets or gets the trimming mode used when the text overflows the textbox. 
            </summary>
            <remarks>
            See the System.Drawing.StringTrimming enumeration for more information.
            </remarks>
            <value>System.Drawing.StringTrimming</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextPainter.DrawShadow">
            <summary>
            Controls whether a shadow is drawn behind the text. 
            </summary>
            <remarks>
            False for no shadow, true for a shadow.
            </remarks>
            <value>bool</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TextPainter.LabelPosition">
            <summary>Describes text position relative to a bounding rectangle.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TextPainter.LabelPosition.Left">
            <summary>Toward the left side of the text box.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TextPainter.LabelPosition.Right">
            <summary>Toward the right side of the text box.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TextPainter.LabelPosition.Top">
            <summary>Toward the top side of the text box.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TextPainter.LabelPosition.Bottom">
            <summary>Toward the bottom of the text box.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TextPainter.LabelPosition.Center">
            <summary>In the center of the text box.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TextPainter.LabelPosition.TopLeft">
            <summary>At the top left of the text box.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TextPainter.LabelPosition.TopRight">
            <summary>At the top right of the text box.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TextPainter.LabelPosition.BottomLeft">
            <summary>At the bottom left of the text box.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TextPainter.LabelPosition.BottomRight">
            <summary>At the bottom right of the text box.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Background">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            The background object is used throughout the GSNet chart engine to paint
            various surfaces with a variety of visual effects.  These visual effects
            range from solid and gradient colors to the use of image files and textures.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.#ctor(System.Int32,System.Drawing.Color)">
            <summary>
            Constructor for a simple colored background.
            </summary>
            <param name="c">Background color.</param>
            <param name="transparency">The level of transparency.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.#ctor(System.Int32,System.Drawing.Color,System.Drawing.Color,GraphicsServer.GSNet.Charting.GradientType)">
            <summary>
            Constructor for a Gradient Background.
            </summary>
            <param name="transparency">The level of transparency.</param>
            <param name="startGradient">The starting color of the gradient.</param>
            <param name="endGradient">The ending color of the gradient.</param>
            <param name="type">The type of the gradient.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.#ctor(System.Int32,System.String,GraphicsServer.GSNet.Charting.PositionEffect,System.Drawing.Color)">
            <summary>
            Constructor for an Image Background.
            </summary>
            <param name="transparency">The level of transparency.</param>
            <param name="imageFile">The image file to display</param>
            <param name="pe">The position effect.</param>
            <param name="transparencyColor">The color in the image to make transparent.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.#ctor(System.Int32,System.String,System.Drawing.Color)">
            <summary>
            Constructor for a Texture Background.
            </summary>
            <param name="transparency">The level of transparency.</param>
            <param name="textureFile">The texture image.</param>
            <param name="transparencyColor">The color in the texture to make transparent.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.#ctor(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.HatchStyle)">
            <summary>
            Constructor for a Pattern Background.
            </summary>
            <param name="transparency">The level of transparency.</param>
            <param name="back">The background color of the pattern.</param>
            <param name="fore">The foreground color of the pattern.</param>
            <param name="hs">The Hatch style of the pattern.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.FillRect(System.Windows.Forms.PaintEventArgs,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Fills a rectangular area based on the current background settings.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.FillRect(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Fills a rectangular area based on the current background settings.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.FillRect(System.Windows.Forms.PaintEventArgs,System.Drawing.RectangleF)">
            <summary>
            Fills a rectangular area based on the current background settings.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.FillRect(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Fills a rectangular area based on the current background settings.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.FillRectInvalidateParent(System.Windows.Forms.PaintEventArgs,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Fills a rectangular area based on the current background settings and invalidates the entire parent.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="location">Upper left of the rectangle to fill.</param>
            <param name="size">Width and height of the rectangle to fill.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.FillEllipse(System.Windows.Forms.PaintEventArgs,System.Drawing.RectangleF)">
            <summary>
            Fills an elliptical area based on the current background settings.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="rectToFill">Rectangle used to create the filled ellipse.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.FillEllipse(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Fills an elliptical area based on the current background settings.
            </summary>
            <param name="g">PaintEventArgs</param>
            <param name="rectToFill">Rectangle used to create the filled ellipse.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.FillPolygon(System.Drawing.Graphics,System.Drawing.PointF[],System.Boolean)">
            <summary>
            Fills a path enclosed by the set of points based on the current background settings.
            </summary>
            <param name="g">Graphics object.</param>
            <param name="points">Polygon definition.</param>
            <param name="shaded">Set to true to add shaded effect.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.FillPolygon(System.Drawing.Graphics,System.Drawing.PointF[],System.Boolean,System.Drawing.RectangleF@)">
            <summary>
            Fills a path enclosed by the set of points based on the current background settings.
            </summary>
            <param name="g">Graphics object.</param>
            <param name="points">Polygon definition.</param>
            <param name="shaded">Set to true to add shaded effect.</param>
            <param name="boundingRect">Rectangle to fill.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.FillPath(System.Windows.Forms.PaintEventArgs,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills an enclosed path  based on the current background settings.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="path">Definition of enclosed path.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.FillPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills an enclosed path  based on the current background settings.
            </summary>
            <param name="g">PaintEventArgs</param>
            <param name="path">Definition of enclosed path.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.FillPie(System.Windows.Forms.PaintEventArgs,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fills a pie slice based on background settings.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="rectToFill">Rectangle that encloses the pie shape.</param>
            <param name="startAngle">Start angle of the fill.</param>
            <param name="spanAngle">Span angle of the fill.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.ConvertTransparencyToAlpha(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.ToString">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Background.SpecialEffectPropertyChangedHandler(System.Object,GraphicsServer.GSNet.Charting.PropertyEventArgs)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.BackgroundType">
            <summary>
            Determines the fill mode of the background object (ie gradient, image, pattern, etc).
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.BackgroundType"/> enum for more information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.BackgroundType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.Transparency">
            <summary>
            Specifies the transparency of the background.  A 0% transparency is opaque and 100 is completely transparent.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.Color">
            <summary>
            Specifies the color used for the background when the background type is simple.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.ImageFile">
            <summary>
            Specifies the name of the image file to use for an image type background.  This file name
            can be an absolute path, a relative path or a UNC path.  See remarks for more information.
            </summary>
            <remarks>
            For window forms a relative paths, UNC paths and absolute paths can also be used 
            for the file name.  Note however that relative paths will work differently in design-time
            versus run-time.  In design-time the relative path (e.g. images\MyImage.jpg) is relative to the 
            main appliation folder (e.g c:\MyApplication\images\MyImage.jpg).  At run-time the relative
            path is is relative to directory where the exe resides (e.g c:\MyApplication\bin\release\images\MyImage.jpg).
            <para>
            For web forms use only an absolute path or a UNC path.  Relative paths work when in design-time but
            during run-time the relative path can not be resolved properly.
            </para>
            </remarks>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.ImageEmbeddedEnabled">
            <summary>
            Specifies the if the ImageFile to use for an image type background is embedded
            inside an Assembly or a DLL. One also must set the ImageEmbeddedAssembly for the
            embedded image to function properly.
            </summary>
            <remarks>
            Note the ImageFile name must include the full namespace, such as using
            GraphicsServer.GSNet.Charting.Background.BackgroundImage.Clouds.jpg for our GSNetWin.DLL
            assembly. The ImageFile string is also case sensitive.
            </remarks>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.ImageEmbeddedAssembly">
            <summary>
            Specifies which Assembly or DLL to use for an ImageFile that is embedded within the Assembly
            or DLL. One also must set the ImageFileEmbedded to true for the
            embedded image to function properly.
            </summary>
            <remarks>
            Note the ImageFile name must include the full namespace, such as using
            GraphicsServer.GSNet.Charting.Background.BackgroundImage.Clouds.jpg for our GSNetWin.DLL
            assembly. The ImageFile string is also case sensitive.
            </remarks>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.Position">
            <summary>
            Specifies the effect to use when positioning the background image.  The image can
            be centered, tiled or stretched.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.PositionEffect"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.TransparentColor">
            <summary>
            Specifies the color used internally in an image as the transparent color.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.GradientStyle">
            <summary>
            Specifies the style and direction of the gradient.  See the <see cref="T:GraphicsServer.GSNet.Charting.GradientType"/> enum
            for further information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.GradientType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.GradientStartColor">
            <summary>
            Specifies the gradient start color.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.GradientEndColor">
            <summary>
            Specifies the gradient end color.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.PatternStyle">
            <summary>
            Specifies the pattern style for a pattern type background.
            </summary>
            <value>HatchStyle</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.PatternForegroundColor">
            <summary>
            Specifies the pattern foreground color.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.PatternBackgroundColor">
            <summary>
            Specifies the pattern background color.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.TextureImageFile">
            <summary>
            Specifies the name of the image file to use for texture type backgrounds.
            Note that the image will be tiled to create a texture effect.  This file name
            can be an absolute path, a relative path or a UNC path.  See remarks for more information.
            </summary>
            <remarks>
            For window forms a relative paths, UNC paths and absolute paths can also be used 
            for the file name.  Note however that relative paths will work differently in design-time
            versus run-time.  In design-time the relative path (e.g. images\MyImage.jpg) is relative to the 
            main appliation folder (e.g c:\MyApplication\images\MyImage.jpg).  At run-time the relative
            path is is relative to directory where the exe resides (e.g c:\MyApplication\bin\release\images\MyImage.jpg).
            <para>
            For web forms use only an absolute path or a UNC path.  Relative paths work when in design-time but
            during run-time the relative path can not be resolved properly.
            </para>
            </remarks>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.Shade3DAmount">
            <summary>
            Specifies the amount to shade the shadowed surfaces of a 3D object (0-100%) where 0 is not shaded and 100 is completely dark.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Background.SpecialEffectList">
            <summary>
            Special Effects allow for additional drawing on top of other drawings.
            An examples is lighted regions on top of existing Backgrounds.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.BackgroundType">
            <summary>
            The background object supports several different types of background fill modes.
            This enum allows the user to specify a background fill mode.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.BackgroundType.Simple">
            <summary>
            The simple mode fills the background with a single solid color.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.BackgroundType.Gradient">
            <summary>
            The gradient mode fills the background based on two selected colors and
            a gradient style.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.BackgroundType.Image">
            <summary>
            The image mode fills the background with a selected image file.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.BackgroundType.Texture">
            <summary>
            The texture mode fills the background with a selected image file.  Note
            that this image file is used as a texture so the image is non-stretched
            and repeated over and over.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.BackgroundType.Pattern">
            <summary>
            The pattern mode fills the background with a pattern type.  The color
            of the pattern is based on the selection of two pattern colors.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.GradientType">
            <summary>
            These are all the valid gradient types in the system.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.VerticalBottomUp">
            <summary>
            Vertically from the bottom to the top.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.VerticalTopDown">
            <summary>
            Vertically from the top to the bottom.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.VerticalMiddleOut">
            <summary>
            Vertically from the middle to the top and bottom.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.VerticalEdgesIn">
            <summary>
            Vertically from the top and bottom to the middle.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.HorizontalLeftRight">
            <summary>
            Horizontally from the left to the right.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.HorizontalRightLeft">
            <summary>
            Horizontally from the right to the left.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.HorizontalMiddleOut">
            <summary>
            Horizontally from the middle to the left and the right.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.HorizontalEdgesIn">
            <summary>
            Horizontally from the left and the right to the middle.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.DiagonalBottomLeftUpStartAt">
            <summary>
            Diagonally from the bottom left corner to the upper right corner.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.DiagonalBottomLeftUpEndAt">
            <summary>
            Diagonally from the upper right corner to the bottom left corner.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.DiagonalBottomLeftUpMiddleOut">
            <summary>
            Diagonally from the middle to the upper right and bottom left corner.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.DiagonalBottomLeftUpEdgesIn">
            <summary>
            Diagonally from the bottom left corner and upper right corner to the middle.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.DiagonalTopLeftDownStartAt">
            <summary>
            Diagonally from the upper left corner to the bottom right corner.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.DiagonalTopLeftDownEndAt">
            <summary>
            Diagonally from the bottom right corner to the upper left corner.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.DiagonalTopLeftDownMiddleOut">
            <summary>
            Diagonally from the middle to the upper left and bottom right corners.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.DiagonalTopLeftDownEdgesIn">
            <summary>
            Diagonally from the upper left and lower right corners to the middle.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.CornerFromTopLeft">
            <summary>
            From the top left corner.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.CornerFromTopRight">
            <summary>
            From the top right corner.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.CornerFromBottomRight">
            <summary>
            From the bottom right corner.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.CornerFromBottomLeft">
            <summary>
            From the bottom left corner.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.RadiallyCenterOut">
            <summary>
            Radially from the center outwards.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.RadiallyEdgesIn">
            <summary>
            Radially from the edges inwards.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GradientType.ThreeDBubble">
            <summary>
            A 3D looking bubble gradient for drawing inside of circle objects.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.PositionEffect">
            <summary>
            These are all the valid image position options in the system.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PositionEffect.Center">
            <summary>
            Center the image.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PositionEffect.Stretch">
            <summary>
            Stretch the image.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PositionEffect.Tile">
            <summary>
            Tile the image.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Border">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            The border object creates visual effects around the edge of a chart object.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Border.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Border.CommonConstructor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Border.Paint(System.Windows.Forms.PaintEventArgs,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Paints the border based on the current border settings.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="location">Upper-left corner of the border.</param>
            <param name="size">Width and height of the rectangle the border will paint around.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Border.GetBorderExtent">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Border.ToString">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Border.SpecialEffectPropertyChangedHandler(System.Object,GraphicsServer.GSNet.Charting.PropertyEventArgs)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.BorderType">
            <summary>
            Specifies the type of border to paint.  Refer to the <see cref="T:GraphicsServer.GSNet.Charting.BorderType"/> enum for
            more information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.BorderType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.EdgeEffectType">
            <summary>
            The border object can paint several types of edge effects.  Refer to the <see cref="T:GraphicsServer.GSNet.Charting.EdgeEffectType"/>
            enum for information of these various effects.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.EdgeEffectType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.SimpleColor">
            <summary>
            Determines the color to use when painting a simple border.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.SimpleWidth">
            <summary>
            Determines the width of the border.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.SimpleTransparency">
            <summary>
            Determines the transparency used for simple borders.  Transparency ranges from 0
            to 100 percent where 0 is opaque and 100 is completely transparent.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.TextureImageFile">
            <summary>
            Specifies the name of the image file to use for texture type border.
            Note that the image will be tiled to create a texture effect.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.TextureWidth">
            <summary>
            Determines the width used for texture borders.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.DropShadowColor">
            <summary>
            Determines the color used for the drop shadow.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.ShadowTransparency">
            <summary>
            Determines the transparency of the drop shadow.  Where 0 is opaque and 100 is completely transparent.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.ShadowDistance">
            <summary>
            Specifies how far the shadow extends from the visual element it is associated with.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.GradientDropShadowColor">
            <summary>
            Specifies the color to use for the gradient drop shadow.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.GradientShadowDistance">
            <summary>
            Specifies how far the gradient shadow extends from the visual element it is associated with.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.RaisedLoweredEdgeAmount">
            <summary>
            Specifies the amount to raise (or lower) the edge.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.RaisedLoweredColor">
            <summary>
            Specifies the color to lighten and darken for the edge.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.RaisedLoweredTransparency">
            <summary>
            Specifies the amount of transparency to use for the raised/lowered effect, where 0 is opaque and 100 is completely transparent.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.FadedEdgeDistance">
            <summary>
            Specifies the distance to fade the edge.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.FadedEdgeColor">
            <summary>
            Specifies the color to fade from.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Border.SpecialEffectList">
            <summary>
            Special Effects allow for additional drawing on top of other drawings.
            An examples is lighted regions on top of existing Borders.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.BorderOutline">
            <summary>
            The border outline object creates visual effects that can surround a
            widget Meter device.
            </summary>
            <remarks>
            All EdgeEffectTypes are supported, and all
            the BorderTypes are supported.
            </remarks>
            <example>
                The example below places a border around the scale of a meter device when the user
                clicks a button.
                <code lang="CS" title="[CS Example]">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.Widgets;
             
            private void btnOutline_Click(object sender, System.EventArgs e)
            {
                // get reference to meter
                Meter meter1 = this.gsNetWinWidget1.Widget.DeviceList[0] as Meter;
             
                /* 
                 * Note: If ScaleLabelsOn = false or LabelOffset &lt;= 0 
                 *       then outline will exactly fit the meter circle.
                 * 
                 *       Otherwise if ScaleLabelsOn = true and LabelOffset &gt; 0 
                 *       then outline will surround labels.
                 */
                meter1.ScaleLabelsOn = true;
                meter1.ScaleLabelOffset = 5; 
             
                // add outline around meter
                meter1.BorderOutline.BorderType = BorderType.Simple;
                meter1.BorderOutline.SimpleColor = Color.Blue;
                meter1.BorderOutline.EdgeEffectType = EdgeEffectType.DropShadow;
                meter1.BorderOutline.DropShadowColor = Color.LightSkyBlue;
                meter1.BorderOutline.Padding = 10; // space between labels and outline
                meter1.BorderOutline.ShadowDistance = 10;
                        
                // refresh widget
                this.gsNetWinWidget1.Invalidate();
            }
                </code>
            	<code lang="VB" title="[VB Example]">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.Widgets
             
            Private Sub btnOutline_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnOutline.Click
                ' get reference to meter
                Dim meter1 As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList(0), Meter)
             
                ' Note: If ScaleLabelsOn = false or LabelOffset &lt;= 0 
                '       then outline will exactly fit the meter circle.
                ' 
                '       Otherwise if ScaleLabelsOn = true and LabelOffset &gt; 0 
                '       then outline will surround labels.
                '
                meter1.ScaleLabelsOn = True
                meter1.ScaleLabelOffset = 5
             
                ' add outline around meter
                meter1.BorderOutline.BorderType = BorderType.Simple
                meter1.BorderOutline.SimpleColor = Color.Blue
                meter1.BorderOutline.EdgeEffectType = EdgeEffectType.DropShadow
                meter1.BorderOutline.DropShadowColor = Color.LightSkyBlue
                meter1.BorderOutline.Padding = 10 ' space between labels and outline
                meter1.BorderOutline.ShadowDistance = 10
             
                ' refresh widget
                Me.GsNetWinWidget1.Invalidate()
            End Sub
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderOutline.#ctor">
            <summary>
            constructor
            </summary>
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderOutline.Paint(System.Windows.Forms.PaintEventArgs,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Paints the border based on the current border settings.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="location">Upper-left corner of the border.</param>
            <param name="size">Width and height of the rectangle the border will paint around.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderOutline.ToString">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BorderOutline.Padding">
            <summary>
            Sets or gets the amount of padding, or space, between the BorderOutline and the
            object it surrounds.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BorderOutline.Tension">
            <summary>
            Sets or gets the tension of the curve drawn when generating the border
            outline.
            </summary>
            <remarks>
            	<para>The tension setting is not always used. It is used in cases such as Meter
                objects that have ScaleLabelsOn set to true.</para>The tension value should be
                between 0 and 1. A tension of 0 forces the curve to take the shortest way (a
                straight line) between points. A value of 1 forces the curve to take a path with
                the least amount of bend. A value larger than 1 will produce a curve modeling the
                behavior of a compressed spring. For a discussion of spline tension, see the
                article on "Cardinal Splines" in the <em>.NET Framework Developer's Guide</em>.
            </remarks>
            <value>int</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.BorderType">
            <summary>
            The border object supports several different types of borders.
            This enum allows the user to specify a border type.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.BorderType.NoBorder">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.BorderType.Simple">
            <summary>
            Simple colored border.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.BorderType.Texture">
            <summary>
            A textured border using an image.  The image is tiled to create the texture effect.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.EdgeEffectType">
            <summary>
            These are all the valid border edge effect types in the system.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.EdgeEffectType.NoEdgeEffect">
            <summary>
            No edge effect.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.EdgeEffectType.DropShadow">
            <summary>
            Simple drop shadow effect.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.EdgeEffectType.GradientDropShadow">
            <summary>
            Drop shadow effect using a gradient technique to produce a more realistic shadow.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.EdgeEffectType.Raised">
            <summary>
            A raised 3D look.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.EdgeEffectType.Lowered">
            <summary>
            A lowered 3D look.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.EdgeEffectType.Fade">
            <summary>
            Edge of object fades to transparency.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ChartType">
            <summary>
            These are all the valid chart types in the system.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Area2D">
            <summary>
            2D Area Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Area3D">
            <summary>
            3D Area Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.AreaStacked2D">
            <summary>
            2D Stacked Area Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.AreaStacked3D">
            <summary>
            3D Stacked Area Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.AreaStackedFloating2D">
            <summary>
            2D Stacked Floating Area Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.AreaStackedPercent2D">
            <summary>
            2D Stacked Percent Area Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.AreaStackedPercent3D">
            <summary>
            3D Area Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Bar2D">
            <summary>
            2D Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Bar2DHorizontal">
            <summary>
            2D Horizontal Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarSimple3D">
            <summary>
            3D Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarSimple3DHorizontal">
            <summary>
            3D Horzontal Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarStacked2D">
            <summary>
            2D Stacked Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarStacked2DHorizontal">
            <summary>
            2D Horizontal Stacked Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarStacked3D">
            <summary>
            3D Stacked Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarStacked3DHorizontal">
            <summary>
            3D Horizontal Stacked Bar
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarStackedFloating2D">
            <summary>
            2D Stacked Floating Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarStackedFloating2DHorizontal">
            <summary>
            2D Horizontal Stacked Floating Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarStackedFloating3D">
            <summary>
            3D Floating Stacked Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarStackedFloating3DHorizontal">
            <summary>
            3D Horizontal Floating Stacked Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarStackedPercent2D">
            <summary>
            2D Stacked Percent Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarStackedPercent2DHorizontal">
            <summary>
            2D Horizontal Stacked Percent Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarStackedPercent3D">
            <summary>
            3D Stacked Percent Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarStackedPercent3DHorizontal">
            <summary>
            3D Horizontal Stacked Percent Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarZCluster3D">
            <summary>
            3D Z Cluster Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.BarZCluster3DHorizontal">
            <summary>
            3D Horizontal Z Cluster Bar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Bubble2D">
            <summary>
            2D Bubble Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.CandleStick2D">
            <summary>
            2D Candlestick Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Funnel">
            <summary>
            Funnel Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Gantt2D">
            <summary>
            2D Gantt Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.HighLow2D">
            <summary>
            2D High Low Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Line2D">
            <summary>
            2D Line Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Line3D">
            <summary>
            3D Line Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Pie2D">
            <summary>
            2D Pie Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Pie3D">
            <summary>
            3D Pie Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Polar2D">
            <summary>
            2D Polar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Radar2D">
            <summary>
            2D Radar Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Range2D">
            <summary>
            2D Range Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Scatter2D">
            <summary>
            2D Scatter Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Scatter3D">
            <summary>
            3D Scatter Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Surface3D">
            <summary>
            3D Surface Chart
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ChartType.Volume2D">
            <summary>
            2D Volume Chart
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.CustomData">
            <summary>
            Manages a collection of custom data list.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.CustomData.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.CustomData.GetCustomData(System.Int32)">
            <summary></summary>
            <returns></returns>
            <remarks>
            </remarks>
            <param name="index">zero based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.CustomData.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Reads object property settings from an XmlNode.</summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
            <param name="node">XmlNode that contains the properties of the object.</param>
            <param name="flags"><see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags</see> 
            to control how properties are read.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.CustomData.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>
            Writes object properties to an XmlElement. </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
            <returns>
            Returns an XmlElement if properties were written, otherwise a null value if there
            were no properties to write.
            </returns>
            <param name="doc">The XmlDocument context used to create the new element node.</param>
            <param name="flags"><see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags</see> 
            to control how properties are written.</param>
            <param name="nodeName">Name that will be given to the element node.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.CustomData.SerializeToTemplate(System.Xml.XmlTextWriter,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.CustomData.SerializeFromTemplate(System.Xml.XmlTextReader,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.CustomDataList">
            <summary>
            Manages a collection of custom data list.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.CustomDataList.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.CustomDataList.GetCustomDataList(System.Int32)">
            <summary></summary>
            <returns></returns>
            <remarks>
            </remarks>
            <param name="index">zero based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.CustomDataList.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>
            
            </summary>
            <param name="doc">The XmlDocument context used to create the new element node.</param>
            <param name="flags">Template flags to control template writing.  See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
            <returns>This method returns an XmlElement if properties were written. A null value is returned if there were no properties to write.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.CustomDataList.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary></summary>
            <remarks>
            </remarks>
            <param name="node">XmlNode that contains the chart properties.</param>
            <param name="flags">Template flags to control template writing.  See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.CustomDataValue">
            <summary>
            Summary description for CustomXLabelDataType.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.CustomXLabelData">
            <summary>
            Summary description for CustomXLabelDataType.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.CustomXLabelDataList">
            <summary>
            
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.CustomXLabelDataList.#ctor">
            <exclude/>
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.CustomXLabelDataList.GetCustomData(System.Int32)">
            <summary>Retrieves the annotation at the specified index in the AnnotationList.</summary>
            <returns>Annotation object or null if no annotation exists at the specified index.</returns>
            <remarks>See the example for the SetAnnotationAt method.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList">AnnotationList Property</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AnnotationCollection.SetAnnotationAt(System.Int32,GraphicsServer.GSNet.Charting.Annotation)">SetAnnotationAt Method</seealso>
            <param name="index">zero based index.</param>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.VisualObject">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            This is the base class for all visual objects. This base class provides
            the ability to select, move and resize objects. Note that objects can
            turn these abilities off by setting a property.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.#ctor">
            <summary>
            Constructs an instance of this type. Creates sizing handles.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.WriteImageMapRect(GraphicsServer.GSNet.Charting.Grid,System.Web.UI.HtmlTextWriter,System.Drawing.Rectangle,System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.WriteImageMapRect(System.Web.UI.HtmlTextWriter,System.Drawing.Rectangle,System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.WriteImageMapRectString(GraphicsServer.GSNet.Charting.Grid,System.Drawing.Rectangle,System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.WriteImageMapRectString(System.Drawing.Rectangle,System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.WriteImageMapCircle(GraphicsServer.GSNet.Charting.Grid,System.Web.UI.HtmlTextWriter,System.Drawing.Rectangle,System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.WriteImageMapCircle(System.Web.UI.HtmlTextWriter,System.Drawing.Rectangle,System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.WriteImageMapPoly(GraphicsServer.GSNet.Charting.Grid,System.Web.UI.HtmlTextWriter,System.Drawing.PointF[],System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.WriteImageMapPoly(System.Web.UI.HtmlTextWriter,System.Drawing.PointF[],System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.ToString">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.Paint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.PaintSelectionGraphics(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.IsPointInObject(System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.IsPointInObject(System.Drawing.Point,GraphicsServer.GSNet.Charting.ChartMouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.IsPointInObject(System.Drawing.Point,GraphicsServer.GSNet.Charting.MarkerMouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.IsPointInSizingHandle(System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.WantsMouseEvent(System.Windows.Forms.MouseEventArgs,System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.SelectObject(System.Windows.Forms.MouseEventArgs,System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.UnselectObject">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualObject.ResizeAndRepositionProportionally(System.Drawing.Size,System.Drawing.Size)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualObject.IsMovable">
            <summary>
            Specifies whether the object can be moved by dragging it with a mouse.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualObject.IsResizable">
            <summary>
            Specifies whether the object can be resized interactively.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualObject.IsSelectable">
            <summary>
            Specifies whether the object can be selected with a mouse.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualObject.IsSelected">
            <summary>
            Indicates whether the object is currently selected.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualObject.IsMoving">
            <summary>
            Indicates whether the object is currently being moved.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualObject.IsResizing">
            <summary>
            Indicates whether the object is currently being resized.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualObject.IsVisible">
            <summary>
            Indicates whether the object is visible.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualObject.Location">
            <summary>
            Sets or gets the location of this object.
            </summary>
            <value>Point</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualObject.Size">
            <summary>
            Sets or gets the size of this object.
            </summary>
            <value>Size</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualObject.Rectangle">
            <summary>
            Gets the bounding rectangle for this object.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualObject.ImageMapUrl">
            <summary>
            Sets or gets the URL to load when this object is clicked on.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualObject.ImageMapExtraString">
            <summary>
            Sets or gets an extra string to embed in the visual object's image map entry.
            </summary>
            <value>string</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisVisualGridLines">
            <summary>
            AxisVisualGridLines will draw the grid lines for the AxisVisualLinear axis.
            The grid lines will be drawn according to either MajorTickCount, 
            MajorTickInterval, or MajorTickGenerator.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AxisVisualTicks">
            <summary>
            AxisVisualTicks will draw the ticks for the AxisVisualLinear axis.
            This includes both major ticks and minor ticks. The ticks will be drawn
            according to either MajorTickCount, MajorTickInterval, or MajorTickGenerator.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualTicks.DrawTickMarks">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualTicks.InitAxisTickVars">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualTicks.GenerateTicks">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualTicks.GenerateMajorTickGeneratorTicks">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualTicks.GenerateIntervalOrCountTicks">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualTicks.CreateMajorTick">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualTicks.CreateMinorTicks">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualTicks.DrawTicks">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualTicks.DrawMajorTicks">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualTicks.DrawMinorTicks">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualGridLines.DrawTickMarks">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualGridLines.CreateMajorTick">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualGridLines.CreateMinorTicks">
            <exclude />
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AxisVisualGridLines.DrawTicks">
            <exclude />
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.MarkerLinesHighLow">
            <summary>
            The MarkerHighLow encapsulates the HighLow2D chart type's lines that are drawn:
            the high line, low line, open line and close line.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerLinesHighLow.MarkerOpenLine">
            <summary>
            Gets the Line object that controls the display of the
            <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/>.Open series component
            marker line for the <see cref="F:GraphicsServer.GSNet.Charting.ChartType.HighLow2D"/> chart type.
            </summary>
            <remarks>
            <para>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Line"/> class
            for detailed information about Line properties.
            </para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerLinesHighLow.MarkerOpenLineEnabled">
            <summary>
            Controls whether or not the Open-High-Low-Close chart's Open marker 
            uses the <see cref="P:GraphicsServer.GSNet.Charting.MarkerLinesHighLow.MarkerOpenLine"/>.
            </summary>
            <remarks>Setting this property to true uses the MarkerOpenLine. If false,
            than the main MarkerLine will be used instead.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerLinesHighLow.MarkerCloseLine">
            <summary>
            Gets the Line object that controls the display of the
            <see cref="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.Close"/> series component
            marker line for the <see cref="F:GraphicsServer.GSNet.Charting.ChartType.HighLow2D"/> chart type.
            </summary>
            <remarks>
            <para>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Line"/> class
            for detailed information about Line properties.
            </para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerLinesHighLow.MarkerCloseLineEnabled">
            <summary>
            Controls whether or not the Open-High-Low-Close chart's Close marker 
            uses the <see cref="P:GraphicsServer.GSNet.Charting.MarkerLinesHighLow.MarkerCloseLine"/>.
            </summary>
            <remarks>Setting this property to true uses the MarkerCloseLine. If false,
            than the main MarkerLine will be used instead.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerLinesHighLow.MarkerHighLine">
            <summary>
            Gets the Line object that controls the display of the
            <see cref="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.High"/> series component
            marker line for the <see cref="F:GraphicsServer.GSNet.Charting.ChartType.HighLow2D"/> chart type.
            </summary>
            <remarks>
            <para>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Line"/> class
            for detailed information about Line properties.
            </para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerLinesHighLow.MarkerHighLineEnabled">
            <summary>
            Controls whether or not the Open-High-Low-Close chart's High marker 
            uses the <see cref="P:GraphicsServer.GSNet.Charting.MarkerLinesHighLow.MarkerHighLine"/>.
            </summary>
            <remarks>Setting this property to true uses the MarkerHighLine. If false,
            than the main MarkerLine will be used instead.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerLinesHighLow.MarkerLowLine">
            <summary>
            Gets the Line object that controls the display of the
            <see cref="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.Low"/> series component
            marker line for the <see cref="F:GraphicsServer.GSNet.Charting.ChartType.HighLow2D"/> chart type.
            </summary>
            <remarks>
            <para>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Line"/> class
            for detailed information about Line properties.
            </para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerLinesHighLow.MarkerLowLineEnabled">
            <summary>
            Controls whether or not the Open-High-Low-Close chart's Low marker 
            uses the <see cref="P:GraphicsServer.GSNet.Charting.MarkerLinesHighLow.MarkerLowLine"/>.
            </summary>
            <remarks>Setting this property to true uses the MarkerLowLine. If false,
            than the main MarkerLine will be used instead.
            </remarks>
            <value>bool</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.MarkerType">
            <summary>
            Enumerates the types of markers that can be used to display datapoints 
            in a series.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.CurChartType">
            <summary>
            Selects whichever MarkerType is the default  
            for the current chart type. 
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.Bar">
            <summary>
            A Bar representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.Line">
            <summary>
            A Line representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.Scatter">
            <summary>
            A Scatter representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.Area">
            <summary>
            An Area representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.Pie">
            <summary>
            A Pie representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.Stick">
            <summary>
            A Stick representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.Range">
            <summary>
            A Range representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.HighLow">
            <summary>
            A High-Low representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.CandleStick">
            <summary>
            A Candlestick representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.Bubble">
            <summary>
            A Bubble representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.Polar">
            <summary>
            A Polar representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.Radar">
            <summary>
            A Radar representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.Gantt">
            <summary>
            A Gantt representation.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerType.Funnel">
            <summary>
            A Funnel representation.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Cage">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            The Cage object contains properties to manipulate the appearance of 3D
            charts.  The cage can be thought of as a room with 6 walls that completely
            surrounds a 3D chart.  Each wall can be turned on or off.  Each wall can
            have a different interior and exterior fill.  The whole cage, along with
            the 3D chart can be rotated in the x, y and/or z directions.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Cage.GetCageWall(GraphicsServer.GSNet.Engine3D.Surface)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Cage.WallBottom">
            <summary>
            Properties for the cage's bottom wall.  Applies to 3D charts only.
            See the <see cref="T:GraphicsServer.GSNet.Charting.CageWall"/> object for more information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.CageWall"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Cage.WallBack">
            <summary>
            Properties for the cage's back wall. Applies to 3D charts only.
            See the <see cref="T:GraphicsServer.GSNet.Charting.CageWall"/> object for more information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.CageWall"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Cage.WallRight">
            <summary>
            Properties for the cage's right wall. Applies to 3D charts only.
            See the <see cref="T:GraphicsServer.GSNet.Charting.CageWall"/> object for more information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.CageWall"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Cage.WallFront">
            <summary>
            Properties for the cage's front wall. Applies to 3D charts only.
            See the <see cref="T:GraphicsServer.GSNet.Charting.CageWall"/> object for more information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.CageWall"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Cage.WallLeft">
            <summary>
            Properties for the cage's left wall. Applies to 3D charts only.
            See the <see cref="T:GraphicsServer.GSNet.Charting.CageWall"/> object for more information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.CageWall"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Cage.WallTop">
            <summary>
            Properties for the cage's top wall. Applies to 3D charts only.
            See the <see cref="T:GraphicsServer.GSNet.Charting.CageWall"/> object for more information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.CageWall"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Cage.Rotation">
            <summary>
            This object contains the rotation properties for the cage.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Rotation"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Cage.WallThickness">
            <summary>
            Defines the thickness of cage walls (in device units, values 0 thru n).
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Cage.Outline">
            <summary>
            This property is a Line object that controls how the edges of the
            cage are drawn. See the <see cref="T:GraphicsServer.GSNet.Charting.Line"/> Object for detailed information about
            Line properties.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.CageWall">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            The cage contains six CageWall objects.  Since this is a separate object
            each wall can be manipulated separately.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CageWall.InteriorBackground">
            <summary>
            Properties for the interior side of cage wall.  This is a Background object.
            See the <see cref="T:GraphicsServer.GSNet.Charting.Background"/> object for more information on properties.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CageWall.ExteriorBackground">
            <summary>
            Properties for the exterior side of cage wall..  This is a Background object.
            See the <see cref="T:GraphicsServer.GSNet.Charting.Background"/> object for more information on properties.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CageWall.IsVisible">
            <summary>
            Determines whether the cage wall is visible.  Set to true to display wall.
            </summary>
            <value>bool</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ErrorBar">
            <summary>Base class for derived ErrorBar classes.</summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ErrorBarX">ErrorBarX Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ErrorBarY">ErrorBarY Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBar.#ctor">
            <summary>Constructs an instance of this type.</summary>
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBar.#ctor(GraphicsServer.GSNet.Charting.Axis2DLinear,GraphicsServer.GSNet.Charting.Axis2DLinear)">
            <summary>Constructs an instance of this type.</summary>
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBar.#ctor(GraphicsServer.GSNet.Charting.Axis2DLinear,GraphicsServer.GSNet.Charting.Axis2DLinear,GraphicsServer.GSNet.Charting.Axis2DLinear)">
            <summary>Constructs an instance of this type.</summary>
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBar.RemoveAllUserDefinedMinusErrors">
            <summary>
            Removes all user-defined error values set via the SetDataPointMinusError
            method.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBar.SetDataPointMinusError(System.Int32,System.Double)">
            <remarks>
            When the error bar type has been set to user-defined, this method is used to
            build the list of user-defined errors for the negative direction of the error bar. For
            each data point that requires a user defined error in the negative direction, call this
            method with the data point and the error amount.
            </remarks>
            <summary>Sets a user-defined error for the negative direction.</summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.ErrorBar.SetDataPointPlusError(System.Int32,System.Double)">SetDataPointPlusError Method</seealso>
            <param name="dataPoint">data point for which to set the user defined error.</param>
            <param name="errorVal">Error amount for the data point.</param>
            <seealso cref="P:GraphicsServer.GSNet.Charting.ErrorBar.ErrorBarType">ErrorBarType Enumeration</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBar.GetDataPointMinusError(System.Int32)">
            <summary>Gets the user-defined minus error for a specified data point.</summary>
            <returns>Error amount for specified data point.</returns>
            <param name="dataPoint">Data point for which to retrieve error value.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBar.RemoveAllUserDefinedPlusErrors">
            <summary>
            Removes all user-defined error values set via the SetDataPointPlusError
            method.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.ErrorBar.SetDataPointPlusError(System.Int32,System.Double)">SetDataPointPlusError Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBar.SetDataPointPlusError(System.Int32,System.Double)">
            <seealso cref="M:GraphicsServer.GSNet.Charting.ErrorBar.SetDataPointMinusError(System.Int32,System.Double)">SetDataPointMinusError Method</seealso>
            <remarks>
            When the error bar type has been set to user-defined, this method is used to
            build the list of user-defined errors for the positive direction of the error bar. For
            each data point that requires a user-defined error in the positive direction, call this
            method with the data point and the error amount.
            </remarks>
            <summary>Sets a user-defined error for the positive direction.</summary>
            <param name="dataPoint">data point for which to set the user defined error.</param>
            <param name="errorVal">Error amount for the data point.</param>
            <seealso cref="P:GraphicsServer.GSNet.Charting.ErrorBar.ErrorBarType">ErrorBarType Enumeration</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBar.GetDataPointPlusError(System.Int32)">
            <summary>Gets the user-defined plus error for a specified data point.</summary>
            <returns>Error amount for specified data point.</returns>
            <param name="dataPoint">Data point for which to retrieve error value.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ErrorBar.ErrorBarType">
            <summary>
            Gets or sets the type of error bars to display.  
            </summary>
            <remarks>Refer to the <see cref="T:GraphicsServer.GSNet.Charting.ErrorBarType"/> enum
            for further information on the supported types.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.ErrorBarType"/></value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.ErrorBar.ErrorBarType">ErrorBarType Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ErrorBar.LineProperties">
            <summary>Gets the Line object that is used in painting the error bars.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
            <remarks>Refer to the Line object for detailed information on line properties.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ErrorBar.CrossBarWidth">
            <summary>Gets and sets the width of the cross bar on error bars.</summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ErrorBar.FixedValue">
            <summary>
            Gets and sets the fixed value for error bars drawn when the ErrorBarType property
            is set to fixed value type.
            </summary>
            <value>double</value>
            <remarks>
            Error bars are drawn so that arms extend in the positive and negative directions
            from a data point. When ErrorBarType is FixedValue, the FixedValue property specifies
            the length of the arms.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.ErrorBar.ErrorBarType">ErrorBarType Enumeration</seealso>
            <example>
                The following example draws Y error bars using a fixed error value.
                <code lang="CS" title="[C#]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clipping can interfere with error bar display
            cht.Grid.ClipToTopMargin = false;
            cht.Grid.ClipToBottomMargin = false;
             
            // Set smaller symbol size
            cht.GetSeriesDrawing(0).Symbol.Size = 2;
             
            // Turn on Y error bars for a fixed value (+/-5)
            cht.Grid.ErrorBarY.ErrorBarType = ErrorBarType.Fixed;
            cht.Grid.ErrorBarY.FixedValue = 5;
            cht.Grid.ErrorBarY.LineProperties.Color = System.Drawing.Color.OrangeRed;
                </code>
            	<code lang="VB" title="[VB]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clipping can interfere with error bar display
            cht.Grid.ClipToTopMargin = False
            cht.Grid.ClipToBottomMargin = False
             
            ' Set smaller symbol size
            cht.GetSeriesDrawing(0).Symbol.Size = 2
             
            ' Turn on Y error bars for a fixed value (+/-5)
            cht.Grid.ErrorBarY.ErrorBarType = ErrorBarType.Fixed
            cht.Grid.ErrorBarY.FixedValue = 5
            cht.Grid.ErrorBarY.LineProperties.Color = System.Drawing.Color.OrangeRed
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ErrorBar.DisplayPlusBar">
            <summary>Controls whether error bars are drawn in the positive direction.</summary>
            <value>bool</value>
            <example>
                The following example draws error bars one standard deviation in the negative
                direction from Y values in the first series on the chart. 
                <code lang="CS" title="[C#]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clipping can interfere with error bar display
            cht.Grid.ClipToTopMargin = false;
            cht.Grid.ClipToBottomMargin = false;
             
            // Set smaller symbol size
            cht.GetSeriesDrawing(0).Symbol.Size = 2;
             
            // Turn on Y data error bars for standard deviation
            cht.Grid.ErrorBarY.ErrorBarType = ErrorBarType.StandardDeviation;
            cht.Grid.ErrorBarY.NumberOfStdDev = 1;
            cht.Grid.ErrorBarY.DisplayPlusBar = false; //display bars only in negative direction
                </code>
            	<code lang="VB" title="[VB]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clipping can interfere with error bar display
            cht.Grid.ClipToTopMargin = False
            cht.Grid.ClipToBottomMargin = False
             
            ' Set smaller symbol size
            cht.GetSeriesDrawing(0).Symbol.Size = 2
             
            ' Turn on Y data error bars for standard deviation
            cht.Grid.ErrorBarY.ErrorBarType = ErrorBarType.StandardDeviation
            cht.Grid.ErrorBarY.NumberOfStdDev = 1
            cht.Grid.ErrorBarY.DisplayPlusBar = False 'display bars only in negative direction
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ErrorBar.DisplayMinusBar">
            <summary>Controls whether error bars are drawn in the negative direction.</summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ErrorBar.Percent">
            <summary>
            Gets and sets the percentage value for error bars drawn when the ErrorBarType
            property is set to percent type.
            </summary>
            <value>double</value>
            <remarks>
            Error bars are drawn so that arms extend in the positive and negative directions
            from a data point. When ErrorBarType is Percent, the Percent property specifies the
            length of the arms. Note that a percentage is taken from each data value, so the
            lengths of error bars vary for each data point.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.ErrorBar.ErrorBarType">ErrorBarType Enumeration</seealso>
            <example>
                The following example draws Y error bars extending for 15% of the data value in
                both positive and negative directions. 
                <code lang="CS" title="[C#]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clipping can interfere with error bar display
            cht.Grid.ClipToTopMargin = false;
            cht.Grid.ClipToBottomMargin = false;
             
            // Set smaller symbol size
            cht.GetSeriesDrawing(0).Symbol.Size = 2;
             
            // Turn on Y data error bars for % of value
            cht.Grid.ErrorBarY.ErrorBarType = ErrorBarType.Percent;
            cht.Grid.ErrorBarY.Percent = 15;
            cht.Grid.ErrorBarY.LineProperties.Color = System.Drawing.Color.OrangeRed;
                </code>
            	<code lang="VB" title="[VB]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clipping can interfere with error bar display
            cht.Grid.ClipToTopMargin = False
            cht.Grid.ClipToBottomMargin = False
             
            ' Set smaller symbol size
            cht.GetSeriesDrawing(0).Symbol.Size = 2
             
            ' Turn on Y data error bars for % of value
            cht.Grid.ErrorBarY.ErrorBarType = ErrorBarType.Percent
            cht.Grid.ErrorBarY.Percent = 15
            cht.Grid.ErrorBarY.LineProperties.Color = System.Drawing.Color.OrangeRed
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ErrorBar.NumberOfStdDev">
            <summary>
            Gets and sets the number of standard deviations to use for error bars drawn when
            the ErrorBarType property is set to standard deviation type.
            </summary>
            <value>double</value>
            <remarks>
            Error bars are drawn so that arms extend in the positive and negative directions
            from a data point. When ErrorBarType is StandardDeviation, the NumberOfStdDev property
            specifies the length of the arms. The length of each arm is NumberOfStdDev standard
            deviations from the mean for the data series.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.ErrorBar.ErrorBarType">ErrorBarType Enumeration</seealso>
            <example>
                The following example draws Y error bars one standard deviation in both directions
                of data points in the first series on the chart. 
                <code lang="CS" title="[C#]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clipping can interfere with error bar display
            cht.Grid.ClipToTopMargin = false;
            cht.Grid.ClipToBottomMargin = false;
             
            // Set smaller symbol size
            cht.GetSeriesDrawing(0).Symbol.Size = 2;
             
            // Turn on Y data error bars for standard deviation
            cht.Grid.ErrorBarY.ErrorBarType = ErrorBarType.StandardDeviation;
            cht.Grid.ErrorBarY.NumberOfStdDev = 1;
                </code>
            	<code lang="VB" title="[VB]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clipping can interfere with error bar display
            cht.Grid.ClipToTopMargin = False
            cht.Grid.ClipToBottomMargin = False
             
            ' Set smaller symbol size
            cht.GetSeriesDrawing(0).Symbol.Size = 2
             
            ' Turn on Y data error bars for standard deviation
            cht.Grid.ErrorBarY.ErrorBarType = ErrorBarType.StandardDeviation
            cht.Grid.ErrorBarY.NumberOfStdDev = 1
                </code>
            </example>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ErrorBarType">
            <summary>
            Defines the error bar types that are currently supported.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ErrorBarType.Off">
            <summary>
            Error bars do not display
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ErrorBarType.Fixed">
            <summary>
            The length of error bars is a fixed value.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ErrorBarType.Percent">
            <summary>
            The length of error bars is a specified percentage of each data value. 
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ErrorBarType.Standard">
            <summary>
            Standard error bars display.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ErrorBarType.StandardDeviation">
            <summary>
            The length of error bars is a specified number of standard deviations from the mean.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ErrorBarType.UserDefined">
            <summary>
            The lengths of error bars are determined by error values set for each data point 
            via the SetDataPointPlusError() and SetDataPointMinuError() methods.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ErrorBarX">
            <summary>Draws error bars for X axis values.</summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ErrorBarY">ErrorBarY Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ErrorBarType">ErrorBarType Enumeration</seealso>
            <example>
                The following example draws error bars parallel to the X axis.
                <code lang="CS" title="[C#]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clipping can interfere with error bar display
            cht.Grid.ClipToRightMargin = false;
            cht.Grid.ClipToLeftMargin = false;
             
            // Set smaller symbol size
            cht.GetSeriesDrawing(0).Symbol.Size = 2;
             
            // Set up the X axis
            cht.Grid.AxisX.AxisMode = AxisMode.ValueLinear;
            cht.Grid.AxisX.MajorTickInterval = 20;
            cht.Grid.AxisX.MajorTickCount = 0;
            cht.Grid.AxisX.GridLinesOn = false;
             
            // Turn on X data error bars for % of value
            cht.Grid.ErrorBarX.ErrorBarType = ErrorBarType.Percent;
            cht.Grid.ErrorBarX.Percent = 15;
            cht.Grid.ErrorBarX.LineProperties.Color = System.Drawing.Color.OrangeRed;
                </code>
            	<code lang="VB" title="[VB]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clipping can interfere with error bar display
            cht.Grid.ClipToRightMargin = False
            cht.Grid.ClipToLeftMargin = False
             
            ' Set smaller symbol size
            cht.GetSeriesDrawing(0).Symbol.Size = 2
             
            ' Set up X axis
            cht.Grid.AxisX.AxisMode = AxisMode.ValueLinear
            cht.Grid.AxisX.MajorTickInterval = 20
            cht.Grid.AxisX.GridLinesOn = False
             
            ' Turn on X data error bars for % of value
            cht.Grid.ErrorBarX.ErrorBarType = ErrorBarType.Percent
            cht.Grid.ErrorBarX.Percent = 15
            cht.Grid.ErrorBarX.LineProperties.Color = System.Drawing.Color.OrangeRed
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBarX.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBarX.#ctor(GraphicsServer.GSNet.Charting.Axis2DLinear,GraphicsServer.GSNet.Charting.Axis2DLinear)">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ErrorBarY">
            <summary>Draws error bars for Y axis values.</summary>
            <example>
                The following example draws fixed value error bars parallel to the Y axis.
                <code lang="CS" title="[C#]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clipping can interfere with error bar display
            cht.Grid.ClipToTopMargin = false;
            cht.Grid.ClipToBottomMargin = false;
             
            // Turn off Y axis gridlines
            cht.Grid.AxisY.GridLinesOn = false;
             
            // Set smaller symbol size
            cht.GetSeriesDrawing(0).Symbol.Size = 2;
             
            // Turn on Y error bars for a fixed value (+/-5)
            cht.Grid.ErrorBarY.ErrorBarType = ErrorBarType.Fixed;
            cht.Grid.ErrorBarY.FixedValue = 5;
            cht.Grid.ErrorBarY.LineProperties.Color = System.Drawing.Color.OrangeRed;
                </code>
            	<code lang="VB" title="[VB]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clipping can interfere with error bar display
            cht.Grid.ClipToTopMargin = False
            cht.Grid.ClipToBottomMargin = False
             
            ' Turn off Y axis gridlines
            cht.Grid.AxisY.GridLinesOn = False
             
            ' Set smaller symbol size
            cht.GetSeriesDrawing(0).Symbol.Size = 2
             
            ' Turn on Y error bars for a fixed value (+/-5)
            cht.Grid.ErrorBarY.ErrorBarType = ErrorBarType.Fixed
            cht.Grid.ErrorBarY.FixedValue = 5
            cht.Grid.ErrorBarY.LineProperties.Color = System.Drawing.Color.OrangeRed
                </code>
            </example>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ErrorBarX">ErrorBarX Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ErrorBarType">ErrorBarType Enumeration</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBarY.#ctor">
            <summary>Constructs an instance of this type.</summary>
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ErrorBarY.#ctor(GraphicsServer.GSNet.Charting.Axis2DLinear,GraphicsServer.GSNet.Charting.Axis2DLinear)">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Grid">
            <base>GraphicsServer.GSNet.Charting.VisualChartObject</base>
            <summary>
            The grid object controls the area in which the chart renders the series data.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.VisualChartObject">
            <summary>This is the base class for chart and widget objects. This class 
            provides the ability to anchor to sides of the containing chart or widget,
            and supports backgrounds and borders.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.ProcessAnchor(System.Drawing.Size,System.Drawing.Size)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.PropertyChangedHandlerProxy(System.Object,GraphicsServer.GSNet.Charting.PropertyEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.PaintBackgroundAndBorder(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.Paint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.GetCursor(System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.ResizeBegin(GraphicsServer.GSNet.Charting.SizeHandle)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.Resize(System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.ResizeEnd(System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.DragBegin(System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.Drag(System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.DragEnd(System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.ShouldSwapWidthHeight(System.Single)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.GenerateFontSizeForRect(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Font,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VisualChartObject.ToString">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualChartObject.Anchor">
            <summary>
            Specifies how a visual chart object anchors to the edges of its container.
            </summary>
            <remarks>
            Anchors define to which edge of the chart a chart object is bound.
            The behavior of anchoring in Graphics Server is identical to
            the behavior of anchoring in standard .Net forms.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSAnchorStyles">GSAnchorStyles Enumeration</seealso>
            <value><see cref="T:GraphicsServer.GSNet.Charting.GSAnchorStyles">GSAnchorStyles</see></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualChartObject.Background">
            <summary>
            Gets the Background object that provides the background for the VisualChartObject.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualChartObject.Border">
            <summary>
            Gets the Border object that provides a border for the VisualChartObject.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Border">Border Class</seealso>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Border"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.VisualChartObject.IsVisible">
            <summary>
            Controls whether the object is visible or not.
            </summary>
            <value>bool</value>
            <example>
            	<code lang="CS" title="C# Example">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Hide the legend
            cht.Legend.IsVisible = false;
                </code>
            	<code lang="VB" title="VB Example">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Hide the legend
            cht.Legend.IsVisible = False
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Grid.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Grid.Paint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Grid.FindMarkSymbolPoint(GraphicsServer.GSNet.Charting.SeriesDrawing,System.Int32)">
            <summary>
            Find the symbol point for the specified data point in the specified series.
            </summary>
            <remarks>This routine will search through all the marker drawing objects and
            find the corresponding marker for the specified parameters.  The symbol
            point will then be retrieved from that marker and returned
            <para>If the marker cannot be found then the point (0,0) will be returned.
            Note that this point will be in grid coordinates.</para>
            </remarks>
            <returns>
            The return value is a Grid coordinate representing the symbol point for the
            specified data point in the specified series.
            </returns>
            <param name="seriesDrawing"><see cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing</see></param>
            <param name="dataPoint">Zero-based data point index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Grid.IsPointInObject(System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Grid.IsPointInObject(System.Drawing.Point,GraphicsServer.GSNet.Charting.ChartMouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Grid.IsPointInObject(System.Drawing.Point,GraphicsServer.GSNet.Charting.MarkerMouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Grid.WantsMouseEvent(System.Windows.Forms.MouseEventArgs,System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Grid.PaintSelectionGraphics(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Grid.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.BorderLabelList">
            <summary>
            Gets the BorderLabelList object that contains the BorderLabel objects currently
            attached to the grid. This property exists to provide access to the properties
            and methods of the underlying BorderLabelList object.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.BorderLabelList"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.BorderLabelList">BorderLabelList Class</seealso>
            <example>
            	<code lang="CS" title="C# Example">
            Chart cht = this.gsNetWinChart1.Chart;
             
            //Create a label for the bottom of the grid
            BorderLabel labelBottom = new BorderLabel();
            labelBottom.Text = "X Axis";
            labelBottom.RelativeLocation = RelativeLocation.BottomMiddle;
            labelBottom.OffsetTopBottom = 0;
             
            //Create a label for the left side of the grid
            BorderLabel labelLeft = new BorderLabel();
            labelLeft.Text = "Y Axis";
            labelLeft.RelativeLocation = RelativeLocation.LeftMiddle;
            labelLeft.OffsetTopBottom = 0;
             
            //Add the border labels to the grid
            cht.Grid.BorderLabelList.Add(labelBottom);
            cht.Grid.BorderLabelList.Add(labelLeft);
                </code>
            	<code lang="VB" title="VB Example">
            'Create a label for the bottom of the grid
            Dim labelBottom As BorderLabel = New BorderLabel
            labelBottom.Text = "X Axis"
            labelBottom.RelativeLocation = RelativeLocation.BottomMiddle
            labelBottom.OffsetTopBottom = 0
             
            'Create a label for the left side of the grid
            Dim labelLeft As BorderLabel = New BorderLabel
            labelLeft.Text = "Y Axis"
            labelLeft.RelativeLocation = RelativeLocation.LeftMiddle
            labelLeft.OffsetTopBottom = 0
             
            With Me.GsNetWinChart1.Chart
                'Add the border labels to the grid
                .Grid.BorderLabelList.Add(labelBottom)
                .Grid.BorderLabelList.Add(labelLeft)
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisBackground">
            <summary>
            Gets the Background object that provides the background for the axis area of 2D chart types.  
            </summary>
            <remarks>
            For the background to paint, the <see cref="P:GraphicsServer.GSNet.Charting.Grid.AxisBackgroundEnabled"/>
            property must be set to true.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisBackgroundEnabled">
            <summary>
            Enables and disables the painting of the background in the axis area
            for 2D chart types.  
            </summary>
            <remarks>
            The <see cref="P:GraphicsServer.GSNet.Charting.Grid.AxisBackground"/>
            property defines painting properties if this is set to true.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.StartDataPoint">
            <summary>
            Get or set the index of the beginning data point in a range.
            </summary>
            <remarks>
            The start data point and end data point properties allow the user to specify
            a range of data points to display in the chart. This range is 
            independent of any specific SeriesDrawing object (i.e. it applies across all 
            series that have been added to the chart). The data point range is ignored if
            either the start or end data point property is less than zero (data points 
            are zero based).
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.EndDataPoint">
            <summary>
            Get or set the index of the ending data point in a range.
            </summary>
            <remarks>
            The start data point and end data point properties allow the user to specify
            a range of data points to display in the chart. This range is 
            independent of any specific SeriesDrawing object (i.e. it applies across all 
            series that have been added to the chart). The data point range is ignored if
            either the start or end data point property is less than zero (data points 
            are zero based). 
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisLeft">
            <summary>Gets or sets the size of the left margin inside the grid.</summary>
            <remarks>
            The axis renders after this margin. Note that axis
            labels paint within this margin.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisRight">
            <summary>Gets or sets the size of the right margin inside the grid.</summary>
            <remarks>
            The axis renders after this margin. Note that axis
            labels paint within this margin.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisTop">
            <summary>Gets or sets the size of the top margin inside the grid.</summary>
            <remarks>
            The axis renders after this margin. Note that axis
            labels paint within this margin.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.MarginAxisBottom">
            <summary>Gets or sets the size of the bottom margin inside the grid.</summary>
            <remarks>
            The axis renders after this margin. Note that axis
            labels paint within this margin.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.ClipToLeftMargin">
            <summary>
            Controls whether series drawing is clipped at the left margin.
            </summary>
            <remarks>
            Setting this property to true prevents series drawing from painting in the margin.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.ClipToRightMargin">
            <summary>
            Controls whether series drawing is clipped at the right margin.
            </summary>
            <remarks>
            Setting this property to true prevents series drawing from painting in the margin.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.ClipToTopMargin">
            <summary>
            Controls whether series drawing is clipped at the top margin.
            </summary>
            <remarks>
            Setting this property to true prevents series drawing from painting in the margin.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.ClipToBottomMargin">
            <summary>
            Controls whether series drawing is clipped at the bottom margin.
            </summary>
            <remarks>
            Setting this property to true prevents series drawing from painting in the margin.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisX">
            <summary>
            Gets the AxisX object that provides the X axis.  
            </summary>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.AxisX"/> object for more information about
            properties of the object.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisX"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisXPrime">
            <summary>
            Gets the AxisXPrime object that provides the X prime axis.  
            </summary>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.AxisXPrime"/> object for more information about
            properties of the object.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisXPrime"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisXList">
            <summary>
            Gets the AxisXList object that maintains the list of X axes for the chart.
            </summary>
            <remarks>
            This property makes it possible for many X axes to be displayed on a single chart. 
            Each axis is mapped, or tied, to a <see cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing"/>
            object using the SeriesDrawing's <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToXList"/>
            method.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisXPrimeList">
            <summary>
            Gets the AxisXPrimeList object that maintains the list of X prime axes for the chart.
            </summary>
            <remarks>
            This property makes it possible for many X prime axes to be displayed on a single chart. 
            Each axis is mapped, or tied, to a <see cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing"/>
            object using the SeriesDrawing's <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToXPrimeList"/>
            method.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisY">
            <summary>
            Gets the AxisY object that provides the Y axis.  
            </summary>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.AxisY"/> object for more information about
            properties of the object.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisY"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisYPrime">
            <summary>
            Gets the AxisYPrime object that provides the chart's Y prime axis.  
            </summary>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.AxisYPrime"/> object for more information about
            properties of the object.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisYPrime"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisYList">
            <summary>
            Gets the AxisYList object that maintains the list of Y axes for the chart.
            </summary>
            <remarks>
            This property makes it possible for many Y axes to be displayed on a single chart. 
            Each axis is mapped, or tied, to a <see cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing"/>
            object using the SeriesDrawing's <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToYList"/>
            method.
            </remarks>
            <example>
            See the example for the <see cref="T:GraphicsServer.GSNet.Charting.AxisYList">AxisYList Class</see>.
            </example>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Grid.AxisYList">AxisYList Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisYPrimeList">
            <summary>
            Gets the AxisYPrimeList object that maintains the list of Y prime axes for the chart.
            </summary>
            <remarks>
            This property makes it possible for many Y prime axes to be displayed on a single chart. 
            Each axis is mapped, or tied, to a <see cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing"/>
            object using the SeriesDrawing's <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToYPrimeList"/>
            method.
            </remarks>		
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisRadial">
            <summary>
            Gets the AxisRadial object that provides the radial axis for polar charts.  
            </summary>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.AxisRadial"/> object for more information about
            properties of the object.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisRadial"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisAngular">
            <summary>
            Gets the AxisAngular object that provides the angular axis for polar charts.  
            </summary>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.AxisAngular"/> object for more information about
            properties of the object.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisAngular"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisPie">
            <summary>
            Gets the AxisPie object that provides the axis for pie charts.  
            </summary>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.AxisPie"/> object for more information about
            properties of the object.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisPie"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.Axis3DX">
            <summary>
            Gets the Axis3DX object that provides the X axis for three-dimensional charts.  
            </summary>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.Axis3DX"/> object for more information about
            properties of the object.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Axis3DX"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.Axis3DY">
            <summary>
            Gets the Axis3DY object that provides the Y axis for three-dimensional charts.  
            </summary>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.Axis3DY"/> object for more information about
            properties of the object.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Axis3DY"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.Axis3DZ">
            <summary>
            Gets the Axis3DZ object that provides the Z axis for three-dimensional charts.  
            </summary>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.Axis3DZ"/> object for more information about
            properties of the object.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Axis3DZ"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisRadar">
            <summary>
            Gets the AxisRadar object that provides the axis for radar charts.  
            </summary>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.AxisRadar"/> object for more information about
            properties of the object.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisRadar"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.AxisFunnel">
            <summary>
            Gets the AxisFunnel object that provides the axis for funnel charts.  
            </summary>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.AxisFunnel"/> object for more information about
            properties of the object.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AxisFunnel"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.Cage">
            <summary>
            Gets the Cage object that provides the containing box for three-dimensional charts.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Cage"/> object for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Cage"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.SurfaceChart">
            <summary>
            Gets the SurfaceChart object that provides the surface for surface charts.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.SurfaceChart"/> object for
            more information.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.SurfaceChart"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.LimitLines">
            <summary>
            This property controls the display of limit lines on the chart.  Refer to the
            <see cref="T:GraphicsServer.GSNet.Charting.LimitLine"/> object for more information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.LimitLine"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.ErrorBarX">
            <summary>
            This property controls the display of X error bars on the chart.  Refer to the
            <see cref="T:GraphicsServer.GSNet.Charting.ErrorBarX"/> object for more information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.ErrorBarX"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.ErrorBarY">
            <summary>
            This property controls the display of Y error bars on the chart.  Refer to the
            <see cref="T:GraphicsServer.GSNet.Charting.ErrorBarY"/> object for more information.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.ErrorBarY"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Grid.TooltipText">
            <summary>Gets and sets the text to display in the popup tooltip.</summary>
            <value>string</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LimitLine">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            This object controls the display of limit lines on the graph.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LimitLine.HighValue">
            <summary>
            Specifies the high limit line value.
            </summary>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LimitLine.LowValue">
            <summary>
            Specifies the low limit line value.
            </summary>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LimitLine.LimitLineMode">
            <summary>
            The limit line mode enum controls which limit lines will display. See the <see cref="T:GraphicsServer.GSNet.Charting.LimitLineMode"/>
            enumeration for more details.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.LimitLineMode"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LimitLine.LimitFillMode">
            <summary>
            This enum controls whether/how limit lines are filled. See the <see cref="T:GraphicsServer.GSNet.Charting.LimitFillMode"/>
            enumeration for more details.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.LimitFillMode"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LimitLine.LineProperties">
            <summary>
            This property is a line object that controls the display of the limit lines.  Refer to
            the <see cref="T:GraphicsServer.GSNet.Charting.Line"/> object for more information about line properties.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LimitLine.FillProperties">
            <summary>
            This property is a background object that controls how to fill the limit lines if
            the limit fill mode is turned on.  Refer to the <see cref="T:GraphicsServer.GSNet.Charting.Background"/> object for detailed 
            information about background properties.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LimitLineMode">
            <summary>
            The limit line mode enum controls which limit lines will display.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LimitLineMode.Off">
            <summary>Off</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LimitLineMode.HighLine">
            <summary>Display the high limit line.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LimitLineMode.LowLine">
            <summary>Display the low limit line.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LimitLineMode.Both">
            <summary>Display both limit lines.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LimitFillMode">
            <summary>
            This enum controls whether/how limit lines are filled.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LimitFillMode.Off">
            <summary>Off</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LimitFillMode.Outside">
            <summary>Fill outside both limit lines.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LimitFillMode.Inside">
            <summary>Fill inside both limit lines.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Projection">
            <summary>
            Specifies the type of projection to use for a 3D chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.Projection.Axonometric">
            <summary>
            Also known as parallel perspective, axonometric projection tries to remain
            true to scale rather than be visually realistic. 
            </summary>
            <remarks>
            With axonometric projection, lines that are parallel along the Z axis 
            in 3-dimensional space remain parallel in the 2-dimensional picture. There is 
            no vanishing point; objects do not get smaller as they move away from the viewer. 
            If you know the scale of the axes, you can measure the width, height, length, 
            and depth of an object directly from the picture -- hence the name axonometric.
            </remarks>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.Projection.Perspective">
            <summary>
            Also known as linear perspective, this type of projection tries to achieve visual
            realism when projecting 3-dimensional space onto a 2-dimensional picture. 
            </summary>
            <remarks>
            With perspective projection, lines that are parallel along the Z axis in 3-dimensional 
            space collapse to a vanishing point located on the horizon of the 2-dimensional picture.
            Objects get smaller as they move away from the viewer toward the vanishing point.
            </remarks>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Rotation">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            This object contains 3D rotation properties.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Rotation.YAxisRotation">
            <summary>
            Rotation about the Y-axis (referred to as theta in Foley text).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Rotation.XAxisRotation">
            <summary>
            Rotation about the X-axis (referred to as phi in Foley text).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Rotation.ZAxisRotation">
            <summary>
            Rotation about the Z-axis (referred to as alpha in Foley text).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Rotation.ProjectionType">
            <summary>
            Defines the Projection type onto the viewing plane.
            </summary>
            <value>Projection</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.SurfaceChart">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            Properties that are specific to surface charts.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SurfaceChart.SideWalls">
            <summary>
            Determines if side walls are rendered for surface charts.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SurfaceChart.SideWallsFill">
            <summary>
            Sets the properties for the side walls of surface charts.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SurfaceChart.BoundaryLines">
            <summary>
            Determines if surface chart panels have boundary lines.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SurfaceChart.FilledPanels">
            <summary>
            Determines if the background for surface chart panels are filled.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SurfaceChart.ScaledColor">
            <summary>
            Determines if the colors for surface chart panels are based on their value.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SurfaceChart.MinColor">
            <summary>
            Specifies the color to use for the panel with the lowest value.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SurfaceChart.MaxColor">
            <summary>
            Specifies the color to use for the panel with the highest value.
            </summary>
            <value>Color</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Legend">
            <summary>Represents the legend for the chart.</summary>
            <remarks>
            	<para>The Legend class encapsulates all the functionality of the Chart control's
                legend, and is exposed through the Chart object's Legend property.</para>
            	<para>A chart can have only one legend.</para>
            	<para>The legend consists of an item for each series currently shown on the chart.
                Each item in the legend has a symbol corresponding to a data series on the chart
                and text taken, by default, from the corresponding SeriesName property.</para>
            	<para>Legends can:</para>
            	<list type="bullet">
            		<item>Be sized and positioned anywhere in the chart's drawing area.</item>
            		<item>Be anchored to one or more edges of the chart.</item>
            		<item>Have one or more columns.</item>
            		<item>Have backgrounds and borders.</item>
            		<item>Be hidden or visible.</item>
            	</list>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.Legend">Legend Property</seealso>
            <example>
                The example below sets the legend background completely transparent, arranges
                legend items in one row, formats symbols, formats text, aligns symbols with text,
                and moves the legend to a place below the grid.
                <code lang="CS" title="C# Example">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Show the legend
            cht.Legend.IsVisible = true;
             
            // Let the chart background show through
            cht.Legend.Background.Transparency = 100;
             
            // Turn off the border
            cht.Legend.Border.BorderType = BorderType.NoBorder;
             
            // Display all items in one row
            cht.Legend.DisplayHorizontal = true;
             
            // Format symbols
            cht.Legend.BoxMode = LegendBoxMode.BoxesOn;
            cht.Legend.IconOutlineEnabled = false;
             
            // Format text
            cht.Legend.AutoTextColor = false;
            cht.Legend.TextFormat.Color = Color.DarkSlateBlue;
            cht.Legend.TextFormat.Font = new Font("Myriad Condensed Web", 9);
            cht.Legend.TextFormat.TextRenderingMode = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;
             
            // Align the symbols and text
            cht.Legend.BoxAlignment = LegendBoxAlignment.LeftCenter;
            cht.Legend.TextFormat.HorizontalAlignment = StringAlignment.Near;
             
            // Move the legend to the bottom of the grid
            cht.QuickLayout(QuickLayoutType.LayoutGridMiddleTitleTopLegendBottom);
                </code>
            	<code lang="VB" title="VB Example">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Show the legend
            cht.Legend.IsVisible = True
             
            ' Let the chart background show through
            cht.Legend.Background.Transparency = 100
             
            ' Turn off the border
            cht.Legend.Border.BorderType = BorderType.NoBorder
             
            ' Display all items in one row
            cht.Legend.DisplayHorizontal = True
             
            ' Format symbols
            cht.Legend.BoxMode = LegendBoxMode.BoxesOn
            cht.Legend.IconOutlineEnabled = False
             
            ' Format text
            cht.Legend.AutoTextColor = False
            cht.Legend.TextFormat.Color = Color.DarkSlateBlue
            cht.Legend.TextFormat.Font = New Font("Myriad Condensed Web", 9)
            cht.Legend.TextFormat.TextRenderingMode = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit
             
            ' Align the symbols and text
            cht.Legend.BoxAlignment = LegendBoxAlignment.LeftCenter
            cht.Legend.TextFormat.HorizontalAlignment = StringAlignment.Near
             
            ' Move the legend to the bottom of the grid
            cht.QuickLayout(QuickLayoutType.LayoutGridMiddleTitleTopLegendBottom)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Legend.#ctor">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Legend.#ctor(System.Boolean,GraphicsServer.GSNet.Charting.LegendBoxAlignment,System.Drawing.Size)">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Legend.#ctor(System.Int32,GraphicsServer.GSNet.Charting.LegendBoxAlignment,System.Drawing.Size)">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Legend.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Legend.Paint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Legend.IsPointInObject(System.Drawing.Point,GraphicsServer.GSNet.Charting.ChartMouseEventArgs)">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.TextFormat">
            <summary>
            Contains a TextPainter object that controls the display of text in the
            legend.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TextPainter"/></value>
            <remarks>
            Refer to the <see cref="T:GraphicsServer.GSNet.Charting.TextPainter"/> object for
            details.
            </remarks>
            <example>
                This example sets text color, font, and rendering mode for legend text.
                <code lang="CS" title="[C#]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Format text
            cht.Legend.AutoTextColor = false;
            cht.Legend.TextFormat.Color = Color.DarkSlateBlue;
            cht.Legend.TextFormat.Font = new Font("Myriad Condensed Web", 9);
            cht.Legend.TextFormat.TextRenderingMode = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;
                </code>
            	<code lang="VB" title="[VB]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Format text
            cht.Legend.AutoTextColor = False
            cht.Legend.TextFormat.Color = Color.DarkSlateBlue
            cht.Legend.TextFormat.Font = New Font("Myriad Condensed Web", 9)
            cht.Legend.TextFormat.TextRenderingMode = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.BoxSize">
            <summary>Defines the size of the symbol (icon or box) for all legend items.</summary>
            <value>Size</value>
            <remarks>
            Note that whether the box is displayed or not is controlled by the BoxMode
            property.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Legend.BoxMode">BoxMode Property</seealso>
            <example>
            	<code lang="CS" title="[C#]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Format symbols
            cht.Legend.BoxMode = LegendBoxMode.BoxesOn;
            cht.Legend.BoxSize = new System.Drawing.Size(15, 15);
                </code>
            	<code lang="VB" title="[VB]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Format symbols
            cht.Legend.BoxMode = LegendBoxMode.BoxesOn
            cht.Legend.BoxSize = New System.Drawing.Size(15, 15)
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.BoxMode">
            <summary>Controls whether legend items display icons or boxes or no symbol at all.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.LegendBoxMode"/></value>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.LegendBoxMode"/> enumeration.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.BoxAlignment">
            <value><see cref="T:GraphicsServer.GSNet.Charting.LegendBoxAlignment"/></value>
            <summary>Controls how symbols are aligned with the text of legend items.</summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.LegendBoxAlignment"/> enumeration.</remarks>
            <example>
                The following example aligns boxes and text so that boxes are on the right,
                centered on the text.
                <code lang="CS" title="[C#]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Align the symbols with text
            cht.Legend.BoxAlignment = LegendBoxAlignment.LeftCenter;
             
            // Align the text within its space
            cht.Legend.TextFormat.HorizontalAlignment = StringAlignment.Near;
            cht.Legend.TextFormat.VerticalAlignment = StringAlignment.Center;
                </code>
            	<code lang="VB" title="[VB]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Align the symbols with text
            cht.Legend.BoxAlignment = LegendBoxAlignment.LeftCenter
             
            ' Align the text within its space
            cht.Legend.TextFormat.HorizontalAlignment = StringAlignment.Near
            cht.Legend.TextFormat.VerticalAlignment = StringAlignment.Center
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.NumberOfColumns">
            <summary>Determines the number of columns in which legend items are arranged.</summary>
            <value>int</value>
            <example>
                The following example arranges legend items in columns with two items per column.
                In order to determine how many columns are required, the code divides the total
                number of series by two.
                <code lang="CS" title="[C#]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Arrange in columns, two items per column
            cht.Legend.NumberOfColumns = (int) (cht.SeriesDrawingList.Count / 2);
                </code>
            	<code lang="VB" title="[VB]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Arrange in columns, two items per column
            cht.Legend.NumberOfColumns = CInt(cht.SeriesDrawingList.Count / 2)
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.DisplayHorizontal">
            <summary>Controls whether legend items display horizontally in one row.</summary>
            <value>bool</value>
            <example>
                The following example displays all legend items in one row and moves the legend to
                a place below the grid.
                <code lang="CS" title="[C#]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Display all items in one row
            cht.Legend.DisplayHorizontal = true;
             
            // Move the legend to the bottom of the grid
            cht.QuickLayout(QuickLayoutType.LayoutGridMiddleTitleTopLegendBottom);
                </code>
            	<code lang="VB" title="[VB]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Display all items in one row
            cht.Legend.DisplayHorizontal = True
             
            ' Move the legend to the bottom of the grid
            cht.QuickLayout(QuickLayoutType.LayoutGridMiddleTitleTopLegendBottom)
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.ReverseOrder">
            <summary>Controls whether legend items are listed in reverse order.</summary>
            <value>bool</value>
            <remarks>
            	<para>By default, legend items are listed in the same order that data series are
                listed in the SeriesDrawingList. (Usually this is the order in which the series
                were added.) Setting ReverseOrder to true lists items in reverse of their order in
                the SeriesDrawingList.</para>
            	<para>This property can be useful if you want to arrange legend items in the same
                order as series are drawn in a stacked bar chart (first series on the bottom, last
                series on top).</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.SeriesDrawingList">SeriesDrawingList Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.IconOutlineEnabled">
            <summary>Controls whether outlines are drawn around legend symbols.</summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.MarginLeft">
            <summary>
            Defines the left margin within the legend object's drawing area.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.MarginRight">
            <summary>
            Defines the right margin within the legend object's drawing area.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.MarginTop">
            <summary>
            Defines the top margin within the legend object's drawing area.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.MarginBottom">
            <summary>
            Defines the bottom margin within the legend object's drawing area.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.AutoTextColor">
            <summary>Controls whether legend text is automatically colored to match the series.</summary>
            <value>bool</value>
            <remarks>
            Setting this property to true uses the same color for legend item text as is used
            by the corresponding series on the chart. Setting it to false uses the color specified
            in the TextPainter object accessed through the TextFormat property.
            </remarks>
            <summary>Controls the color of text in legend items.</summary>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Legend.TextFormat">TextFormat Property</seealso>
            <example>
                The following example turns off automatic text coloring and sets all legend text to
                the same color.
                <code lang="CS" title="[C#]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Set legend text color
            cht.Legend.AutoTextColor = false;
            cht.Legend.TextFormat.Color = Color.DarkSlateBlue;
                </code>
            	<code lang="VB" title="[VB]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Set legend text color
            cht.Legend.AutoTextColor = False
            cht.Legend.TextFormat.Color = Color.DarkSlateBlue
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.TooltipText">
            <summary>Specifies the text to display in the popup tooltip.</summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Legend.SmoothingMode">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LegendBoxAlignment">
            <summary>
            Legend items consist of two pieces.  One piece is the box (or icon) and the second
            piece is the text.  This enumeration defines how these two pieces display with regards to
            one another if the box is not turned off.  For example, a LeftCenter alignment means
            the box will display to the left of the text and the box will be horizontally center
            aligned to the text.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LegendBoxAlignment.LeftTop">
            <summary>
            Top left corner.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LegendBoxAlignment.LeftCenter">
            <summary>
            Centered vertically to the left of the text.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LegendBoxAlignment.LeftBottom">
            <summary>
            Bottom left corner.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LegendBoxAlignment.CenterTop">
            <summary>
            Centered horizontally above the text.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LegendBoxAlignment.CenterBottom">
            <summary>
            Centered horizontally below the text.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LegendBoxAlignment.RightTop">
            <summary>
            The top right corner.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LegendBoxAlignment.RightCenter">
            <summary>
            Centered vertically to the right of the text.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LegendBoxAlignment.RightBottom">
            <summary>
            The bottom right corner.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LegendBoxMode">
            <summary>
            This enumeration controls whether the graphical representation of the series is displayed
            along with the text.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LegendBoxMode.IconsOn">
            <summary>
            The box is displayed as an icon.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LegendBoxMode.BoxesOn">
            <summary>
            The box is displayed as a simple colored box.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.LegendBoxMode.Off">
            <summary>
            Boxes are turned off.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Line">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            The Line class is a utility class similar to the Background class.
            Line objects are used in many places within the chart engine.  Via the
            the Line object the user can control the appearance of lines.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.#ctor(System.Drawing.Color,System.Single)">
            <summary>
            Constructs a solid, colored line.
            </summary>
            <param name="c">Line color.</param>
            <param name="thickness">The thickness of the line.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.#ctor(System.Drawing.Color,System.Single,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Constructs a patterned Line.
            </summary>
            <param name="c">Line color.</param>
            <param name="thickness">The thickness of the line.</param>
            <param name="ds">The Dash style of the line.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.#ctor(System.Drawing.Color,System.Single,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Constructs a line with all possible properties.
            </summary>
            <param name="c">Line color.</param>
            <param name="thickness">The thickness of the line.</param>
            <param name="transparency">The transparency of the line.</param>
            <param name="ds">The Dash style of the line.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.PaintLine(System.Windows.Forms.PaintEventArgs,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Paints a line using the current line properties.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="startPoint">Starting point of the line.</param>
            <param name="endPoint">Ending point of the line.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.PaintLine(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Paints a line using the current line properties.
            </summary>
            <param name="g">Graphics object</param>
            <param name="startPoint">Starting point of the line.</param>
            <param name="endPoint">Ending point of the line.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.PaintPolygon(System.Drawing.Graphics,System.Drawing.PointF[])">
            <summary>
            Paints a polygon based on an array of points passed in.
            </summary>
            <param name="g">Graphics object.</param>
            <param name="points">Array of points that make up the polygon.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.PaintCurve(System.Windows.Forms.PaintEventArgs,System.Drawing.PointF[])">
            <summary>
            Draws a curve given a set of points.  
            </summary>
            <remarks>
            The tension defaults to 0.1f.
            </remarks>
            <param name="e">PaintEventArgs</param>
            <param name="points">Array of points that map the curve.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.PaintCurve(System.Windows.Forms.PaintEventArgs,System.Drawing.PointF[],System.Single)">
            <summary>
            Draws a curve given a set of points.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="points">Array of points that map the curve.</param>
            <param name="tension">Double  that specifies how tightly the curve bends 
            through the points.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.PaintCircle(System.Windows.Forms.PaintEventArgs,System.Drawing.RectangleF)">
            <summary>
            Draws a circle within the specified rectangle.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="circleRect">Rectangle in which the circle is drawn.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.PaintPie(System.Windows.Forms.PaintEventArgs,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie segment based on the specified parameters.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="pieRect">Rectangle in which the pie shape is drawn.</param>
            <param name="startAngle">Pie start angle.</param>
            <param name="sweepAngle">Pie sweep angle.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.PaintRect(System.Windows.Forms.PaintEventArgs,System.Drawing.RectangleF)">
            <summary>
            Draws the specified rectangle.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.PaintPath(System.Windows.Forms.PaintEventArgs,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Paints the specified path.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="path">Path to paint.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Line.PaintPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Paints the specified path.
            </summary>
            <param name="g">PaintEventArgs</param>
            <param name="path">Path to paint.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Line.Thickness">
            <summary>
            Sets or gets the thickness of the line.
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Line.Transparency">
            <summary>
            Sets or gets the transparency of the line.
            </summary>
            <remarks>
            Settings can range from 0 to 100%, where 0 is opaque and 100 is completely transparent.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Line.Color">
            <summary>
            Sets or gets the color used for the line.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Line.DashStyle">
            <summary>
            Sets or gets the pattern to use for the line.
            </summary>
            <value>DashStyle</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Line.DashPattern">
            <summary>
            Sets or gets the array pattern when using DashStyle.Custom.
            </summary>
            <value>DashPattern</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ILineCondition">
            <summary>
            ILineCondition interface contains properties and methods for
            supporting the conditional line properties concept. Developers can build custom
            line condition classes by implementing this interface. 
            </summary>
            <remarks>
            <para>
            This is similar to the <see cref="T:GraphicsServer.GSNet.Charting.IMarkerCondition"/>
            interface but applied to line properties instead of marker backgrounds.
            </para>
            <para>
            One can use the ILineCondition to color portions of a line differently depending
            on if the developer-defined conditions are met for those portions of the line.
            </para>
            </remarks>
            <example>
            See the example available in the <see cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddLineCondition(GraphicsServer.GSNet.Charting.ILineCondition)"/> method.
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ILineCondition.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32)">
            <summary>
            Checks the value(s) of each data point against the criteria of the
            line condition.
            </summary>
            <remarks>
            CheckCondition is called for each data point within the SeriesDrawing object
            with which the line condition object is associated. CheckCondition should return
            true if the data point passes the criteria of the check. If there are 
            multiple line condition objects associated to a SeriesDrawing object, then
            the data point is passed into each object starting at the front of the line condition
            object list. Once one of the line condition objects returns true, the check is halted 
            for that data point.
            </remarks>
            <param name="series">The <see cref="T:GraphicsServer.GSNet.SeriesData.Series">Series</see> 
            that contains the data that will be checked.</param>
            <param name="dataPoint">This integer defines which data point within the series holds the data 
            values to check.</param>
            <returns>True if the data point passes the line condition object's criteria.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddLineCondition(GraphicsServer.GSNet.Charting.ILineCondition)">AddLineCondition</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ILineCondition.Name">
            <summary>
            This property is the name of the line condition. 
            </summary>
            <remarks>
            Although it is not necessary to name line conditions, names may be useful
            for searching and finding specific line condition objects later.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ILineCondition.Line">
            <summary>
            Gets or sets the <see cref="T:GraphicsServer.GSNet.Charting.Line">Line</see>
            properties used to paint a line when its value(s) meet the criteria of the line condition.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.GreaterThanOrEqualYCheck">
            <summary>
            Supports conditional marker fills when Y component values are greater than or equal to a
            specified value.
            </summary>
            <example>
                The example below draws a trend line showing the mean value of a data series and
                creates a marker fill condition that colors a marker red if it is greater than or
                equal to the mean value.
                <code lang="CS" title="C# Example">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.SeriesData;
             
            private void Form1_Load(object sender, System.EventArgs e)
            {
                // create a trend object to show the mean
                TrendMean trendMN = new TrendMean(SeriesComponent.Y); 
              
                // configure the line 
                trendMN.LineProperties.Color = System.Drawing.Color.Blue; 
                trendMN.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot; 
                trendMN.LineProperties.Thickness = 2; 
             
                Chart cht = this.gsNetWinChart1.Chart; 
              
                // clear existing trends from the first series 
                cht.GetSeriesDrawing(0).RemoveAllTrends(); 
             
                // add the trend to the first series 
                int trendMNIndex = cht.GetSeriesDrawing(0).AddTrend(trendMN);
             
                // refresh the drawing (and calculate the trend)
                cht.RecalcLayout();
             
                // retrieve the trend object
                trendMN = (TrendMean) cht.GetSeriesDrawing(0).GetTrend(trendMNIndex);
             
                // get the calculated mean value
                double meanValue = trendMN.Mean;
             
                // create a condition that tests for values greater than or equal to the mean 
                GreaterThanOrEqualYCheck markerCondition = new GreaterThanOrEqualYCheck(meanValue); 
              
                // if the condition exists, color the marker red 
                markerCondition.MarkerFill.Color = Color.Red; 
              
                // add the condition to the first series in the list 
                cht.GetSeriesDrawing(0).AddMarkerCondition(markerCondition); 
              
                // run all marker condition tests 
                cht.ReconcileMarkerConditions(); 
            }
                </code>
            	<code lang="VB" title="VB Example">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.SeriesData
             
            Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
             
                ' create a trend object to show the mean
                Dim trendMN As TrendMean = New TrendMean(SeriesComponent.Y)
             
                ' configure the line 
                trendMN.LineProperties.Color = System.Drawing.Color.Blue
                trendMN.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
                trendMN.LineProperties.Thickness = 2
             
                Dim cht As Chart = Me.GsNetWinChart1.Chart
             
                ' clear existing trends from the first series 
                cht.GetSeriesDrawing(0).RemoveAllTrends()
             
                ' add the trend to the first series 
                Dim trendMNIndex As Integer = cht.GetSeriesDrawing(0).AddTrend(trendMN)
             
                ' refresh the drawing (and calculate the trend)
                cht.RecalcLayout()
             
                ' retrieve the trend object
                trendMN = CType(cht.GetSeriesDrawing(0).GetTrend(trendMNIndex), TrendMean)
             
                ' get the calculated mean value
                Dim meanValue As Double = trendMN.Mean
             
                ' create a condition that tests for values greater than or equal to the mean 
                Dim markerCondition As GreaterThanOrEqualYCheck = New GreaterThanOrEqualYCheck(meanValue)
             
                ' if the condition exists, color the marker red 
                markerCondition.MarkerFill.Color = Color.Red
             
                ' add the condition to the first series in the list 
                cht.GetSeriesDrawing(0).AddMarkerCondition(markerCondition)
             
                ' run all marker condition tests 
                cht.ReconcileMarkerConditions()
             
            End Sub
                </code>
            </example>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.MarkerConditionBase">
            <summary>
            This base class implements the <see cref="T:GraphicsServer.GSNet.Charting.IMarkerCondition"/>
            interface and provides a quick and easy means of creating custom marker
            condition objects.
            </summary>
            <remarks>
            Marker condition objects are used by instantiating the object, setting the
            object's criteria and then associating the marker condition object to
            a <see cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing"/> object or multiple SeriesDrawing object in a chart.
            After all the marker condition objects have been created and associated the
            <see cref="M:GraphicsServer.GSNet.Charting.Chart.ReconcileMarkerConditions"/> method is called to execute the tests.
            <para>A marker condition object can be associated to a SeriesDrawing class by call the
            <see cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddMarkerCondition(GraphicsServer.GSNet.Charting.IMarkerCondition)"/> method.  The SeriesDrawing
            class also provides other methods like <see cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveMarkerCondition(System.Int32)"/>, 
            <see cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllMarkerConditions"/> 
            and <see cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetMarkerCondition(System.Int32)"/>.
            </para>
            </remarks>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.IMarkerCondition">
            <summary>
            IMarkerCondition interface contains properties and methods for
            supporting the conditional marker fill concept. Developers can build custom
            marker condition classes by implementing this interface. 
            </summary>
            <remarks>
            Note that a base class exists in the library that already implements this
            interface. (See <see cref="T:GraphicsServer.GSNet.Charting.MarkerConditionBase"/>.)
            This class can be used as a base class when creating custom marker
            condition classes versus directly implementing the IMarkerCondition interface.
            <para>For additional information regarding the use of marker condition objects see
            the <see cref="T:GraphicsServer.GSNet.Charting.MarkerConditionBase"/> class.</para>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.IMarkerCondition.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)">
            <summary>
            Checks the value(s) of each data point against the criteria of the
            marker condition.
            </summary>
            <remarks>
            CheckCondition is called for each data point within the SeriesDrawing object
            with which the marker condition object is associated. CheckCondition should return
            true if the data point passes the criteria of the check. If there are 
            multiple marker condition objects associated to a SeriesDrawing object, then
            the data point is passed into each object starting at the front of the marker condition
            object list. Once one of the marker condition objects returns true, the check is halted 
            for that data point.
            </remarks>
            <param name="series">The <see cref="T:GraphicsServer.GSNet.SeriesData.Series">Series</see> 
            that contains the data that will be checked.</param>
            <param name="dataPoint">This int defines which data point within the series holds the data 
            values to check.</param>
            <param name="markerType">This is the <see cref="T:GraphicsServer.GSNet.Charting.MarkerType">MarkerType</see> 
            used to draw the series. The check may need to access data from a different 
            <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent">SeriesComponent</see>
            within the series based on the MarkerType.</param>
            <returns>True if the data point passes the marker condition object's criteria.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddMarkerCondition(GraphicsServer.GSNet.Charting.IMarkerCondition)">AddMarkerCondition</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.IMarkerCondition.Name">
            <summary>
            This property is the name of the marker condition. 
            </summary>
            <remarks>
            Although it is not necessary to name marker conditions, names may be useful
            for searching and finding specific marker condition objects later.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.IMarkerCondition.MarkerFill">
            <summary>
            Gets or sets the <see cref="T:GraphicsServer.GSNet.Charting.Background">Background</see>
            object used to paint a marker when its value(s) meet the criteria of the marker condition.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.MarkerConditionBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.MarkerConditionBase.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)">
            <summary>
            Override this method to provide custom criteria checking.
            <para>CheckCondition is called for each data point within the SeriesDrawing(s) object
            to which the marker condition object is associated.  CheckCondition should return
            true if the data point passes the criteria of the check.  If there are 
            multiple marker condition objects associated to a SeriesDrawing object then
            the data point is passed into each object starting at the front of the marker condition
            object list (see <see cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddMarkerCondition(GraphicsServer.GSNet.Charting.IMarkerCondition)"/>).
            Once one of the marker condition objects return true the check is halted for that
            data point.</para>
            </summary>
            <param name="series">The <see cref="T:GraphicsServer.GSNet.SeriesData.Series"/> that contains the 
            data that will be checked.</param>
            <param name="dataPoint">This int defines which data point within the series holds the data values to check.</param>
            <param name="markerType">This is the <see cref="T:GraphicsServer.GSNet.Charting.MarkerType"/> used
            to draw the series.  The check may need to access data from a differnet <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/>
            within the series based on the MarkerType.</param>
            <returns>Returns true if the data point passes the object's criteria.</returns>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerConditionBase.Name">
            <summary>
            This property is the name of the marker condition.  It may be useful to
            name instances of marker conditions to easily search and find the specific
            Marker Condition object later.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerConditionBase.MarkerFill">
            <summary>
            This <see cref="T:GraphicsServer.GSNet.Charting.Background"/> property
            provides access to the protected propBackground Background object.  Note
            that developers can override this property if desired.
            </summary>
            <remarks>
            An important note to remember is that this Background object is
            referenced by each data point that passes the criteria of this object.
            This means that cooresponding markers will all paint the same.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GreaterThanOrEqualYCheck.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GreaterThanOrEqualYCheck.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="val">Condition Value</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GreaterThanOrEqualYCheck.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)">
            <summary>
            see <see cref="M:GraphicsServer.GSNet.Charting.MarkerConditionBase.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)"/>
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GreaterThanOrEqualYCheck.GreaterThanValue">
            <summary>
            Condition Value.
            </summary>
            <value>double</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.GreaterThanYCheck">
            <summary>
            Supports conditional marker fills when Y component values exceed a specified limit.
            </summary>
            <example>
                The following example creates a condition object that checks for Y values greater
                than zero. Any markers that meet the test are colored red.
                <code lang="CS" title="C#">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.SeriesData;
             
            private void Form1_Load(object sender, System.EventArgs e)
            {
                // save some typing
                Chart chart = this.gsNetWinChart1.Chart;
             
                // make it a simple bar chart
                chart.ChartType = ChartType.Bar2D;
             
                // create a condition that tests for values greater than 0
                GreaterThanYCheck markerCondition = new GreaterThanYCheck(0);
             
                // if the condition exists, color the marker red
                markerCondition.MarkerFill.Color = Color.Red;
             
                // add the condition to the first series in the list
                chart.GetSeriesDrawing(0).AddMarkerCondition(markerCondition);
             
                // run all marker condition tests
                chart.ReconcileMarkerConditions();
            }
                </code>
            	<code lang="VB" title="VB">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.SeriesData
             
            Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
                ' save some typing
                Dim chart As Chart = Me.GsNetWinChart1.Chart
             
                ' make it a simple bar chart
                chart.ChartType = ChartType.Bar2D
             
                ' create a condition that tests for values greater than 0
                Dim markerCondition As GreaterThanYCheck = New GreaterThanYCheck(0)
             
                ' if the condition exists, color the marker red
                markerCondition.MarkerFill.Color = Color.Red
             
                ' add the condition to the first series in the list
                chart.GetSeriesDrawing(0).AddMarkerCondition(markerCondition)
             
                ' run all marker condition tests
                chart.ReconcileMarkerConditions()
            End Sub
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GreaterThanYCheck.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GreaterThanYCheck.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="val">Condition Value</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GreaterThanYCheck.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)">
            <summary>
            see <see cref="M:GraphicsServer.GSNet.Charting.MarkerConditionBase.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)"/>
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GreaterThanYCheck.GreaterThanValue">
            <summary>
            Condition Value.
            </summary>
            <value>double</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.InsideRangeYCheck">
            <base>GraphicsServer.GSNet.Charting.MarkerConditionBase</base>
            <summary>
            Supports conditional marker fills when Y component values are between 
            minimum and maximum values. This check can be inclusive (including the min and 
            max values) or exclusive.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.InsideRangeYCheck.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.InsideRangeYCheck.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="minVal">Min Value</param>
            <param name="maxVal">Max Value</param>
            <param name="inclusive">Inclusive check if true.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.InsideRangeYCheck.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)">
            <summary>
            see <see cref="M:GraphicsServer.GSNet.Charting.MarkerConditionBase.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)"/>
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.InsideRangeYCheck.MinRange">
            <summary>
            Min Value
            </summary>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.InsideRangeYCheck.MaxRange">
            <summary>
            Max Value
            </summary>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.InsideRangeYCheck.Inclusive">
            <summary>
            Check is inclusive if this value is set to true.
            </summary>
            <value>bool</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LessThanOrEqualYCheck">
            <base>GraphicsServer.GSNet.Charting.MarkerConditionBase</base>
            <summary>
            Supports conditional marker fills when Y component values are less than or equal to a 
            specified value.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LessThanOrEqualYCheck.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LessThanOrEqualYCheck.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="val">Condition Value</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LessThanOrEqualYCheck.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)">
            <summary>
            see <see cref="M:GraphicsServer.GSNet.Charting.MarkerConditionBase.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)"/>
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LessThanOrEqualYCheck.LessThanValue">
            <summary>
            Condition Value.
            </summary>
            <value>double</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LessThanYCheck">
            <summary>
            Supports conditional marker fills when Y component values are less than a
            specified value.
            </summary>
            <example>
                The following example creates a conditional object that checks for Y values less
                than 100. Data markers for any values that meet this test are colored yellow.
                <code lang="CS" title="Using marker conditions">
            // Assume there are two created series and add them to the chart
            this.gsNetWinChart1.Chart.AddSeries(s1);
            this.gsNetWinChart1.Chart.AddSeries(s2);
                        
            // Next create the check object
            LessThanYCheck check = new LessThanYCheck(100);
             
            // Set the color if the condition passes
            check.MarkerFill.Color = Color.Yellow;
             
            // Add the condition to the series drawing objects
            this.gsNetWinChart1.Chart.GetSeriesDrawing(0).AddMarkerCondition(check);
            this.gsNetWinChart1.Chart.GetSeriesDrawing(1).AddMarkerCondition(check);
             
            // Now tell the chart to run the tests and display the results
            this.gsNetWinChart1.Chart.ReconcileMarkerConditions();
                </code>
            	<code lang="VB" title="Using marker conditions">
            ' Assume there are two created series and add them to the chart
            Me.GsNetWinChart1.Chart.AddSeries(s1)
            Me.GsNetWinChart1.Chart.AddSeries(s2)
             
            ' Next create the check object
            Dim check As LessThanYCheck = New LessThanYCheck(100)
             
            ' Set the color if the condition passes
            check.MarkerFill.Color = Color.Yellow
             
            ' Add the condition to the series drawing objects
            Me.GsNetWinChart1.Chart.GetSeriesDrawing(0).AddMarkerCondition(check)
            Me.GsNetWinChart1.Chart.GetSeriesDrawing(1).AddMarkerCondition(check)
             
            ' Now tell the chart to run the tests and display the results
            Me.GsNetWinChart1.Chart.ReconcileMarkerConditions()
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LessThanYCheck.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LessThanYCheck.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="val">Condition Value</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LessThanYCheck.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)">
            <summary>
            see <see cref="M:GraphicsServer.GSNet.Charting.MarkerConditionBase.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)"/>
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LessThanYCheck.LessThanValue">
            <summary>
            Condition Value.
            </summary>
            <value>double</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.OutsideRangeYCheck">
            <base>GraphicsServer.GSNet.Charting.MarkerConditionBase</base>
            <summary>
            Supports conditional marker fills when Y component values are outside a
            specified range. This check can be inclusive (including the min and 
            max values) or exclusive.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.OutsideRangeYCheck.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.OutsideRangeYCheck.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="minVal">Min Value</param>
            <param name="maxVal">Max Value</param>
            <param name="inclusive">Inclusive check if true.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.OutsideRangeYCheck.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)">
            <summary>
            see <see cref="M:GraphicsServer.GSNet.Charting.MarkerConditionBase.CheckCondition(GraphicsServer.GSNet.SeriesData.Series,System.Int32,GraphicsServer.GSNet.Charting.MarkerType)"/>
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.OutsideRangeYCheck.MinRange">
            <summary>
            Min value for the range.
            </summary>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.OutsideRangeYCheck.MaxRange">
            <summary>
            Max value for the range.
            </summary>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.OutsideRangeYCheck.Inclusive">
            <summary>
            Check is inclusive if this value is set to true.
            </summary>
            <value>bool</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.IPropertyPage">
            <summary>
            All property pages displayed via the <see cref="M:GraphicsServer.GSNet.Charting.Chart.DisplayChartPropertySheet(System.Boolean,System.Collections.ArrayList,System.Boolean,System.Windows.Forms.TabPage)"/> methods
            implement the IPropertyPage interface.  These interface methods are used to keep all property
            pages sychronized with the page being modified by the user.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.DisplayChartPropertySheet(System.Boolean,System.Collections.ArrayList,System.Boolean,System.Windows.Forms.TabPage)">DisplayChartPropertySheet Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.IPropertyPage.UpdatePage">
            <summary>
            Called by the property sheet dialog in response to the active property page calling 
            the <see cref="M:GraphicsServer.GSNet.Charting.GSNetPropertySheet.UpdatePages"/> method
            in the <see cref="T:GraphicsServer.GSNet.Charting.GSNetPropertySheet"/> class, which hosts all
            the property pages.
            </summary>
            <remarks>
            Note that this method will get called when your property page is inactive due to another
            property page modifying properties.  If your property page is modifying properties that
            other pages modify, then use this method to check to see if any of your cached property values
            have been modified and then refresh these values.
            <para>Also note that anytime a user modifies a value on your property page you should
            call the <see cref="M:GraphicsServer.GSNet.Charting.GSNetPropertySheet.UpdatePages"/> method in the 
            property sheet dialog.  This will notify all other pages that values have changed.</para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetPropertySheet">GSNetPropertySheet Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.IPropertyPage.InitPage(GraphicsServer.GSNet.Charting.Chart,GraphicsServer.GSNet.Charting.GSNetPropertySheet)">
            <summary>
            Called when the property page is added to the property sheet dialog.
            </summary>
            <remarks>
            Use this method to cache references to the passed in parameters.
            </remarks>
            <param name="c">The chart object that is being modified by the property page.</param>
            <param name="sheet">The property sheet dialog that is hosting the property page.</param>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.AnnotationPage.components">
            Required designer variable.
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.GSNetPropertySheet">
            <summary>
            Displays the various property pages that modify chart properties.
            </summary>
            <remarks>
            This dialog can be used directly but it is best to use
            it indirectly via the <see cref="M:GraphicsServer.GSNet.Charting.Chart.DisplayChartPropertySheet(System.Boolean,System.Collections.ArrayList,System.Boolean,System.Windows.Forms.TabPage)"/> methods
            in the chart object.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.DisplayChartPropertySheet(System.Boolean,System.Collections.ArrayList,System.Boolean,System.Windows.Forms.TabPage)">DisplayChartPropertySheet Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetPropertySheet.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetPropertySheet.SetStartPage(System.Windows.Forms.TabPage)">
            <summary>
            Sets the initial StartPage in the dialog. 
            </summary>
            <remarks>Note that the specified TabPage must already exist as a property page in the dialog.
            </remarks>
            <param name="startPage">The property page that will have focus when the dialog displays.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetPropertySheet.UpdatePages">
            <summary>
            Walks all property pages and notifies them that data has changed.
            </summary>
            <remarks>
            All property pages should call this method when they modify data that may 
            also exist on other property pages.  This method walks all the property
            pages and notifies them that data has changed by calling the
            <see cref="M:GraphicsServer.GSNet.Charting.IPropertyPage.UpdatePage"/> method in the 
            <see cref="T:GraphicsServer.GSNet.Charting.IPropertyPage"/> interface.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.IPropertyPage.UpdatePage">IPropertyPage.UpdatePage Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetPropertySheet.AddPage(System.Windows.Forms.TabPage)">
            <summary>
            Adds the property page to the dialog.  
            </summary>
            <remarks>
            Note that the property page must implement the 
            <see cref="T:GraphicsServer.GSNet.Charting.IPropertyPage"/> interface.
            If it does not an exception will be thrown.
            </remarks>
            <param name="tp">The property page to add to the dialog.</param>
            <exception cref="T:System.Exception">The property page does not implement the IPropertyPage interface.</exception>
            <seealso cref="T:GraphicsServer.GSNet.Charting.IPropertyPage">IPropertyPage Interface</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TextFormatDlg">
            <summary>
            The TextFormatDlg dialog allows a user to format text using a visual dialog
            rather than setting all properties through code.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ColorList">
            <summary>
            This class is simply a wrapper around the array list that contains a
            list of Colors.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ColorList.GetColor(System.Int32)">
            <summary> 
            Return the annotation at the specified index.
            </summary>
            <param name="index">zero based index.</param>
            <returns>Color object or null if index does not contains an object.</returns>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.FieldSourceDialog">
            <summary>
            The FieldSourceDialog dialog allows a user to configure a field 
            from a database to use as the chart's data. This visual dialog
            is easier to set as compared to setting all properties through code.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.OleDBConnect">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            The OleDBConnect object is a design time object.  Its purpose is to allow the user, 
            in design time, to create a connection to an OleDb datasource.
            Once a connection is created, and there are SeriesDrawing objects in the
            the SeriesDrawingList, the user can then connect the fields in the OleDb connection
            to components in the SeriesDrawing objects via the FieldSource property.
            </summary>
            <remarks>Note that this design time object allows only a single OleDb connection to exist.
            Behind the scenes, an OleDBDataProvider object is allocated to provide this access.
            If you require multiple connections, you can create multiple OleDBDataProvider objects
            directly in the code behind pages.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.OleDBConnect.ConnectString">
            <summary>
            This property contains any valid OleDb connection string.  See
            the OleDB references for proper connection string syntax.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.OleDBConnect.SelectString">
            <summary>
            This property contains the selection string used by an OleDB data source.
            See the OleDB references for proper select string syntax based on the chosen
            OleDB data source type.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.OleDBConnect.FieldSource">
            <summary>
            The purpose of the FieldSource property is to allow the user to pop
            up the field source dialog, which displays a list of existing Series 
            objects (that live in the existing SeriesDrawingList wrapped inside of 
            SeriesDrawing objects).  When a Series object is selected in this dialog,
            the user can then enter field names from the OleDb connection into the 
            various components for the series. 
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.PaletteType">
            <summary>
            Enumerates the preset color palettes that can be applied to SeriesDrawing objects
            in the chart.
            </summary>
            <remarks>
            Setting a palette via this enumeration empties the colors from the
            SeriesDefault.MarkerColorList and then populates the MarkerColorList with colors from
            the specified palette. After the list has been populated, the colors in it can be
            modified.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.SeriesDefaults.MarkerColorList">MarkerColorList Property</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.SeriesDefaults">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            Encapsulates and applies default property settings to each SeriesDrawing object
            that is created when a new series is added to the chart.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDefaults.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDefaults.SetDefaultSeriesDrawingProperties(GraphicsServer.GSNet.Charting.SeriesDrawing,System.Int32,GraphicsServer.GSNet.Charting.ChartType)">
            <summary>Apply the SeriesDefaults object to an existing SeriesDrawing object.</summary>
            <remarks>
            	<para>If the current setting of the SeriesDefaultsEnabled property is True, this
                method applies the defaults set in the SeriesDefaults objet to to the provided
                SeriesDrawing object.</para>
            	<para>Note that ChartType is one of the parameters for this method. That is because
                the method must know the ChartType when setting the default properties to produce a
                readable chart. For example, if the ChartType is Scatter2D and the SymbolsOn
                property is set to false, then this method ignores the SymbolsOn property.
                Otherwise you would not see any of the scatter symbols.</para>
            </remarks>
            <param name="seriesDrawing">The SeriesDrawing object for which to set the default properties.</param>
            <param name="index">The index of the SeriesDrawing object in the series list. This is a 0 based index.</param>
            <param name="chartType">The ChartType of the chart that will display the SeriesDrawing.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDefaults.SetDefaultColors(GraphicsServer.GSNet.Charting.SeriesDrawing,System.Int32)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.PaletteType">
            <summary>Fills the MarkerColorList with a palette of colors.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.PaletteType"/></value>
            <remarks>
            Once a palette has been selected, the user can go to the MarkerColorList property
            and add, delete or modify any color that has been placed in the list by the palette
            selection.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.SeriesDefaults.PaletteType">PaletteType Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.MarkerColorList">
            <summary>
            Gets a ColorList object that maintains an array of colors that will be applied to
            SeriesDrawing objects.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.ColorList"/></value>
            <remarks>
            	<para>Colors in the list are applied, in turn, to each SeriesDrawing object in the
                chart's SeriesDrawingList and to each new SeriesDrawing object that is added to the
                chart. The first color in the MarkerColorList is applied to the first SeriesDrawing
                object in the chart's SeriesDrawingList, the second color to the second
                SeriesDrawing object, and so on.</para>This list of colors is modified whenever a
                predefined PaletteType is selected. After selecting a palette, you can add, delete,
                or modify colors in the MarkColorList. 
                <para>If the list is empty, a default set of colors is used.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.SeriesDefaults.PaletteType">PaletteType Property</seealso>
            <example>
                The following code fragment empties the color list and loads a new set of colors. 
                <code lang="CS" title="[C# Example]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Empty the color list
            cht.SeriesDefaults.MarkerColorList.Clear();
            // Add colors for first 9 markers
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(255,94,94));
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(255,157,85));
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(255,229,74));
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(50,205,50));
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(85,183,255));
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(247,242,212));
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(74,100,255));
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(255,255,238));
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(212,217,247));
                </code>
            	<code lang="VB" title="[VB Example]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Empty the color list
            cht.SeriesDefaults.MarkerColorList.Clear()
            ' Add colors for first 9 markers
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(255, 94, 94))
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(255, 157, 85))
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(255, 229, 74))
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(50, 205, 50))
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(85, 183, 255))
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(247, 242, 212))
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(74, 100, 255))
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(255, 255, 238))
            cht.SeriesDefaults.MarkerColorList.Add(Color.FromArgb(212, 217, 247))
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.SeriesDefaultsEnabled">
            <summary>
            Controls whether property settings for the SeriesDefaults object are applied as
            new SeriesDrawing objects are added to the chart.
            </summary>
            <remarks>
                If set to true, the properties defined within the SeriesDefaults object are applied
                to each series as the series is added to the chart. 
                <para><strong>Note</strong>: Setting this property to false does not disable either the 
                PaletteType property or the MarkerColorList property.</para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.MarkerFillType">
            <summary>
            Gets and sets the default marker fill appearance.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.MarkerFillType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.MarkerOutlineThickness">
            <summary>
            Gets and sets the default thickness for the marker outline when marker
            outlines are enabled.
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.MarkerLineThickness">
            <summary>
            Gets and sets the default thickness for line markers.
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.SymbolType">
            <summary>
            Gets and sets the default appearance of symbols when symbols are turned
            on.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.SymbolType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.SymbolLineThickness">
            <summary>
            Gets and sets the default thickness for symbol pattern lines.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.SymbolSize">
            <summary>
            Gets and sets the default symbol size.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.MarkerOutlineEnabled">
            <summary>Controls whether or not outlines are drawn around markers.</summary>
            <value>bool</value>
            <remarks>
            Setting this property to true turns on outlines for all SeriesDrawing objects
            that have been added or will be added to the chart.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.MarkerLabelsOn">
            <summary>
            Controls whether or not marker labels are displayed.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.SymbolsOn">
            <summary>
            Controls whether symbols are turned on by default.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.LinesOn">
            <summary>
            Controls whether lines are turned on by default.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.SticksOn">
            <summary>Controls whether sticks are turned on by default.</summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.GradientStyle">
            <summary>
            Gets and set default marker fill gradient style.  
            </summary>
            <remarks>The gradient style is used when the default
            <see cref="P:GraphicsServer.GSNet.Charting.SeriesDefaults.MarkerFillType"/> is set to Gradient.
            See the <see cref="T:GraphicsServer.GSNet.Charting.GradientType"/> enumeration for the types that
            are supported.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.GradientType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaults.PatternStyle">
            <summary>
            Gets and set default marker fill pattern style.  
            </summary>
            <remarks>The marker fill pattern style is used when the default
            <see cref="P:GraphicsServer.GSNet.Charting.SeriesDefaults.MarkerFillType"/> is set to Pattern.</remarks>
            <value>System.Drawing.Drawing2D.HatchStyle</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.SeriesDefaultChangedEventArgs">
            <summary>
            The ChartSelectionChangedEventArgs object is passed back when a chart 
            object's selection state has changed.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDefaultChangedEventArgs.#ctor(GraphicsServer.GSNet.Charting.SeriesDefaultItem)">
            <summary>
            Default Constructor:
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDefaultChangedEventArgs.SeriesDefaultItem">
            <summary>
            If this value is true then the object is being selected.  If
            false then the object is being unselected.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.MarkerFillType">
            <summary>
            The SeriesDefault object supports several default marker fill types.
            This enum allows the user to specify a default marker fill type.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerFillType.Solid">
            <summary>
            Default markers to fill as a solid color.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerFillType.Gradient">
            <summary>
            Default markers to fill as a gradient.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.MarkerFillType.Pattern">
            <summary>
            Default markers to fill as a pattern.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.SeriesDrawing">
            <summary>
            	<para>Supports the visual display of data on a chart. For example, you can use the
                MarkerType property of a SeriesDrawing object to select whether datapoints are
                represented by lines or bars or by some other marker. You can use the
                MarkerLabelsOn property to display labels for datapoints. And you can use the
                SetUserMarkerLabel() method to override the default label for a particular data
                point.</para>
            </summary>
            <remarks>
            Nothing that you do to a SeriesDrawing object has any effect on the underlying
            data. In Graphics Server .NET, data is stored in a Series object and the display 
            characteristics for the data are stored in a separate SeriesDrawing object. When a 
            Series object is added to a chart, a SeriesDrawing object is allocated and the Series
            object is placed inside it. The SeriesDrawing object then exposes properties and methods 
            that control how the Series object's data is displayed when the chart renders. Once the 
            SeriesDrawing object has been allocated, it is placed inside the chart object's SeriesDrawingList
            property, which, as the name implies, simply lists the SeriesDrawing objects associated with 
            the chart.
            <para>Series objects (which contain data for a series) are independent of SeriesDrawing 
            objects (which contain display characteristics for data). You can add the same Series
            object simultaneously to several charts. In each case, the Series object will be
            encapsulated by a different SeriesDrawing object, which may or may not have different
            display characteristics from all the other SeriesDrawing objects that are associated with
            the same data. Thus one set of data can be rendered differently on many different charts.</para>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.ShouldSerializeColorCloseHigher">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.ResetColorCloseHigher">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.ShouldSerializeColorCloseLower">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.ResetColorCloseLower">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.#ctor">
            <summary>
            Constructor.  Do not allocate this object directly.  Add the Series object
            to the chart via the Chart.AddSeries() method.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.AddSeries(GraphicsServer.GSNet.SeriesData.Series)">AddSeries Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.#ctor(GraphicsServer.GSNet.SeriesData.Series)">
            <summary>
            Constructor.  Do not allocate this object directly.  Add the Series object
            to the chart via the Chart.AddSeries() method.
            </summary>
            <param name="s">A Series.</param>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.AddSeries(GraphicsServer.GSNet.SeriesData.Series)">AddSeries Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllMarkerConditionFills">
            <summary>Removes all marker fill overrides generated by marker condition checks.</summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.ReconcileMarkerConditions">ReconcileMarkerConditions Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetMarkerConditionFill(System.Int32)">
            <summary>
            Retrieves the Background object that is the conditional marker override for a 
            specific data point.
            </summary>
            <remarks>
            If a data point meets a marker condition, the background for its marker is overridden 
            by the background specified in the marker condition object's MarkerFill property.
            </remarks>
            <param name="dataPoint">Index of data point to retrieve.</param>
            <returns>Background object or null if no override exists.</returns>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllDataPointMarkerFill">
            <summary>
            Removes all marker fill overrides that have been set by calling the
            SetDataPointMarkerFill() method.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetDataPointMarkerFill(System.Int32,GraphicsServer.GSNet.Charting.Background)">SetDataPointMarkerFill Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllHiddenDataPoint">
            <summary>
            Removes all the hidden data points that have been set by calling the
            HideDataPoint() method.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.HideDataPoint(System.Int32)">HideDataPoint Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllDataPointExplodes">
            <summary>
            Removes all exploded data point overrides that have been set by calling the
            SetDataPointExplode method.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetDataPointExplode(System.Int32,System.Int32)">SetDataPointExplode Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllMarkerLabelOverrides">
            <summary>
            Removes all user-defined marker label overrides that have been set by calling the
            SetUserMarkerLabel() method.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetUserMarkerLabel(System.Int32,System.Object)">SetUserMarkerLabel Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllMarkerUrlOverrides">
            <summary>
            Removes all user-defined marker URL overrides that have been set by calling the
            SetUserMarkerUrl() method.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetUserMarkerUrl(System.Int32,System.Object)">SetUserMarkerUrl Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllMarkerToolTipOverrides">
            <summary>
            Removes all the user defined marker ToolTip overrides that have been set via
            the SetUserMarkerToolTip() method.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllMarkerExtraStringOverrides">
            <summary>
            Removes all user-defined marker Extra String overrides that have been set by
            calling the SetUserMarkerExtraString() method.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetUserMarkerExtraString(System.Int32,System.Object)">SetUserMarkerExtraString Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddTrend(GraphicsServer.GSNet.Charting.TrendBase)">
            <summary>Adds a trend object to the SeriesDrawing object.</summary>
            <remarks>A given SeriesDrawing object can have many associated trend objects.</remarks>
            <returns>An index into the trend list for the added trend.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveTrend(System.Int32)">RemoveTrend Method</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TrendBase">TrendBase Class</seealso>
            <example>
                The following example adds a moving average trend to the first data series on the
                chart. 
                <code lang="CS" title="C# Example]">
            /* Create a moving average trend object 
             * that averages Y component data in  
             * sets of three consecutive data points */
            TrendMovingAvgMid trendMovAvg = new TrendMovingAvgMid(SeriesComponent.Y, 3);
             
            // Configure the line
            trendMovAvg.LineProperties.Color = System.Drawing.Color.OrangeRed;
            trendMovAvg.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid;
            trendMovAvg.LineProperties.Thickness = 4;
             
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clear existing trends from the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends();
             
            // Add the trend to the first series
            int trendMovAvgIndex = cht.GetSeriesDrawing(0).AddTrend(trendMovAvg);
                </code>
            	<code lang="VB" title="[VB Example]">
            ' Create a moving average trend object
            ' that averages Y component data in  
            ' sets of three consecutive data points 
            Dim trendMovAvg As TrendMovingAvgMid = New TrendMovingAvgMid(SeriesComponent.Y, 3)
             
            'Configure the line
            trendMovAvg.LineProperties.Color = System.Drawing.Color.OrangeRed
            trendMovAvg.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid
            trendMovAvg.LineProperties.Thickness = 4
             
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clear existing trends from the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends()
             
            ' Add the trend to the first series
            Dim trendMovAvgIndex As Integer = cht.GetSeriesDrawing(0).AddTrend(trendMovAvg)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveTrend(System.Int32)">
            <summary>Removes a trend object from the SeriesDrawing object.</summary>
            <param name="index">Index of trend object in the trend list to remove.</param>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllTrends">RemoveAllTrends Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddTrend(GraphicsServer.GSNet.Charting.TrendBase)">AddTrend Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllTrends">
            <summary>
            Removes all the trends that have been added via the AddTrend() method.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveTrend(System.Int32)">RemoveTrend Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetTrend(System.Int32)">
            <summary>Retrieves the trend object at the specified index.</summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TrendBase">TrendBase Class</seealso>
            <example>
                The following example searches for a trend of TrendType.Mean and, if one is found,
                changes its line properties. 
                <code lang="CS" title="[C#]">
            // Cycle through the SeriesDrawingList
            foreach (SeriesDrawing s in this.gsNetWinChart1.Chart.SeriesDrawingList)
            {
                //Find a SeriesDrawing that has trends
                if (s.TrendCount &gt; 0)
                {
                    // Check each trend
                    for (int i = 0; i &lt; s.TrendCount; i++)
                    {
                        // If it's our type...
                        if (s.GetTrend(i).Trendtype == TrendType.Mean)
                        {
                            // Change the color and thickness of the line
                            TrendBase t = s.GetTrend(i);
                            t.LineProperties.Color = Color.Blue;
                            t.LineProperties.Thickness = 4;
                
                        }
                    }
                }
            }
            // Redraw the chart
            this.gsNetWinChart1.Chart.ReconcileAndRecalcAll();
                </code>
            	<code lang="VB" title="[VB]">
            Dim i As Integer
            ' Cycle through the SeriesDrawingList
            For Each s As SeriesDrawing In Me.GsNetWinChart1.Chart.SeriesDrawingList
                ' Find a SeriesDrawing that has trends
                If s.TrendCount &gt; 0 Then
                    ' Check each trend
                    For i = 0 To (s.TrendCount - 1)
                        ' If it's our type...
                        If s.GetTrend(i).Trendtype = TrendType.Mean Then
                            ' Change the color and thickness of the line
                            Dim t As TrendBase = s.GetTrend(i)
                            t.LineProperties.Color = Color.Blue
                            t.LineProperties.Thickness = 4
                        End If
                    Next
                End If
            Next
            ' Redraw the chart
            Me.GsNetWinChart1.Chart.ReconcileAndRecalcAll()
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddMarkerCondition(GraphicsServer.GSNet.Charting.IMarkerCondition)">
            <summary>
            Adds a marker condition object to the SeriesDrawing object.  
            </summary>
            <remarks>
            A given SeriesDrawing object can have many associated marker condition
            objects.
            </remarks>
            <returns>An index into the marker condition list for the added marker condition object.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveMarkerCondition(System.Int32)">RemoveMarkerCondition Method</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.IMarkerCondition">IMarkerCondition Interface</seealso>
            <example>
                The following example creates a marker condition object, adds it to the list, and
                runs all existing condition checks.
                <code lang="CS" title="C#">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.SeriesData;
             
            private void Form1_Load(object sender, System.EventArgs e)
            {
                // save some typing
                Chart chart = this.gsNetWinChart1.Chart;
             
                // make it a simple bar chart
                chart.ChartType = ChartType.Bar2D;
             
                // create a condition that tests for values greater than 0
                GreaterThanYCheck markerCondition = new GreaterThanYCheck(0);
             
                // if the condition exists, color the marker red
                markerCondition.MarkerFill.Color = Color.Red;
             
                // add the condition to the first series in the list
                chart.GetSeriesDrawing(0).AddMarkerCondition(markerCondition);
             
                // run all marker condition tests
                chart.ReconcileMarkerConditions();
            }
                </code>
            	<code lang="VB" title="VB">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.SeriesData
             
            Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
                ' save some typing
                Dim chart As Chart = Me.GsNetWinChart1.Chart
             
                ' make it a simple bar chart
                chart.ChartType = ChartType.Bar2D
             
                ' create a condition that tests for values greater than 0
                Dim markerCondition As GreaterThanYCheck = New GreaterThanYCheck(0)
             
                ' if the condition exists, color the marker red
                markerCondition.MarkerFill.Color = Color.Red
             
                ' add the condition to the first series in the list
                chart.GetSeriesDrawing(0).AddMarkerCondition(markerCondition)
             
                ' run all marker condition tests
                chart.ReconcileMarkerConditions()
            End Sub
                </code>
            </example>
            <param name="markerCondition">Any object that implements the <see cref="T:GraphicsServer.GSNet.Charting.IMarkerCondition"/> interface.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddLineCondition(GraphicsServer.GSNet.Charting.ILineCondition)">
            <summary>
            Adds a line condition object to the SeriesDrawing object.
            </summary>
            <remarks>
            A given SeriesDrawing object can have many associated line condition
            objects.
            </remarks>
            <returns>An index into the line condition list for the added line condition object.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveLineCondition(System.Int32)">RemoveLineCondition Method</seealso>
            <example>
                This example will create a 100-data point line chart, and all data points above the
                y-value of 55 will be drawn using an orange-colored dot-dash line. 
                <code lang="CS" title="C# Example">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.SeriesData;
            using System.Drawing.Drawing2D;
             
            public class Form1 : System.Windows.Forms.Form
            {
            private void Form1_Load(object sender, System.EventArgs e)
            {
            Chart chart = this.gsNetWinChart1.Chart;
             
            // 2D line chart
            chart.ChartType = ChartType.Line2D;
             
            // assign some chart data
            Series ser = new Series();
            for(int i = 0; i &lt;= 100; i++)
            {
            ser.SetValue(SeriesComponent.Y, i, i);
            }
            chart.RemoveAllSeries();
            int serIndex = chart.AddSeries(ser);
             
            chart.Grid.AxisX.MajorTickCount = 10; // only allow 10 x-axis ticks
            chart.Grid.AxisX.MajorTickInterval = 0; // set to 0 when using MajorTickCount
             
            // now assign our Line Condition
            // we'll make all values above 55 a different color (orange)
            AboveLimitCondition lineCond1 = new AboveLimitCondition(55);
            lineCond1.Line.Color = Color.Orange; // change line color
            lineCond1.Line.DashStyle = DashStyle.DashDot; // change line style too
             
            // add line condition to the series
            chart.GetSeriesDrawing(serIndex).AddLineCondition(lineCond1);
             
            // ****************************************************
            // **** Important: we must refresh line conditions ****
            // ****************************************************
            chart.ReconcileLineConditions();
             
            // refresh chart
            chart.RecalcLayout();
            }
            }
             
            public class AboveLimitCondition : ILineCondition
            {
            #region Fields
            private double limitValue;
            #endregion Fields
             
            #region Constructor
            public AboveLimitCondition(double limit)
            {
            this.limitValue = limit;
            }
            #endregion Constructor
             
            #region ILineCondition Members
            public bool CheckCondition(Series series, int dataPoint)
            {
            // check to see if the data point passed in is above the limit value,
            // and if it is then return true (which will use our LimitLine instead of the series' line)
            bool returnValue = false;
             
            if (series.GetValue(SeriesComponent.Y, dataPoint) &gt; this.limitValue)
            {
            returnValue = true;
            }
             
            return returnValue;
            }
             
            private Line propLine = new Line(Color.Red, 1.0F);
            public Line Line
            {
            get
            {
            return propLine;
            }
            set
            {
            propLine = value;
            }
            }
             
            private string propName = string.Empty;
            public string Name
            {
            get
            {
            return propName;
            }
            set
            {
            propName = value;
            }
            }
            #endregion
            }
                </code>
            	<code lang="VB" title="VB Example">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.SeriesData
                    ///
            Public Class Form1
            Inherits System.Windows.Forms.Form
                    ///
            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
            Dim chart As Chart = Me.GsNetWinChart1.Chart
                    ///
            ' 2D line chart
            chart.ChartType = ChartType.Line2D
                    ///
            ' assign some chart data
            Dim ser As Series = New Series
            Dim i As Integer
            For i = 0 To 100
            ser.SetValue(SeriesComponent.Y, i, i)
            Next
            chart.RemoveAllSeries()
            Dim serIndex As Integer
            serIndex = chart.AddSeries(ser)
                    ///
            chart.Grid.AxisX.MajorTickCount = 10 ' only allow 10 x-axis ticks
            chart.Grid.AxisX.MajorTickInterval = 0 ' set to 0 when using MajorTickCount
                    ///
            ' now assign our Line Condition
            ' we'll make all values above 55 a different color (orange)
            Dim lineCond1 As AboveLimitCondition = New AboveLimitCondition(55)
            lineCond1.Line.Color = Color.Orange ' change line color
            lineCond1.Line.DashStyle = Drawing2D.DashStyle.DashDot ' change line style too
                    ///
            ' add line condition to the series
            chart.GetSeriesDrawing(serIndex).AddLineCondition(lineCond1)
                    ///
            ' ****************************************************
            ' **** Important: we must refresh line conditions ****
            ' ****************************************************
            chart.ReconcileLineConditions()
                    ///
            ' refresh chart
            chart.RecalcLayout()
            End Sub
            End Class
                    ///
                    ///
            Public Class AboveLimitCondition
            Implements GraphicsServer.GSNet.Charting.ILineCondition
                    ///
            #Region "Fields"
            Private limitValue As Double
            #End Region   '"Fields"
                    ///
            #Region "Constructor"
            Public Sub New(ByVal limit As Double)
            Me.limitValue = limit
            End Sub
            #End Region   '"Constructor"
                    ///
            #Region "ILineCondition Members"
            Public Function CheckCondition(ByVal series As Series, ByVal dataPoint As Integer) As Boolean Implements ILineCondition.CheckCondition
            ' check to see if the data point passed in is above the limit value,
            ' and if it is then return true (which will use our LimitLine instead of the series' line)
            Dim returnValue As Boolean = False
                    ///
            If series.GetValue(SeriesComponent.Y, dataPoint) &gt; Me.limitValue Then
            returnValue = True
            End If
                    ///
            Return returnValue
            End Function
                    ///
            Private propLine As Line = New Line(Color.Red, 1.0F)
            Public Property Line() As Line Implements ILineCondition.Line
            Get
            Return Me.propLine
            End Get
            Set(ByVal Value As Line)
            Me.propLine = Value
            End Set
            End Property
                    ///
            Private propName As String = String.Empty
            Public Property Name() As String Implements ILineCondition.Name
            Get
            Return propName
            End Get
            Set(ByVal Value As String)
            propName = Value
            End Set
            End Property
            #End Region '"ILineCondition Members"
            End Class
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveMarkerCondition(System.Int32)">
            <summary>
            Removes the marker condition object from the SeriesDrawing object.  
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllMarkerConditions">RemoveAllMarkerConditions Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddMarkerCondition(GraphicsServer.GSNet.Charting.IMarkerCondition)">AddMarkerCondition Method</seealso>
            <param name="index">Index of marker condition object to remove.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveLineCondition(System.Int32)">
            <summary>
            Removes the line condition object from the SeriesDrawing object.  
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllLineConditions">RemoveAllLineConditions Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddLineCondition(GraphicsServer.GSNet.Charting.ILineCondition)">AddLineCondition Method</seealso>
            <param name="index">Index of line condition object to remove.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllMarkerConditions">
            <summary>
            Removes all marker condition objects added by AddMarkerCondition().
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddMarkerCondition(GraphicsServer.GSNet.Charting.IMarkerCondition)">AddMarkerCondition Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveMarkerCondition(System.Int32)">RemoveMarkerCondition Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveAllLineConditions">
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddLineCondition(GraphicsServer.GSNet.Charting.ILineCondition)">AddLineCondition()</seealso>
            <summary>
            Removes all line condition objects added by <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddLineCondition(GraphicsServer.GSNet.Charting.ILineCondition)">AddLineCondition()</seealso>.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.RemoveLineCondition(System.Int32)">RemoveLineCondition Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetMarkerCondition(System.Int32)">
            <summary>
            Retrieves the marker condition object at the specified index.
            </summary>
            <param name="index">Index of marker condition object in the list.</param>
            <returns><see cref="T:GraphicsServer.GSNet.Charting.IMarkerCondition"/> </returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddMarkerCondition(GraphicsServer.GSNet.Charting.IMarkerCondition)">AddMarkerCondition Method</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.IMarkerCondition">IMarkerCondition Interface</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetMarkerConditionCount">
            <summary>
            Retrieves the number of marker conditions associated with the series.
            </summary>
            <returns>The number of marker conditions associated with the series.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetLineCondition(System.Int32)">
            <summary>
            Retrieves the line condition object at the specified index.
            </summary>
            <param name="index">Index of the line condition object in the list.</param>
            <returns><see cref="T:GraphicsServer.GSNet.Charting.ILineCondition"/></returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddLineCondition(GraphicsServer.GSNet.Charting.ILineCondition)">AddLineCondition Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetLineConditionCount">
            <summary>
            Retrieves the number of line conditions associated with the series.
            </summary>
            <returns>The number of line conditions associated with the series.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetUserMarkerLabel(System.Int32)">
            <summary>
            Retrieves the user marker label override for the specified data point.
            </summary>
            <param name="dataPoint">Data point to retrieve override for.</param>
            <returns>Object associated with data point.  Null if none exists.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetUserMarkerLabel(System.Int32,System.Object)">
            <summary>
            Sets a user marker label override for the specified data point.</summary>
            <remarks>
            	<para>The override can be a number or a string.</para>
            	<para>Note that many Recalc operations, such as changing the ChartType, are
                destructive and reset all SeriesDrawing properties, including custom marker labels,
                to default settings.</para>
            </remarks>
            <example>
                The following code fragment sets labels for all data points in the first series to
                an empty string and then sets the label for the second data point in the series to
                "foo". 
                <code lang="CS" title="[C#]">
            // Turn on marker labels for the first data series
            this.gsNetWinChart1.Chart.GetSeriesDrawing(0).MarkerLabelsOn = true;
             
            // Set all labels to an empty string
            int pointCount = this.gsNetWinChart1.Chart.GetSeriesDrawing(0).GetSeries().DataPointCount(SeriesComponent.Y);
            for (int i = 0; i &lt; pointCount; i++)
            {
                this.gsNetWinChart1.Chart.GetSeriesDrawing(0).SetUserMarkerLabel(i, "");
            }
             
            // Label the second data point "foo"
            this.gsNetWinChart1.Chart.GetSeriesDrawing(0).SetUserMarkerLabel(1, "foo");
                </code>
            	<code lang="VB" title="[VB]">
            ' Turn on marker labels for the first data series
            Me.GsNetWinChart1.Chart.GetSeriesDrawing(0).MarkerLabelsOn = True
             
            ' Set all labels to an empty string
            Dim pointCount As Integer = Me.GsNetWinChart1.Chart.GetSeriesDrawing(0).GetSeries().DataPointCount(SeriesComponent.Y)
            Dim i As Integer
            For i = 0 To pointCount - 1
                Me.GsNetWinChart1.Chart.GetSeriesDrawing(0).SetUserMarkerLabel(i, "")
            Next
             
            ' Label the second data point "foo"
            Me.GsNetWinChart1.Chart.GetSeriesDrawing(0).SetUserMarkerLabel(1, "foo")
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetUserMarkerUrl(System.Int32)">
            <summary>
            Retrieves the user marker URL override for the specified data point.
            </summary>
            <returns>Object associated with data point. Null if none exists.</returns>
            <param name="dataPoint">Index of data point to retrieve.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetUserMarkerToolTip(System.Int32)">
            <summary>
            Retrieves the user marker ToolTip override for the specified datapoint.
            </summary>
            <param name="dataPoint">Index of datapoint to retrieve.</param>
            <returns>Object associated to datapoint.  null if none exists.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetUserMarkerUrl(System.Int32,System.Object)">
            <summary>Sets a user marker URL override for the specified data point.</summary>
            <remarks>The override can be a number or a string.</remarks>
            <param name="dataPoint">Index of data point to override.</param>
            <param name="obj">Override URL data.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetUserMarkerToolTip(System.Int32,System.Object)">
            <summary>
            Sets a user marker ToolTip override for the specified datapoint.  Note that this
            override can be a number or can be a string.
            </summary>
            <param name="dataPoint">Index of datapoint to override.</param>
            <param name="obj">Override ToolTip data.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetUserMarkerExtraString(System.Int32)">
            <summary>
            Retrieves the user marker ExtraString override for the specified data point.
            </summary>
            <param name="dataPoint">Index of data point to retrieve.</param>
            <returns>Object associated with data point.  Null if none exists.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetUserMarkerExtraString(System.Int32,System.Object)">
            <summary>Sets a user marker ExtraString override for the specified data point.</summary>
            <remarks>The override can be a number or a string.</remarks>
            <param name="dataPoint">Index of data point to override.</param>
            <param name="obj">Override ExtraString data.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetSeries">
            <summary>
            Returns the <see cref="T:GraphicsServer.GSNet.SeriesData.Series"/> object that 
            has been wrapped inside this SeriesDrawing object.
            </summary>
            <returns>The wrapped Series object.</returns>
            <seealso cref="T:GraphicsServer.GSNet.SeriesData.Series">Series Class</seealso>
            <example>
                The code fragment below determines how many data points are in the longest series
                on the chart. It does this by cycling through each SeriesDrawing object in the
                collection, retrieving its associated Series object, and getting the data point
                count of the series.
                <code lang="CS" title="[C# Example]">
            Chart chart = this.gsNetWinChart1.Chart;
             
            // Find out how many data points are in the longest series
            int numPts = 0;
            int maxPts = 0;
            foreach(SeriesDrawing sd in chart.SeriesDrawingList)
            {
                numPts = sd.GetSeries().DataPointCount(SeriesComponent.Y);
                if (numPts &gt; maxPts)
                    maxPts = numPts;
            }
                </code>
            	<code lang="VB" title="[VB Example]">
            Dim chart As Chart = Me.GsNetWinChart1.Chart
             
            ' Find out how many data points are in the longest series
            Dim numPts As Integer = 0
            Dim maxPts As Integer = 0
            For Each sd As SeriesDrawing In chart.SeriesDrawingList
                numPts = sd.GetSeries().DataPointCount(SeriesComponent.Y)
                If (numPts &gt; maxPts) Then
                    maxPts = numPts
                End If
            Next
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetMarkersPrimaryColor">
            <summary>
            Returns the primary color that has been set for this SeriesDrawing object.
            
            </summary>
            <returns>Color</returns>
            <remarks>Black is returned for image and texture type fills.</remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetDataPointMarkerFill(System.Int32)">
            <summary>
            Retrieves the Background object that is the marker fill for the specified
            data point.  
            </summary>
            <remarks>
            Note that this method never returns a null value. It will return a background
            object from one of three places. The method first checks to see if a marker condition
            set a background for the data point. If not, then it checks the user override
            background list for a data point override. Finally, if no background has been found, it
            returns the background in the MarkerFill property.
            </remarks>
            <param name="dataPoint">Index of data point to retrieve.</param>
            <returns>Background object.</returns>
            <seealso cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerFill">MarkerFill Property</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetDataPointLine(System.Int32)">
            <summary>
            Retrieves the Line object that contains all the visual line properties 
            for the specified data point.  
            </summary>
            <remarks>
            Note that this method never returns a null value. It will return a Line
            object from one of two places. The method first checks to see if a line condition
            exists and is true for the data point. If not, it
            returns the Line in the MarkerLine property.
            </remarks>
            <param name="dataPoint">Index of data point to retrieve.</param>
            <returns>Line object.</returns>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetDataPointMarkerFill(System.Int32,GraphicsServer.GSNet.Charting.Background)">
            <summary>Sets a marker fill override for the specified data point.</summary>
            <remarks>
            Use this method to change the appearance of individual markers in a
            series.
            </remarks>
            <param name="dataPoint">Index of data point to override.</param>
            <param name="dpBackground">Background object.</param>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.GetDataPointExplode(System.Int32)">
            <summary>
            Retrieves the pie wedge explode percentage for a specified data point.
            </summary>
            <remarks>
            This method first checks if an override has been set with SetDataPointExplode(). 
            If so, that is the value returned. Otherwise, the method returns the value set in the 
            PieExplodePercent property.
            </remarks>
            <param name="dataPoint">Index of the data point.</param>
            <returns>Percentage of the radius to explode this point's slice.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetDataPointExplode(System.Int32,System.Int32)">SetDataPointExplode Method</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieExplodePercent">PieExplodePercent Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetDataPointExplode(System.Int32,System.Int32)">
            <summary>
            Sets the exploded distance of a specific data point (pie slice) in this series.
            </summary>
            <param name="dataPoint">Index of the data point.</param>
            <param name="explodePercent">The percentage of the radius to explode this point's slice.</param>
            <seealso cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieExplodePercent">PieExplodePercent Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.IsDataPointVisible(System.Int32)">
            <summary>
            Returns true if the specified data point is visible. </summary> 
            <remarks>Data points can be hidden via the HideDataPoint() method.</remarks>
            <param name="dataPoint">Index of the data point.</param>
            <returns>True if this point is visible, false if this point is hidden.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.HideDataPoint(System.Int32)">HideDataPoint Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.ShowDataPoint(System.Int32)">ShowDataPoint Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.HideDataPoint(System.Int32)">
            <summary>
            Hides the specified data point in this series.
            </summary>
            <param name="dataPoint">Index of the data point.</param>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.ShowDataPoint(System.Int32)">ShowDataPoint Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.IsDataPointVisible(System.Int32)">IsDataPointVisible Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.ShowDataPoint(System.Int32)">
            <summary>
            Shows the specified data point in this series if it has been previously hidden.
            </summary>
            <param name="dataPoint">Index of the data point.</param>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.HideDataPoint(System.Int32)">HideDataPoint Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.IsDataPointVisible(System.Int32)">IsDataPointVisible Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawing.ToString">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.DisplayInLegend">
            <summary>
            Controls whether or not the series is displayed in the legend.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerOutline">
            <summary>
            Gets the Line object that controls the display of marker outlines
            if marker outlines are enabled. This property exists to provide 
            access to the properties and methods of the underlying Line object.
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Line"/> object
            for detailed information about Line properties.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.RadarFillEnabled">
            <summary>
            Controls whether or not a series in a Radar graph will fill in its area.
            </summary>
            <remarks>If set to true, the area is filled using the 
            <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerFill"/> properties.
            </remarks>
            <value>bool</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerFill">MarkerFill Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerOutlineEnabled">
            <summary>
            Controls whether or not the marker is outlined.  
            </summary>
            <remarks>Setting this property to true turns on outlines.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerLine">
            <summary>
            Gets the Line object that provides marker lines for marker types that have lines
            (such as MarkerType.Line). This property exists to provide access to the properties of
            the underlying Line object.
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Line"/> class
            for detailed information about Line properties.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
            <example>
                The following example searches for a particular series and, if found, changes the
                marker line properties so that the series will stand out on the chart. 
                <code lang="CS" title="[C# Example]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Cycle through the series drawing list
            foreach (SeriesDrawing seriesDrawing in cht.SeriesDrawingList)
            {
                // Find a particular series
                if (seriesDrawing.SeriesName == "My Sales")
                {
                    // Change the color and line thickness
                    seriesDrawing.MarkerLine.Color = Color.OrangeRed;
                    seriesDrawing.MarkerLine.Thickness = 4;
                }
            }
            // Redraw the chart
            cht.ChartType = ChartType.Line2D;
                </code>
            	<code lang="VB" title="[VB Example]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Cycle through the SeriesDrawingList
            For Each seriesDrawing As SeriesDrawing In cht.SeriesDrawingList
                ' Find a particular series
                If seriesDrawing.SeriesName = "My Sales" Then
                    ' Change the color and line thickness
                    seriesDrawing.MarkerLine.Color = Color.OrangeRed
                    seriesDrawing.MarkerLine.Thickness = 4
                End If
            Next
            ' Redraw the chart
            cht.ChartType = ChartType.Line2D
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerFill">
            <summary>Gets the Background object that controls how markers will
            be filled when rendered on a chart. 
            </summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.Background"/> class
            for detailed information about background properties.
            <para>Note that all markers for a given SeriesDrawing will be filled the same way.
            If you want to fill the marker for a specific data point using a different fill,
            see the SetDataPointMarkerFill() method below.</para>  
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetDataPointMarkerFill(System.Int32,GraphicsServer.GSNet.Charting.Background)">SetDataPointMarkerFill Method</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerHighLow">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.GanttCompletionFill">
            <summary>
            Gets the Background object that controls how Gantt bars
            are filled when the percent completion value has been set for the bar.
            </summary>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Background"/> class
            for detailed information about background properties.
            <remarks>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerLabelProperties">
            <summary>
            Gets the TextPainter object that controls how marker labels are displayed 
            if marker labels are turned on.   
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.TextPainter"/> class
            for more information on TextPainter properties.  
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TextPainter"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TextPainter">TextPainter Class</seealso>
            <example>
                The following fragment formats marker labels for the first data series. 
                <code lang="CS" title="[C# Example]">
            Chart cht = this.gsNetWinChart1.Chart;
            cht.Grid.AxisY.LabelFormatMask = "$#0."; // Marker labels use the mask for the axis labels
             
            // Format marker labels for first series
            cht.GetSeriesDrawing(0).MarkerLabelProperties.Color = Color.Green;
            cht.GetSeriesDrawing(0).MarkerLabelProperties.Font = new Font("Myriad Condensed Web", 8);
                </code>
            	<code lang="VB" title="[VB Example]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
            cht.Grid.AxisY.LabelFormatMask = "$#0." ' Marker labels use the mask for the axis labels
             
            ' Format marker labels for first series
            cht.GetSeriesDrawing(0).MarkerLabelProperties.Color = Color.Green
            cht.GetSeriesDrawing(0).MarkerLabelProperties.Font = New Font("Myriad Condensed Web", 8)
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerLabelGap">
            <summary>
            Sets and gets the gap between the marker and the marker label.  
            </summary>
            <remarks>Increase this number for a larger gap.  
            <para>For pie charts this value is only used 
            when the <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieLabelLocation"/> property
            is set to PieLabelLocation.Outside.  In this case the marker label gap is 
            the space between the tip of the line and the text.</para>
            <para>
            Smart pie labels do not use this property.  Instead they use the
            <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieSmartLabelOffset"/> property.
            </para>
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerLabelsOn">
            <summary>
            Controls whether or not markers for datapoints are labeled.
            </summary>
            <remarks>
            If set to true, displays labels near the data pointer for a marker.
            Note, however, that each type of marker decides the best location for 
            displaying the label. 
            <para>The format of a marker label is controlled by the LabelFormatMask property 
            of the axis to which the marker label corresponds.</para>
            	<para>The marker label for a specific data point can be overridden by the user via the 
            SetUserMarkerLabel() method. See that method for further information.</para>
            </remarks>
            <value>bool</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisBase.LabelFormatMask">LabelFormatMask Property</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetUserMarkerLabel(System.Int32,System.Object)">SetUserMarkerLabel Method</seealso>
            <example>
                The following example formats marker labels for a data series and then displays the
                labels. 
                <code lang="CS" title="[C# Example]">
            Chart cht = this.gsNetWinChart1.Chart;
            cht.Grid.AxisY.LabelFormatMask = "$#0."; // Marker labels use the mask for the axis labels
             
            // Format marker labels for first series
            cht.GetSeriesDrawing(0).MarkerLabelProperties.Color = Color.Green;
            cht.GetSeriesDrawing(0).MarkerLabelProperties.Font = new Font("Myriad Condensed Web", 8);
             
            // Turn on marker labels for first series
            cht.GetSeriesDrawing(0).MarkerLabelsOn = true;
             
            // Display the changes
            cht.RecalcLayout();
                </code>
            	<code lang="VB" title="[VB Example]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
            cht.Grid.AxisY.LabelFormatMask = "$#0." ' Marker labels use the mask for the axis labels
             
            ' Format marker labels for first series
            cht.GetSeriesDrawing(0).MarkerLabelProperties.Color = Color.Green
            cht.GetSeriesDrawing(0).MarkerLabelProperties.Font = New Font("Myriad Condensed Web", 8)
             
            ' Turn on marker labels for first series
            cht.GetSeriesDrawing(0).MarkerLabelsOn = True
             
            ' Display the changes
            cht.RecalcLayout()
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.ColorCloseHigher">
            <summary>
            Sets and gets the color to paint the rectangle on a High/Low/Open/Close chart when the close 
            value is greater than the open value.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.ColorCloseLower">
            <summary>
            Sets and gets the color to paint the rectangle on a High/Low/Open/Close chart when the close 
            value is less than the open value.
            </summary>
            <value>Color</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.TickWidthHigh">
            <summary>
            Width of the High tick on a High/Low/Open/Close chart.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.TickWidthLow">
            <summary>
            Width of the Low tick on the High/Low/Open/Close chart.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.TickWidthOpen">
            <summary>
            Width of the Open tick on the High/Low/Open/Close chart.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.TickWidthClose">
            <summary>
            Width of the Close tick on the High/Low/Open/Close chart.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.CandleStickBoxWidth">
            <summary>
            Width of the box on a candlestick marker.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.SymbolsOn">
            <summary>
            Turns data point symbols on and off.</summary>
            <remarks>
            A symbol is not the same as a marker. For example, a data point in a bar chart may have a 
            bar marker that draws from the data point down to the X axis. If symbols are turned on,
            then a symbol will also display at the top of the bar marker centered around the data point.
            Different marker types determine the best location for displaying symbols when they are turned on.
            <para>Note that scatter charts do not actually display markers. Instead, they display
            symbols only. The marker in this case is an invisible rectangle around the data point and 
            the symbol.</para>
            </remarks>
            <value>bool</value>
            <example>
                The following example turns on symbols for the first series on a bar chart. 
                <code lang="CS" title="[C# Example]">
            // Draw a bar chart
            this.gsNetWinChart1.Chart.ChartType = ChartType.Bar2D;
             
            // Format symbols for the first series
            SeriesDrawing drawing = this.gsNetWinChart1.Chart.GetSeriesDrawing(0);
            drawing.Symbol.Type = SymbolType.Shape;
            drawing.Symbol.Shape = SymbolShape.Diamond;
            drawing.Symbol.Background.Color = Color.Yellow;
                        
            // Turn symbols on
            drawing.SymbolsOn = true;
                </code>
            	<code lang="VB" title="[VB Example]">
            ' Draw a bar chart
            Me.GsNetWinChart1.Chart.ChartType = ChartType.Bar2D
             
            ' Format symbols for the first series
            Dim drawing As SeriesDrawing = Me.GsNetWinChart1.Chart.GetSeriesDrawing(0)
            drawing.Symbol.Type = SymbolType.Shape
            drawing.Symbol.Shape = SymbolShape.Diamond
            drawing.Symbol.Background.Color = Color.Yellow
             
            ' Turn symbols on
            drawing.SymbolsOn = True
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.LinesOn">
            <summary>
            Turns connecting lines between data points on and off.  
            </summary>
            <remarks>
            This property applies only to certain types of data markers. For example, line markers have
            the ability to display connecting lines, sticks and symbols. All three of these features can 
            be turned on and off when displaying a series as a line marker.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.SticksOn">
            <summary>
            Turns drop lines on and off for certain marker types.
            </summary>
            <remarks>
            Drop lines, or "sticks," can sometimes help the viewer's eye relate a data point
            to a value on the axis.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerType">
             <summary>
             Sets and gets the marker type to use when displaying the data points for a series.  
             </summary>
            <remarks>
            	When a new series is added to a chart, the value for the MarkerType property of the   
             corresponding SeriesDrawing object defaults to CurChartType, which selects the default marker 
             for the currently active chart type. You can customize the series by setting MarkerType to 
             another value.
             
             <para>It is possible, with some chart types, to select a different marker for each
             series displayed on the chart. For example, most 2D X/Y linear charts allow a mixture of bar, 
             line, stick, scatter, and area markers.</para>
             
             <para>Be aware, however, that the marker type you select might not be supported by the 
             currently active chart type. For example, ChartType.Line2D does not support MarkerType.Pie. 
             If you select a marker type that is not supported by the current chart type, then the series 
             will not render on the chart.</para> 
              
             <para>See the <see cref="T:GraphicsServer.GSNet.Charting.MarkerType"/> enumeration for information 
             on supported marker types.</para>
             </remarks>
             <value><see cref="T:GraphicsServer.GSNet.Charting.MarkerType"/></value>
             <seealso cref="T:GraphicsServer.GSNet.Charting.MarkerType">MarkerType Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.Symbol">
            <summary>
            Gets the Symbol object that controls the painting of symbols when they are turned on.
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Symbol"/> class for more information. 
            Also, see the SymbolsOn property for a discussion of how markers and symbols differ.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Symbol"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Symbol">Symbol Class</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.SymbolsOn">SymbolsOn Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToXPrime">
            <summary>
            Controls whether data points in the series map to the X prime axis.  
            </summary>
            <remarks>
            If true, the series maps to the X prime axis. This will cause the 
            X values of the data points to display in relationship to the scale
            of the X prime axis.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToYPrime">
            <summary>
            Controls whether data points in the series map to the Y prime axis.
            </summary>
            <remarks>
            If true, data points in the series map to the Y prime axis. This will cause 
            the Y values of the data points to display in relationship to the scale
            of the Y prime axis.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToYList">
            <summary>
            Controls whether the Y values of data points in the series map to an
            axis in the AxisYList.
            </summary>
            <remarks>
            Defaults to -1, which indicates that the series should map to the primary Y axis.
            To map to a Y axis in the AxisYList, set the MapToYList property to the value of the
            target axis's index in the AxisYList.
            </remarks>
            <value>int</value>
            <example>
                The following fragment creates a data series, adds it to the SeriesDrawingList,
                creates a Y axis, adds it to the AxisYList, and then maps the data series to the
                axis.
                <code lang="CS" title="C# Example">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // create a data series and add it to the chart
            ArrayDataProvider dp = new ArrayDataProvider(new double[] {8, 10, 3, 26, 5});
            Series mySeries = new Series();
            mySeries.BindComponent(SeriesComponent.Y, dp, string.Empty);
            int indexMySeries = cht.AddSeries(mySeries);
             
            // create a Y axis and add it to the Y axis list
            AxisY myAxis = new AxisY();
            myAxis.MajorTickInterval = 5;
            int indexMyAxis = cht.Grid.AxisYList.Add(myAxis);
             
            // map the series to the axis
            cht.GetSeriesDrawing(indexMySeries).MapToYList = indexMyAxis;
             
            // arrange the Y axes
            cht.Grid.MarginAxisLeft = 100;
            cht.Grid.AxisYList.ArrangeEvenly();
             
            // draw the chart
            cht.RecalcLayout()
                </code>
            	<code lang="VB" title="VB Example">
            With Me.GsNetWinChart1.Chart
             
                ' create a data series and add it to the chart
                Dim dp As ArrayDataProvider = New ArrayDataProvider(New Double() {8, 10, 3, 26, 5})
                Dim mySeries As Series = New Series
                mySeries.BindComponent(SeriesComponent.Y, dp, String.Empty)
                Dim indexMySeries As Integer = .AddSeries(mySeries)
             
                ' create a Y axis and add it to the Y axis list
                Dim myAxis As AxisY = New AxisY
                myAxis.MajorTickInterval = 5
                Dim indexMyAxis As Integer = .Grid.AxisYList.Add(myAxis)
             
                ' map the series to the axis
                .GetSeriesDrawing(indexMySeries).MapToYList = indexMyAxis
             
                ' arrange the Y axes
                .Grid.MarginAxisLeft = 100
                .Grid.AxisYList.ArrangeEvenly()
             
                ' draw the chart
                .RecalcLayout()
             
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToYPrimeList">
            <summary>
            Controls if the data points in the series will map to a
            different Y Prime axis in the AxisYPrimeList.
            </summary>
            <remarks>
            Defaults to map to the main AxisYPrime.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToXList">
            <summary>
            Controls if the data points in the series will map to a
            different X axis in the AxisXList.
            </summary>
            <remarks>
            Defaults to map to the main AxisX.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MapToXPrimeList">
            <summary>
            Controls if the data points in the series will map to a
            different X Prime axis in the AxisXPrimeList.
            </summary>
            <remarks>
            Defaults to map to the main AxisXPrime.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.SeriesName">
            <summary>Gets and sets the display name for the SeriesDrawing object.</summary>
            <remarks>
                The display name appears in the legend. 
                <para>Note that the Series object itself contains a SeriesName property. The
                SeriesDrawing.SeriesName property allows the series name to be overridden within
                the chart. Setting this property does not affect the name in the Series
                object.</para>
            </remarks>
            <value>string</value>
            <seealso cref="P:GraphicsServer.GSNet.SeriesData.Series.SeriesName">Series.SeriesName Property</seealso>
            <example>
                The following fragment creates a series, names it, adds it to the chart, and then
                sets the text that is displayed in the legend item for the series. 
                <code lang="CS" title="[C# Example]">
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Create a series with random data
            Series s = new Series();
            s.RandomizeComponent(SeriesComponent.Y, 12, 10, 42);
             
            // Name the series
            s.SeriesName = "Random data";
             
            // Add the series to the chart
            int indexSeries = cht.AddSeries(s);
             
            // Specify a series name for the legend
            cht.GetSeriesDrawing(indexSeries).SeriesName = "Carefully selected data";
             
            // Show the legend
            cht.Legend.IsVisible = true;
             
            // Redraw the chart
            cht.RecalcLayout();
                </code>
            	<code lang="VB" title="[VB Example]">
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Create a series with random data
            Dim s As Series = New Series
            s.RandomizeComponent(SeriesComponent.Y, 12, 10, 42)
             
            ' Name the series
            s.SeriesName = "Random data"
             
            ' Add the series to the chart
            Dim indexSeries As Integer = cht.AddSeries(s)
             
            ' Specify a series name for the legend
            cht.GetSeriesDrawing(indexSeries).SeriesName = "Carefully selected data"
             
            ' Show the legend
            cht.Legend.IsVisible = True
             
            ' Redraw the chart
            cht.RecalcLayout()
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MaxDataPoints">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.IsReconciled">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieSize">
            <summary>
            Sets or gets the percentage of the grid area occupied by the pie chart for this
            series.
            </summary>
            <remarks>
            The PieSize property is useful when displaying more than one pie chart series at a time. 
            For example, if there are two series, one of them can be large and have a donut hole, and 
            the second can be smaller and display inside the donut hole of the first.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.DoughnutThickness">
            <summary>
            Sets or gets the thickness (expressed as a percent of radius) of a 2D Pie chart's
            donut.
            </summary>
            <remarks>
            Donut thickness is pie radius minus the radius of the hole. 
            A donut thickness of 100% means the pie chart does not have a donut hole. 
            A donut thickness of 50% means the pie chart will draw with a hole that is half
            the radius of the pie chart.  This property is useful when displaying concentric  
            pie charts inside one another.
            <para>This property applies only to 2D Pie charts.</para>
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieSmartLabelOffset">
            <summary>
            Sets and gets the offset of the smart pie marker labels from the edge of the pie.
            </summary>
            <remarks>On the right side of the pie this is the space from the ends of the left
            justified labels to the outermost pie slice.  On the left side of the pie this is the space from the ends of the right
            justified labels to the outermost pie slice.
            <para>This space between the edge of the pie and the labels is the space where
            the label lines draw.</para></remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieSmartLabelMinFontSize">
            <summary>
            Sets and gets the min font size for the smart label mode.
            </summary>
            <remarks>Note that if the current marker label font size is already less then
            this minimum size then the font will not be changed.  Otherwise the algorithm
            that reduces the font size will not go below this specified size.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieExplodePercent">
            <summary>Sets or gets the percent of pie radius that pie 
            segments are exploded from the center of the pie.
            </summary>
            <remarks>
            Note that this property explodes all segments of a pie chart.
            To explode selected pie data points, use the SetDataPointExplode() method.
            </remarks>
            <value>int</value>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.SetDataPointExplode(System.Int32,System.Int32)">SetDataPointExplode Method</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieUnits">
            <summary>
            Sets or gets the pie units (percentage or data point value) for this
            series.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.PieUnits"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.PieUnits">PieUnits Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieLabelLocation">
            <summary>
            Controls whether pie labels are inside or outside the pie wedges.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.PieLabelLocation"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.PieLabelLocation">PieLabelLocation Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieLabelLineLength">
            <summary>
            Gets or sets the length (expressed as a percentage of pie radius) of the line drawn from
            a pie wedge to its label.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieSmartLabelMidPoint">
            <summary>
            Gets or Sets the mid-Point location
            of where the smart labels will draw the bend in the smart labels line.
            </summary>
            <remarks>This value is a percentage value between 0 and 100, 
            with 0 being on the pie circumference and 100 being on the end of the labels.
            The mid-point is based on the outermost edge of the pie and the value
            specified in the <see cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieSmartLabelOffset"/> property.
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieLabelLine">
            <summary>
            Gets the Line object that draws between (connects) the pie slices
            and pie labels.
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Line"/> class
            for detailed information about Line properties.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.PieLabelThreshold">
            <summary>
            Sets or gets the threshold that determines how small a pie segment must be before its
            label is extended radially from the pie segment.
            </summary>
            <remarks>
            When pie segments are very small, there may not be sufficient space for outside labels to
            draw without overlapping neighboring labels. When this happens, it can help to rotate the 
            labels of segments that are too small. This property defines "too small."  
            <para>The property value is a percentage of the total pie. If a segment's portion of the
            pie is less than this percentage, the label is rotated such that it extends radially from
            the pie wedge.</para>
            <para>Note that the setting for this property takes effect only when pie label location
            is outside.</para>
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.Pie3DRotation">
            <summary>
            Sets and gets the number of degrees from vertical to rotate a 3D Pie.
            </summary>
            <remarks>
            This property is only applicable for 3D Pie charts. Valid values are 0 degrees 
            (viewed from above) to 89 degrees (viewed from the side).
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.Pie3DThickness">
            <summary>
            Sets or gets the thickness of a 3D Pie chart. 
            </summary>
            <remarks>
            The property value is a percentage of maximum thickness.
            <para>The resulting thickness will be effected by the rotation angle. 
            The more the Pie is rotated back, the more visible its thickness will be.</para>
            </remarks>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.ImageMapUrl">
            <summary>
            Sets or gets the URL to load when a marker in this series is clicked on.
            </summary>
            <value>string</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.EnableWebHotSpots">EnableWebHotSpots Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.ImageMapExtraString">
            <summary>
            Sets and gets an extra string to embed in the image map for elements of this series.
            </summary>
            <value>string</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.EnableWebHotSpots">EnableWebHotSpots Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.TrendCount">
            <summary>
            Gets the number of trend objects currently attached to this SeriesDrawing object.
            </summary>
            <value>int</value>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddTrend(GraphicsServer.GSNet.Charting.TrendBase)">AddTrend Method</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.MarkerConditionCount">
            <summary>
            Gets the number of marker condition objects currently attached to this SeriesDrawing object.
            </summary>
            <value>int</value>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddMarkerCondition(GraphicsServer.GSNet.Charting.IMarkerCondition)">AddMarkerCondition Method</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SeriesDrawing.TrendList">
            <summary>
            Gets the TrendCollection object that maintains a list of trends attached to this
            SeriesDrawing object.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendCollection"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TrendCollection">TrendCollection Class</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.SeriesDrawingCollection">
            <summary>Manages a collection of SeriesDrawing objects.</summary>
            <remarks>
            This class is simply a wrapper around the array list that contains the
            list of SeriesDrawing objects.  Note that the Chart class contains the
            <see cref="P:GraphicsServer.GSNet.Charting.Chart.SeriesDrawingList"/> property which
            is of type SeriesDrawingCollection. The SeriesDrawingList and SeriesDrawingCollection
            are essentially the some thing. 
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.SeriesDrawingList">SeriesDrawingList Property</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawingCollection.GetSeriesDrawing(System.Int32)">
            <summary> 
            Retrieves the series wrapper at the specified index.
            </summary>
            <param name="index">Zero-based index.</param>
            <returns>SeriesDrawing object or null if index does not contain an object.</returns>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawingCollection.Add(System.Object)">
            <summary>Overridden. Connects the SeriesDrawing object to internal structures.</summary>
            <remarks>
            You should not use this method directly.  Instead, add a Series object to the
            chart via the chart's AddSeries() method. AddSeries() allocates a new SeriesDrawing
            object, places the Series object inside the SeriesDrawing object, and then calls 
            this method to add the SeriesDrawing object to the chart's list.
            </remarks>
            <param name="value">SeriesDrawing object.</param>
            <returns>Zero-based index of the object in the list.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.AddSeries(GraphicsServer.GSNet.SeriesData.Series)">AddSeries Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawingCollection.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>
            Writes all the SeriesDrawing objects currently in the list out to XML.
            </summary>
            <param name="doc">The XmlDocument context used to create the new element node.</param>
            <param name="flags">Template flags to control template writing.  See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
            <returns>This method returns an XmlElement if properties were written. A null value is returned if there were no properties to write.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SeriesDrawingCollection.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>Reads SeriesDrawing properties from an XMLNode and applies them 
            to objects in the SeriesDrawingList.</summary>
            <remarks>
            This method reads the SeriesDrawing object properties out of the XML Node
            and applies them to the existing SeriesDrawing objects in the chart. In other words,
            the properties from the first SeriesDrawing object in the XML Node are applied
            to the first SeriesDrawing object in the list; the properties from the second 
            SeriesDrawing object in the XML Node are applied to the second SeriesDrawing object 
            in the list; and so on.
            <para>Note that this function does NOT create new SeriesDrawing objects in the chart.
            It only applies properties to existing objects in the chart.</para>
            </remarks>
            <param name="node">XmlNode that contains the chart properties.</param>
            <param name="flags">Template flags to control template writing.  See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.CircularLighting">
            <summary>
            Will draw a circular lighted region using the specified location and color.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.SpecialEffectBase">
            <summary>
            Special Effects allow for additional drawing on top of other drawings.
            An example is lighted regions on top of existing Backgrounds.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SpecialEffectBase.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SpecialEffectBase.#ctor(GraphicsServer.GSNet.Charting.Border)">
            <summary>Constructs an instance of this type.</summary>
            <remarks>Should only be called from Border objects.</remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SpecialEffectBase.Paint(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.SizeF)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SpecialEffectBase.Paint(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SpecialEffectBase.PaintEffect(System.Drawing.Graphics)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SpecialEffectBase.Rectangle">
            <summary>
            Sets or gets the rectangle structure that defines the boundary of the special
            effect.
            </summary>
            <remarks>
            If the value is Empty then the rectangle will be automatically
            determined by the Background or Border that the special effect
            applies to.
            </remarks>
            <value><see cref="T:System.Drawing.RectangleF"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SpecialEffectBase.Name">
            <summary>
            Sets or gets the name that can be used to identify the particular instance of
            this special effect, such as within a list.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SpecialEffectBase.ClipShape">
            <summary>Sets or gets the shape to draw the special effect within.</summary>
            <remarks>No drawing is done outside the boundaries of the shape.</remarks>
            <value><see cref="P:GraphicsServer.GSNet.Charting.SpecialEffectBase.ClipShape"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SpecialEffectBase.ClipBoundingRectangle">
            <summary>Sets or gets the bounding rectangle that the clip area will fit within.</summary>
            <remarks>The ClipShape will always fit within the ClipBoundingRectangle.</remarks>
            <value><see cref="T:System.Drawing.RectangleF"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SpecialEffectBase.ClipPath">
            <summary>Sets or gets the GraphicsPath object that the clip area will fit within.</summary>
            <remarks>
            The ClipShape property will need to be set to Path for the ClipPath property to be used.
            </remarks>
            <value><see cref="T:System.Drawing.Drawing2D.GraphicsPath"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.SpecialEffectBase.ClipRegion">
            <summary>Sets or gets the Region object that the clip area will fit within.</summary>
            <remarks>
            The ClipShape property will need to be set to Region for the ClipRegion property to be used.
            </remarks>
            <value><see cref="T:System.Drawing.Region"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CircularLighting.StartRadius">
            <summary>
            Defines where our lighting will start from radially outward on the circle.
            </summary>
            <remarks>
            This value is a percent value from 0 to 100 percent. 0 signifies the circle center, as opposed
            to 100 signifying the circle's edge.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CircularLighting.EndRadius">
            <summary>
            Defines where our lighting will end at radially outward on the circle.
            </summary>
            <remarks>
            This value is a percent value from 0 to 100 percent. 0 signifies the circle origin, as opposed
            to 100 signifying the circle's edge.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CircularLighting.StartAngle">
            <summary>
            Defines the angle in degress of where our lighting will start.
            </summary>
            <remarks>
            This angle is in degrees, from 0 degrees to 359 degress on the circle.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CircularLighting.SweepAngle">
            <summary>
            Defines how far the light will sweep, or span, from the Start Angle.
            </summary>
            <remarks>
            This angle is in degrees, from 0 degrees to 359 degress. 0 degrees would
            draw no light (0 length), whereas 359 degrees would draw a light that
            spanned around the entire circle.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CircularLighting.Color">
            <summary>
            Defines the color of the light that will be drawn.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CircularLighting.Transparency">
            <summary>
            Defines the transparency, how light or dark, the circular lighting will be drawn.
            </summary>
            <remarks>
            The Transparency is a value between 0 and 100. 100 is fully transparent and is invisible.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CircularLighting.Breaks">
            <summary>
            Defines how many light breaks, or empty gaps, appear in the lighted region.
            </summary>
            <remarks>
            The corresponding property to Breaks is BreakSweep which defines the angle 
            value of each lighting break, or each empty gap.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CircularLighting.BreakSweep">
            <summary>
            Defines the length of each light break, or empty gap, measured in degrees.
            </summary>
            <remarks>
            The corresponding property to BreakSweep is Breaks, where Breaks needs
            to be greater than 0 in order for one to see a lighting break with
            the length of BreakSweep.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CircularLighting.EdgeColor">
            <summary>
            Defines the color of the circular lighting edge, when EdgeColorEnabled is true.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.CircularLighting.EdgeColorEnabled">
            <summary>
            Defines whether or not to use the EdgeColor for the circular lighting.
            </summary>
            <remarks>
            If EdgeColorEnabled is false, then the single CircularLighting.Color
            value will be used for the entire circular lighting area.
            </remarks>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LightSpot">
            <summary>
            Will draw a circle light spot using the specified location and colors.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LightSpot.XPercent">
            <summary>
            Assigns the x location of the center of the light spot.
            </summary>
            <remarks>
            This value is a percent value from 0 to 100 percent. 0 signifies the 
            circle's center, whereas 100 signifies the circle's edge.																						
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LightSpot.YPercent">
            <summary>
            Assigns the y location of the center of the light spot.
            </summary>
            <remarks>
            This value is a percent value from 0 to 100 percent. 0 signifies the 
            circle's center, as opposed to 100 signifying the circle's edge.																						
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LightSpot.WidthPercent">
            <summary>
            Assigns the light spot's width.
            </summary>
            <remarks>
            <para>
            The width percent is a relative size of the Background
            or Border that the light spot is drawn on top of.
            </para>
            <para>
            If the percent is 100 then it will span the width of the Background 
            or Border, whereas a smaller size will not fully span the width, and a larger size
            will extend beyond the Background or Border width.
            </para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LightSpot.HeightPercent">
            <summary>
            Assigns the light spot's height.
            </summary>
            <remarks>
            <para>
            The height percent is a relative size of the Background
            or Border that the light spot is drawn on top of.
            </para>
            <para>
            If the percent is 100 then it will span the height of the Background 
            or Border, whereas a smaller size will not fully span the height, and a larger size
            will extend beyond the Background or Border height.
            </para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LightSpot.CenterColor">
            <summary>
            Assigns the color of the center of the light spot. 
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LightSpot.EdgeColor">
            <summary>
            Assigns the color at the edge of the light spot. 
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularDiagonalLighting.Start">
            <summary>
            Defines where our lighting will start from on the left side of the rectangle.
            </summary>
            <remarks>
            This value is a percent value from 0 to 100 percent. 0 signifies the 
            left-most region, and 100 specifies the right-most region.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularDiagonalLighting.Distance">
            <summary>
            Defines how far our lighting will extend from the Start.
            </summary>
            <remarks>
            This value is a percent value from 0 to 100 percent. 0 signifies 
            that the lighting distance is nothing, whereas 100 specifies the
            entire region after the Start will be lighted
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularDiagonalLighting.DiagonalLightingStartPosition">
            <summary>
            Defines if our diagonal lighting will start from the Top-Left or Bottom-Left.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularDiagonalLighting.Color">
            <summary>
            Defines the color of the light that will be drawn.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularDiagonalLighting.Transparency">
            <summary>
            Defines the transparency, how light or dark, the lighting will be drawn.
            </summary>
            <remarks>
            The Transparency is a value between 0 and 100. 100 is fully transparent and is invisible.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularDiagonalLighting.EdgeColor">
            <summary>
            Defines the color of the rectangular diagonal lighting edge, when EdgeColorEnabled is true.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularDiagonalLighting.EdgeColorEnabled">
            <summary>
            Defines whether or not to use the EdgeColor for the rectangular diagonal lighting.
            </summary>
            <remarks>
            If EdgeColorEnabled is false, then the single RectangularDiagonalLighting.Color
            value will be used for the entire rectangular diagonal lighting area.
            </remarks>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.RectangularLighting">
            <summary>
            Will draw a rectangular lighted region using the specified location and colors.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularLighting.XPercent">
            <summary>
            Assigns the x location (left edge) of the rectangle.
            </summary>
            <remarks>
            This value is a percent value from 0 to 100 percent. 0 signifies the 
            left edge of the Background or Border that the rectangular lighting 
            is drawn within, as opposed to 100 signifying the right edge of the 
            Background or Border.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularLighting.YPercent">
            <summary>
            Assigns the y location (top edge) of the rectangle.
            </summary>
            <remarks>
            This value is a percent value from 0 to 100 percent. 0 signifies the 
            top edge of the Background or Border that the rectangular lighting 
            is drawn within, as opposed to 100 signifying the bottom edge of the 
            Background or Border.																						
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularLighting.WidthPercent">
            <summary>
            Assigns the rectangle's width.
            </summary>
            <remarks>
            <para>
            The width percent is a relative size of the Background
            or Border that the lighted rectangle is drawn on top of.
            </para>
            <para>
            If the percent is 100 then the lighted rectangle will span the width 
            of the Background or Border, whereas a smaller size will not fully span 
            the width, and a larger size will extend beyond the Background or Border width.
            </para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularLighting.HeightPercent">
            <summary>
            Assigns the rectangle's height.
            </summary>
            <remarks>
            <para>
            The height percent is a relative size of the Background
            or Border that the lighted rectangle is drawn on top of.
            </para>
            <para>
            If the percent is 100 then it will span the height of the Background 
            or Border, whereas a smaller size will not fully span the height, and a larger size
            will extend beyond the Background or Border height.
            </para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularLighting.Color">
            <summary>
            Defines the color of the light that will be drawn.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularLighting.Transparency">
            <summary>
            Defines the transparency, how light or dark, the lighting will be drawn.
            </summary>
            <remarks>
            The Transparency is a value between 0 and 100. 100 is fully transparent and is invisible.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularLighting.EdgeColor">
            <summary>
            Defines the color of the rectangular diagonal lighting edge, when EdgeColorEnabled is true.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.RectangularLighting.EdgeColorEnabled">
            <summary>
            Defines whether or not to use the EdgeColor for the rectangular diagonal lighting.
            </summary>
            <remarks>
            If EdgeColorEnabled is false, then the single RectangularDiagonalLighting.Color
            value will be used for the entire rectangular diagonal lighting area.
            </remarks>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ClipShape">
            <summary>
            Defines the geometric shape used to clip special effect drawing.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ClipShape.Rectangle">
            <summary>Clip a rectangular area.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ClipShape.Circle">
            <summary>Clip a circular area.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ClipShape.Path">
            <summary>Clip within an area defined by a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ClipShape.Region">
            <summary>Clip within an area defined by a <see cref="T:System.Drawing.Region"/> object.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.SpecialEffectList">
            <summary>
            This class is simply a wrapper around the array list that contains the
            list of SpecialEffect objects.  Note that the Background class and Border class
            contain SpecialEffectList properties.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SpecialEffectList.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>
            Writes all the Special Effects objects currently in the list out to XML.
            </summary>
            <param name="doc">The XmlDocument context used to create the new element node.</param>
            <param name="flags">Template flags to control template writing.  See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
            <returns>This method returns an XmlElement if properties were written. A null value is returned if there were no properties to write.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.SpecialEffectList.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>Reads Special Effect objects from the xml node and rebuilds the
            SpecialEffectsList.</summary>
            <param name="node">XmlNode that contains the properties.</param>
            <param name="flags">Template flags to control template writing.  See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.SpecialEffectListEditor">
            <summary>
            Allows editing the Special Effects list using Property Window and dialogs
            in Visual Studio design-time.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Symbol">
            <remarks>
            A symbol is not the same as a marker. For example, a data point on a bar chart
            may have a bar marker that draws from the data point down to the Xaxis. If symbols are
            turned on, then a symbol will also display at the top of the bar marker, centered
            around the data point. Different marker types determine the best location for
            displaying symbols when they are turned on.
            </remarks>
            <summary>Draws symbols used with data point markers.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Symbol.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Symbol.Paint(System.Windows.Forms.PaintEventArgs,System.Drawing.RectangleF)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Symbol.Paint(System.Drawing.Graphics)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Symbol.ToString">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Symbol.Background">
            <summary>
            Gets the Background object that fills symbols of SymbolType.Shape. This property
            exists to provide access to the underlying Background object.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <example>
            See the example for the <see cref="P:GraphicsServer.GSNet.Charting.Symbol.Shape"/> property.
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Symbol.Outline">
            <summary>
            Gets the Line object that is used to draw the outline of a symbol if outlines are
            enabled.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Symbol.OutlineEnabled">
            <summary>Controls whether outlines are drawn around symbols.</summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Symbol.Type">
            <summary>Specifies the symbol type.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.SymbolType"/></value>
            <example>
                The following fragment sets symbol type, selects a shape, formats it, and displays
                symbols.
                <code lang="CS" title="[C# Example]">
            // Draw a bar chart
            this.gsNetWinChart1.Chart.ChartType = ChartType.Bar2D;
             
            // Format symbols for the first series
            SeriesDrawing drawing = this.gsNetWinChart1.Chart.GetSeriesDrawing(0);
            drawing.Symbol.Type = SymbolType.Shape;
            drawing.Symbol.Shape = SymbolShape.Diamond;
            drawing.Symbol.Background.Color = Color.Yellow;
                        
            // Turn symbols on
            drawing.SymbolsOn = true;
                </code>
            	<code lang="VB" title="[VB Example]">
            ' Draw a bar chart
            Me.GsNetWinChart1.Chart.ChartType = ChartType.Bar2D
             
            ' Format symbols for the first series
            Dim drawing As SeriesDrawing = Me.GsNetWinChart1.Chart.GetSeriesDrawing(0)
            drawing.Symbol.Type = SymbolType.Shape
            drawing.Symbol.Shape = SymbolShape.Diamond
            drawing.Symbol.Background.Color = Color.Yellow
             
            ' Turn symbols on
            drawing.SymbolsOn = True
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Symbol.Shape">
            <summary>Specifies the shape used for SymbolType.Shape.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.SymbolShape"/></value>
            <example>
                The following fragment sets symbol type to shape, selects a shape, and displays
                symbols. 
                <code lang="CS" title="[C# Example]">
            // Draw a bar chart
            this.gsNetWinChart1.Chart.ChartType = ChartType.Bar2D;
             
            // Format symbols for the first series
            SeriesDrawing drawing = this.gsNetWinChart1.Chart.GetSeriesDrawing(0);
            drawing.Symbol.Type = SymbolType.Shape;
            drawing.Symbol.Shape = SymbolShape.Diamond;
            drawing.Symbol.Background.Color = Color.Yellow;
                        
            // Turn symbols on
            drawing.SymbolsOn = true;
                </code>
            	<code lang="VB" title="[VB Example]">
            ' Draw a bar chart
            Me.GsNetWinChart1.Chart.ChartType = ChartType.Bar2D
             
            ' Format symbols for the first series
            Dim drawing As SeriesDrawing = Me.GsNetWinChart1.Chart.GetSeriesDrawing(0)
            drawing.Symbol.Type = SymbolType.Shape
            drawing.Symbol.Shape = SymbolShape.Diamond
            drawing.Symbol.Background.Color = Color.Yellow
             
            ' Turn symbols on
            drawing.SymbolsOn = True
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Symbol.Pattern">
            <summary>Specifies the pattern used for SymbolType.Pattern.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.SymbolPattern"/></value>
            <example>
                The following fragment sets symbol type to pattern, selects a pattern, and displays
                symbols.
                <code lang="CS" title="[C# Example]">
            // Draw a bar chart
            this.gsNetWinChart1.Chart.ChartType = ChartType.Bar2D;
             
            // Format symbols for the first series
            SeriesDrawing drawing = this.gsNetWinChart1.Chart.GetSeriesDrawing(0);
            drawing.Symbol.Type = SymbolType.Pattern;
            drawing.Symbol.Pattern = SymbolPattern.PlusFilledDiamond;
            drawing.Symbol.PatternColor = Color.Yellow;
                        
            // Turn symbols on
            drawing.SymbolsOn = true;
                </code>
            	<code lang="VB" title="[VB Example]">
            ' Draw a bar chart
            Me.GsNetWinChart1.Chart.ChartType = ChartType.Bar2D
             
            ' Format symbols for the first series
            Dim drawing As SeriesDrawing = Me.GsNetWinChart1.Chart.GetSeriesDrawing(0)
            drawing.Symbol.Type = SymbolType.Pattern
            drawing.Symbol.Pattern = SymbolPattern.PlusFilledDiamond
            drawing.Symbol.PatternColor = Color.Yellow
             
            ' Turn symbols on
            drawing.SymbolsOn = True
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Symbol.Size">
            <summary>Defines the symbol's width and height.</summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Symbol.LineThickness">
            <summary>Defines the line thickness of a pattern symbol.</summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Symbol.PatternColor">
            <summary>Defines the line color of a pattern symbol.</summary>
            <value>Color</value>
            <example>
            See the example for the <see cref="P:GraphicsServer.GSNet.Charting.Symbol.Pattern"/> property.
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Symbol.Center">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.SymbolType">
            <summary>
            This enum defines the valid types of symbols that can display in
            the current chart engine.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.SymbolType.Shape">
            <summary>
            A shape that can be filled, textured, etc.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.SymbolType.Pattern">
            <summary>
            A pattern that can only be colored. Can also set line width.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.SymbolShape">
            <summary>
            If a symbol is defined as a shape type then this enum further defines
            the exact shape.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.SymbolShape.Square">
            <summary>
            A square.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.SymbolShape.Circle">
            <summary>
            A circle.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.SymbolShape.Triangle">
            <summary>
            A triangle.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.SymbolShape.Diamond">
            <summary>
            A diamond.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.SymbolShape.UpsideDownTriangle">
            <summary>
            An upsideDown triangle
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.SymbolPattern">
            <summary>
            If a symbol is defined as a pattern type then this enum further defines
            the exact pattern.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.SymbolPattern.PlusSign">
            <summary>
            A plus sign.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.SymbolPattern.X">
            <summary>
            An X.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.SymbolPattern.PlusFilledDiamond">
            <summary>
            A plus filled diamond.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.SymbolPattern.XFilledSquared">
            <summary>
            An X filled square.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.SymbolPattern.PlusFilledCircle">
            <summary>
            A plus filled circle.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Annotation">
            <base>GraphicsServer.GSNet.Charting.TextBase</base>
            <summary>
            Represents a movable text object that can be placed anywhere on the chart.
            </summary>
            <remarks>
            The Chart object contains an AnnotationList property. To add an Annotation object to a chart, 
            simply allocate a new Annotation and add it to the chart's AnnotationList.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList">AnnotationList Property</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.AnnotationCollection">AnnotationCollection Class</seealso>
            <example>
            	<code lang="CS" title="[New Example]">
            //Create an annotation
            Annotation ann = new Annotation();
            ann.Text = "Note this, world!";
            //Add it to the chart
            this.gsNetWinChart1.Chart.AnnotationList.Add(ann);
            </code>
            	<code lang="VB" title="[New Example]">
            'Create an annotation
            Dim ann As Annotation = New Annotation
            ann.Text = "Note this, world!"
            'Add it to the chart
            Me.GsNetWinChart1.Chart.AnnotationList.Add(ann)
                </code>
            </example>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TextBase">
            <base>GraphicsServer.GSNet.Charting.VisualChartObject</base>
            <summary>
            This is the base class for title and annotation objects.
            A text base object contains its own font, color, and other text properties
            and is also a visual chart object that is displayed and can be resized. It draws its text
            within its visual chart object bounds.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TextBase.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TextBase.Paint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TextBase.ToString">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TextBase.AutoSizeFontBasedOnBoundingRect">
            <summary>
            Recalculates the font size for the text object based on the text object's
            bounding rect.
            </summary>
            <remarks>
            This method is useful when programmatically changing the text in the text object.
            If the AutoSizeText property is set to true, the text will not resize until the
            bounding rect is resized or until this method is called.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.TextBase.AutoSizeText">AutoSizeText Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextBase.Text">
            <summary>Sets or gets the text to display.</summary>
            <value>string</value>
            <example>
                The following code fragment sets the text of the chart title. Note that the text
                will display as two lines.
                <code lang="CS" title="[C#]">
            this.gsNetWinChart1.Chart.ChartTitle.Text = "Northwind Trading Company" + Environment.NewLine + "Sales by Category";
                </code>
            	<code lang="VB" title="[VB]">
            Me.GsNetWinChart1.Chart.ChartTitle.Text = "Northwind Trading Company" + Environment.NewLine + "Sales by Category"
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextBase.TextFormat">
            <summary>
            Gets a TextPainter object that controls the way the text is drawn. 
            </summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.TextPainter">TextPainter class</see> 
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TextPainter">TextPainter Class</seealso>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TextPainter"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextBase.Vertical">
            <value>bool</value>
            <remarks>
            Set to true to draw the text vertically. This is different than rotating it 90
            degrees. This property will stack the letters on top of each other.
            </remarks>
            <summary>Controls whether the text is drawn vertically.</summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TextBase.AutoSizeText">
            <value>bool</value>
            <remarks>
            Set to true to turn auto-sizing on. When auto-sizing is turned on, the text font
            will automatically resize based on the new size of the element's bounding box.
            </remarks>
            <summary>
            Controls whether the font automatically resizes when the text element's bounding
            box resizes.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Annotation.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Annotation.#ctor(System.String)">
            <summary>
            Constructs an instance of this type with the Name property 
            set to the specified string.
            </summary>
            <param name="annotationName"></param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Annotation.PaintBackgroundAndBorder(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Annotation.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Annotation.IsPointInObject(System.Drawing.Point,GraphicsServer.GSNet.Charting.ChartMouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Annotation.ToString">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Annotation.HandleCoupleToChange(GraphicsServer.GSNet.Charting.CoupleToEventArgs)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Annotation.CoupleToObject">
            <summary>
            Gets or sets a value that indicates the object to which an annotation is coupled.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.CoupleToObject"/></value>
            <remarks><strong>Note:</strong> Web form appplications may need to call EnableAnnotationCoupling
            in the Page Load event. See <see cref="M:GraphicsServer.GSNet.Charting.Chart.EnableAnnotationCoupling"/>
            for more information.</remarks>
            <example>
            	<code lang="CS" title="Adding a title to the legend">
            /* 
             * Place an annotation along the bottom edge of the 
             * legend, where it can serve as the legend title 
             */
            Chart cht = this.gsNetWinChart1.Chart; 
            Annotation ann = new Annotation();
            ann.Text = "Legend";
            ann.Size = new System.Drawing.Size(60, 20);
            ann.CoupleToEdge = CoupleToEdge.Top;
            ann.CoupleToObject = CoupleToObject.Legend;
            cht.AnnotationList.Add(ann);
            cht.SetRelativeLocation(ann, cht.Legend, RelativeLocation.BottomMiddle);
                </code>
            	<code lang="VB" title="Adding a title to the legend">
            ' Place an annotation along the bottom edge of the
            ' legend, where it can serve as the legend title
            Dim ann As Annotation = New Annotation
            With ann
                .Text = "Legend"
                .Size = New System.Drawing.Size(60, 20)
                .CoupleToEdge = CoupleToEdge.Top
                .CoupleToObject = CoupleToObject.Legend
            End With
            With Me.GsNetWinChart1.Chart
                .AnnotationList.Add(ann)
                .SetRelativeLocation(ann, .Legend, RelativeLocation.BottomMiddle)
                .SetRelativeLocation(.ChartTitle, .Grid, RelativeLocation.TopMiddle)
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Annotation.CoupleToEdge">
            <summary>
            Gets or sets a value inidicating which edge of an object an annotation is coupled
            to.
            </summary>
            <remarks>
            	<strong>Note:</strong> Web form appplications may need to call
            EnableAnnotationCoupling in the Page Load event. See
            <see cref="M:GraphicsServer.GSNet.Charting.Chart.EnableAnnotationCoupling"/> for more
            information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.CoupleToEdge"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Annotation.TooltipText">
            <summary>Gets or sets the text to display in the popup tooltip.</summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Annotation.Name">
            <summary>Gets or sets the name of the annotation.</summary>
            <value>string</value>
            <remarks>
            The name text is not displayed but can be used to retrieve an annotation from the
            AnnotationList. See the example for the GetAnnotation method.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList">AnnotationList Property</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AnnotationCollection.GetAnnotation(System.String)">GetAnnotation Method</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Annotation.CalloutOn">
            <summary>Turns callout mode on and off.</summary>
            <remarks>
            Set to true to turn the callout mode on. When the mode is turned on, the
            annotation has a pointer extended from the annotation rectangle to
            the screen point specified by the 
            <see cref="P:GraphicsServer.GSNet.Charting.Annotation.CalloutPointX">CalloutPointX</see> 
            and <see cref="P:GraphicsServer.GSNet.Charting.Annotation.CalloutPointY">CalloutPointY</see> 
            properties. 
            <para>When callout mode is turned on, the annotation does not paint all the effects
            specified in the <see cref="P:GraphicsServer.GSNet.Charting.VisualChartObject.Border">Border</see>
            property. Instead, the annotation paints a simple border around the callout based
            on the current "simple" border settings.</para>
            </remarks>
            <value>bool</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Annotation.CalloutPointX">CalloutPointX Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Annotation.CalloutPointY">CalloutPointY Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.VisualChartObject.Border">Border Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Annotation.CalloutPointX">
            <summary>Sets or gets the X coordinate for the anchor point of the Callout.</summary>
            <value>float</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Annotation.CalloutPointY">CalloutPointY Property</seealso>
            <example>
                The following code creates a simple annotation and places the callout anchor
                point at the coordinates of a data point on a chart.
                <code lang="CS" title="Example (C#)">
            // Creates a simple annotation for a data point
            public void AnnotateDataPoint(Chart cht, int seriesNumber, int dataPointNumber, string annotationText)
            {
                //Create an annotation
                Annotation ann = new Annotation();
                ann.Text = annotationText;
                ann.CalloutOn = true;
             
                //Get the coordinates of the data point
                Point dataPointCoords = GetDataPointCoords(cht, seriesNumber, dataPointNumber);
             
                //Set the anchor point for the annotation's callout
                ann.CalloutPointX = dataPointCoords.X;
                ann.CalloutPointY = dataPointCoords.Y;
             
                //Add the annotation to the chart
                cht.AnnotationList.Add(ann);
            }
             
            //Returns the chart coordinates of a data point
            public Point GetDataPointCoords(Chart cht, int seriesNumber, int dataPointNumber)
            {
                //Get data point's X value and Y value
                double xData = cht.GetSeriesDrawing(seriesNumber).GetSeries().GetValue(SeriesComponent.X, dataPointNumber);
                double yData = cht.GetSeriesDrawing(seriesNumber).GetSeries().GetValue(SeriesComponent.Y, dataPointNumber);
             
                 //Convert the x,y values from data values to Grid coordinates
                 int xGridCoord = (int)(cht.Grid.AxisX.TransformPoint(xData));
                 int yGridCoord = (int)(cht.Grid.AxisY.TransformPoint(yData));
             
                 //Now calculate chart coordinates
                 Point chartPoint = new Point(cht.Grid.Location.X + xGridCoord, cht.Grid.Location.Y + yGridCoord);
                 return chartPoint;
            }
                </code>
            	<code lang="VB" title="Example (VB)">
            'Creates a simple annotation for a data point 
            Public Sub AnnotateDataPoint(ByRef cht As Chart, ByVal seriesNumber As Integer, ByVal dataPointNumber As Integer, ByVal annotationText As String)
                'Create an annotation
                Dim ann As Annotation = New Annotation
                ann.Text = annotationText
                ann.CalloutOn = True
             
                'Get the coordinates of the data point
                Dim dataPointCoords As Point = GetDataPointCoords(cht, seriesNumber, dataPointNumber)
             
                'Set the anchor point for the annotation's callout
                ann.CalloutPointX = dataPointCoords.X
                ann.CalloutPointY = dataPointCoords.Y
             
                'Add the annotation to the chart
                cht.AnnotationList.Add(ann)
            End Sub
             
            'Returns the chart coordinates of a data point 
            Public Function GetDataPointCoords(ByVal cht As Chart, ByVal seriesNumber As Integer, ByVal dataPointNumber As Integer) As Point
                'Get data point's X value and Y value
                Dim xData As Double = cht.GetSeriesDrawing(seriesNumber).GetSeries().GetValue(SeriesComponent.X, dataPointNumber)
                Dim yData As Double = cht.GetSeriesDrawing(seriesNumber).GetSeries().GetValue(SeriesComponent.Y, dataPointNumber)
             
                'Convert the x,y values from data values to Grid coordinates
                Dim xGridCoord As Integer = CType(cht.Grid.AxisX.TransformPoint(xData), Integer)
                Dim yGridCoord As Integer = CType(cht.Grid.AxisY.TransformPoint(yData), Integer)
             
                'Now calculate chart coordinates
                Dim chartPoint As Point = New Point(cht.Grid.Location.X + xGridCoord, cht.Grid.Location.Y + yGridCoord)
                Return chartPoint
            End Function
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Annotation.CalloutPointY">
            <summary>Sets or gets the Y coordinate for the anchor point of the Callout.</summary>
            <value>float</value>
            <example>
            See the example for the CalloutPointX property.
            </example>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Annotation.CalloutPointX">CalloutPointX Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Annotation.CalloutAttachWidth">
            <summary>
            Specifies the width of the Callout extension at the point where it joins the
            annotation rectangle.
            </summary>
            <value>int</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AnnotationCollection">
            <summary>
            Manages a collection of annotation objects.
            </summary>
            <remarks>
            This class is simply a wrapper around the array list that contains the
            list of annotation objects.  Note that the Chart class contains the
            <see cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList"/> property which
            is of type AnnotationCollection. The AnnotationList and AnnotationCollection
            are essentially the some thing. 
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList">AnnotationList Property</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Annotation">Annotation Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.#ctor(System.Collections.ICollection)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.Add(System.Object)">
            <summary>
            Adds an Annotation object to the collection in the AnnotationList
            property.
            </summary>
            <remarks>
            This method is overridden for connecting the Annotaton object to internal structures.
            </remarks>
            <returns>Index in the list of the added annotation.</returns>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Annotation">Annotation Class</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList">AnnotationList Property</seealso>
            <example>
            	<code lang="CS" title="Adding an annotation">
            //Create an annotation
            Annotation myNote = new Annotation();
            myNote.Text = "Note this, world!";
             
            //Add the annotation to the chart 
            int noteIndex = this.gsNetWinChart1.Chart.AnnotationList.Add(myNote);
             
            //Use the index to retrieve the text of the annotation
            MessageBox.Show(this.gsNetWinChart1.Chart.AnnotationList.GetAnnotation(noteIndex).Text);
                </code>
            	<code lang="VB" title="Adding an annotation">
            'Create an annotation 
            Dim myNote As New Annotation
            myNote.Text = "Note this, world!"
             
            'Add the annotation to the chart 
            Dim noteIndex As Integer = Me.GsNetWinChart1.Chart.AnnotationList.Add(myNote)
             
            'Use the index to retrieve the text of the annotation
            MessageBox.Show(Me.GsNetWinChart1.Chart.AnnotationList.GetAnnotation(noteIndex).Text)
                </code>
            </example>
            <param name="value">Annotation object to add.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.Remove(System.Object)">
            <summary>
            Removes an Annotation from the collection in the AnnotationList property. The
            object passed in should be an Annotation object.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AnnotationCollection.RemoveAnnotation(System.Int32)">RemoveAnnotation Method</seealso>
            <example>
                The SetGrid...Title methods create annotations named GridBottomTitle,
                GridLeftTitle, and so on. The following example demonstrates how to remove a grid
                title after you have created one. 
                <code lang="CS" title="Removing a grid title">
            // Title the left edge of the grid     
            Annotation ann = this.gsNetWinChart1.Chart.SetGridLeftTitle("Title");
            .
            .
            .
            //Remove the left grid title
            this.gsNetWinChart1.Chart.AnnotationList.Remove(ann);
                </code>
            	<code lang="VB" title="Removing a grid title">
            'Title the left edge of the grid     
            Dim ann As Annotation = Me.GsNetWinChart1.Chart.SetGridLeftTitle("Title")
            .
            .
            .
            'Remove the left grid title
            Me.GsNetWinChart1.Chart.AnnotationList.Remove(ann)
                </code>
            </example>
            <param name="value">The Annotation object to remove from the AnnotationList.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.SetAnnotationAt(System.Int32,GraphicsServer.GSNet.Charting.Annotation)">
            <summary>Sets the annotation at the specified index.</summary>
            <remarks>
            If an annotation exists at the specified index, it is replaced with the
            annotation passed as the second argument. If the index does not exist in the list, the
            annotation is added to the end of the list.
            </remarks>
            <returns>Index in the list of the added annotation.</returns>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList">AnnotationList Property</seealso>
            <example>
            	<code lang="CS" title="Replacing an annotation">
            //Create two annotations 
            Annotation annFirst = new Annotation();
            annFirst.Text = "Hello!";
            Annotation annSecond = new Annotation();
            annSecond.Text = "Goodbye!";
             
            //Add the first annotation to the chart 
            int noteIndex = this.gsNetWinChart1.Chart.AnnotationList.Add(annFirst);
             
            //Use the index to retrieve the text of the annotation
            MessageBox.Show(this.gsNetWinChart1.Chart.AnnotationList.GetAnnotation(noteIndex).Text);
                        
            //Replace the first annotation with the second annotation
            noteIndex = this.gsNetWinChart1.Chart.AnnotationList.SetAnnotationAt(noteIndex, annSecond);
             
            //Use the index to retrieve the text of the annotation
            MessageBox.Show(this.gsNetWinChart1.Chart.AnnotationList.GetAnnotation(noteIndex).Text);
                </code>
            	<code lang="VB" title="Replacing an annotation">
            'Create two annotations 
            Dim annFirst As New Annotation
            annFirst.Text = "Hello!"
            Dim annSecond As New Annotation
            annSecond.Text = "Goodbye!"
             
            'Add the first annotation to the chart 
            Dim noteIndex As Integer = Me.GsNetWinChart1.Chart.AnnotationList.Add(annFirst)
             
            'Use the index to retrieve the text of the annotation
            MessageBox.Show(Me.GsNetWinChart1.Chart.AnnotationList.GetAnnotation(noteIndex).Text)
             
            'Replace the first annotation with the second annotation
            noteIndex = Me.GsNetWinChart1.Chart.AnnotationList.SetAnnotationAt(noteIndex, annSecond)
             
            'Use the index to retrieve the text of the annotation
            MessageBox.Show(Me.GsNetWinChart1.Chart.AnnotationList.GetAnnotation(noteIndex).Text)
                </code>
            </example>
            <param name="index">zero based index.</param>
            <param name="annotation">Annotation object to add to the AnnotationList.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.GetAnnotation(System.Int32)">
            <summary>Retrieves the annotation at the specified index in the AnnotationList.</summary>
            <returns>Annotation object or null if no annotation exists at the specified index.</returns>
            <remarks>See the example for the SetAnnotationAt method.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList">AnnotationList Property</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AnnotationCollection.SetAnnotationAt(System.Int32,GraphicsServer.GSNet.Charting.Annotation)">SetAnnotationAt Method</seealso>
            <param name="index">zero based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.GetAnnotation(System.String)">
            <summary>Retrieves an annotation whose Name property matches the specified string.</summary>
            <remarks>
            This method searches the annotations in the chart's AnnotationList and returns 
            the first one that contains the specified string in its Name property.
            </remarks>
            <returns>Annotation object or null if not found.</returns>
            <example>
            	<code lang="CS" title="Retrieving an annotation by name">
            //Search for an annotation named "Waldo"
            Annotation ann = this.gsNetWinChart1.Chart.AnnotationList.GetAnnotation("Waldo");
            if (ann == null)
            {
                MessageBox.Show("Annotation doesn't exist!");
            }
            else
            {
                MessageBox.Show("Annotation Found. Text: " + ann.Text);
            }
                </code>
            	<code lang="VB" title="Retrieving an annotation by name">
            'Search for an annotation named "Waldo" 
            Dim ann As Annotation = Me.GsNetWinChart1.Chart.AnnotationList.GetAnnotation("Waldo")
            If (ann Is Nothing) Then
                MessageBox.Show("Annotation doesn't exist!")
            Else
                MessageBox.Show("Annotation Found. Text: " + ann.Text)
            End If
                </code>
            </example>
            <param name="name">The name of the annotation to return.</param>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Annotation.Name">Annotation.Name Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList">AnnotationList Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.RemoveAnnotation(System.Int32)">
            <summary> 
            Removes the annotation at the specified index in the AnnotationList.
            </summary>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList">AnnotationList Property</seealso>
            <remarks>
            To replace the annotation at a particular index with another annotation, call the
            SetAnnotationAt method.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AnnotationCollection.SetAnnotationAt(System.Int32,GraphicsServer.GSNet.Charting.Annotation)">SetAnnotationAt Method</seealso>
            <example>
            	<code lang="CS" title="Using an index to remove an annotation">
            //Create an annotation
            Annotation myNote = new Annotation();
             
            //Add the annotation to the chart 
            int noteIndex = this.gsNetWinChart1.Chart.AnnotationList.Add(myNote);
            .
            .
            .
            //Remove the annotation
            this.gsNetWinChart1.Chart.AnnotationList.RemoveAnnotation(noteIndex);
            .
                </code>
            	<code lang="VB" title="Using an index to remove an annotation">
            'Create an annotation 
            Dim myNote As New Annotation
             
            'Add the annotation to the chart 
            Dim noteIndex As Integer = Me.GsNetWinChart1.Chart.AnnotationList.Add(myNote)
            .
            .
            .
            'Remove the annotation
            Me.GsNetWinChart1.Chart.AnnotationList.RemoveAnnotation(noteIndex)
                </code>
            </example>
            <param name="index">zero based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.SerializeToTemplate(System.Xml.XmlTextWriter,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.SerializeFromTemplate(System.Xml.XmlTextReader,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>
            Writes property settings for all Annotation objects currently in the list out to
            XML.
            </summary>
            <returns>
            This method returns an XmlElement if properties were written. A null value is
            returned if there were no properties to write.
            </returns>
            <param name="doc">This paramenter is the XmlDocument context used to create the new element node.</param>
            <param name="flags">Template flags to control template writing.  See  <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Reads settings for properties of Annotation objects serialized in elements of an
            XmlNode.
            </summary>
            <param name="node">XmlNode that contains the AnnotationList properties.</param>
            <param name="flags">Template flags to control template writing.  See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.AnnotationCollection.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <exclude/>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.AnnotationCollection.AnnotationAddEvent">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.AnnotationCollection.AnnotationAddEventHandler">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.CoupleToObject">
            <summary>Defines which object an annotation is coupled to.</summary>
            <remarks>
                An annotation can be coupled to an edge of one and only one object. For example, an
                annotation can be coupled to the bottom edge of the chart title. Whenever the chart
                title moves or resizes, the coupled annotation will move with it, maintaining the
                same distance from the bottom edge of the chart title object. 
                <para>Note that multiple annotations can be coupled to the same edge of an
                object.</para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.CoupleToEdge">CoupleToEdge Enumeration</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Annotation">Annotation Class</seealso>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.CoupleToObject.None">
            <summary>
            The annotation is not coupled.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.CoupleToObject.ChartTitle">
            <summary>
            The annotation is coupled to the Chart Title.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.CoupleToObject.Grid">
            <summary>
            The annotation is coupled to the Grid.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.CoupleToObject.Legend">
            <summary>
            The annotation is coupled to the Legend.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.CoupleToEdge">
            <summary>
            Defines which edge of an object an annotation is coupled to. 
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.CoupleToObject">CoupleToObject Enumeration</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Annotation">Annotation Class</seealso>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.CoupleToEdge.Bottom">
            <summary>
            The annotation is not coupled.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.CoupleToEdge.Left">
            <summary>
            The annotation is coupled to the Chart Title.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.CoupleToEdge.Right">
            <summary>
            The annotation is coupled to the Grid.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.CoupleToEdge.Top">
            <summary>
            The annotation is coupled to the Legend.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.BorderLabel">
            <summary>
            A border label is a non-movable text object that can be displayed within
            some types of VisualChartObject classes, such as Grid and Device objects.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.VisualChartObject">VisualChartObject Class</seealso>
            <example>
                The following fragment labels the X and Y axis of a chart by placing BorderLabel
                objects along the bottom and left sides of the chart's grid. 
                <code lang="CS" title="C# Example">
            //Create a label for the X axis
            BorderLabel labelBottom = new BorderLabel("X Axis");
            labelBottom.Text = "X Axis";
            labelBottom.RelativeLocation = RelativeLocation.BottomMiddle;
            labelBottom.OffsetTopBottom = 0;
             
            //Create a label for the Y axis
            BorderLabel labelLeft = new BorderLabel("Y Axis");
            labelLeft.Text = "Y Axis";
            labelLeft.RelativeLocation = RelativeLocation.LeftMiddle;
            labelLeft.OffsetTopBottom = 0;
             
            //Add the border labels to the grid
            this.gsNetWinChart1.Chart.Grid.BorderLabelList.Add(labelBottom);
            this.gsNetWinChart1.Chart.Grid.BorderLabelList.Add(labelLeft);
                </code>
            	<code lang="VB" title="VB Example">
            'Create a label for the bottom of the grid
            Dim labelBottom As BorderLabel = New BorderLabel
            labelBottom.Text = "X Axis"
            labelBottom.RelativeLocation = RelativeLocation.BottomMiddle
            labelBottom.OffsetTopBottom = 0
             
            'Create a label for the left side of the grid
            Dim labelLeft As BorderLabel = New BorderLabel
            labelLeft.Text = "Y Axis"
            labelLeft.RelativeLocation = RelativeLocation.LeftMiddle
            labelLeft.OffsetTopBottom = 0
             
            With Me.GsNetWinChart1.Chart
                'Add the border labels to the grid
                .Grid.BorderLabelList.Add(labelBottom)
                .Grid.BorderLabelList.Add(labelLeft)
            End With
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabel.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabel.#ctor(System.String)">
            <summary>
            Constructs an instance of this type with the Name property 
            set to the specified string.
            </summary>
            <param name="labelName"></param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabel.Paint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the border label based on the current property settings.
            </summary>
            <param name="e">PaintEventArgs</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BorderLabel.Name">
            <summary>Sets and gets the name of the label.</summary>
            <value>string</value>
            <remarks>
            The name is not displayed but can be used to retrieve a border label from the
            BorderLabelList.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.BorderLabelList">BorderLabelList Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BorderLabel.Text">
            <summary>
            Sets or gets the text displayed in the label.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BorderLabel.TextFormat">
            <summary>
            Gets a TextPainter object that controls the way the text is drawn. 
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.TextPainter"/> class for 
            more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TextPainter"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TextPainter">TextPainter Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BorderLabel.RelativeLocation">
            <summary>
            This value determines the location of the label relative to one of the
            four sides of the object in which it is drawn.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.RelativeLocation"/></value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.BorderLabel.RelativeLocation">RelativeLocation Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BorderLabel.OffsetTopBottom">
            <summary>
            Sets and gets the offset from the top or bottom edge of the label's text box.
            </summary>
            <value>int</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.BorderLabel.RelativeLocation">RelativeLocation Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.BorderLabel.OffsetLeftRight">OffsetLeftRight Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BorderLabel.OffsetLeftRight">
            <summary>
            Sets and gets the offset from the left or right edge of the label's text box. 
            </summary>
            <remarks>
            The setting for this property becomes relevant only when the RelativeLocation property
            of the border label is set to a location other than the middle (LeftMiddle, RightMiddle,
            TopMiddle, BottomMiddle).
            </remarks>
            <value>int</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.BorderLabel.RelativeLocation">RelativeLocation Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.BorderLabel.OffsetTopBottom">OffsetTopBottom Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BorderLabel.IsVisible">
            <summary>
            Specifies whether the label is visible.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BorderLabel.FlipText">
            <summary>
            Controls whether the text should be rotated 180 degrees.
            </summary>
            <remarks>
                Setting the FlipText property to true rotates the label's text 180 degrees. 
                <para>This property is particularly useful for border labels positioned along the
                right or left sides of an object. For example, by default a label on the right side
                of an object reads from top down. Setting the FlipText property to true causes the
                label to read from bottom up.</para>
            </remarks>
            <value>bool</value>
            <example>
                The following code fragment moves a chart's Y axis to the right side of the
                grid and moves the associated BorderLabel to the right, rotating the label text 180
                degrees. 
                <code lang="CS" title="C# Example">
            Chart cht = this.gsNetWinChart1.Chart;
            .
            .  //Omitted code creates a BorderLabel named "Y Axis"
            .
            //Move the Y axis to the right side of the grid
            cht.Grid.AxisY.AxisPosition = AxisPositionType.Right;
             
            //Move the Y axis label to the right side of the grid
            BorderLabel labelYAxis = cht.Grid.BorderLabelList.GetBorderLabel("Y Axis");
            if (null != labelYAxis)
            {
                labelYAxis.RelativeLocation = RelativeLocation.RightMiddle;
                labelYAxis.FlipText = true;
            }
                </code>
            	<code lang="VB" title="VB Example">
            With Me.GsNetWinChart1.Chart
            .
            .  'Omitted code creates a BorderLabel named "Y Axis"
            .
                'Move the Y axis to the right side of the grid
                .Grid.AxisY.AxisPosition = AxisPositionType.Right
             
                'Move the Y axis label to the right side of the grid
                Dim labelYAxis As BorderLabel = .Grid.BorderLabelList.GetBorderLabel("Y Axis")
                If Not labelYAxis Is Nothing Then
                    labelYAxis.RelativeLocation = RelativeLocation.RightMiddle
                    labelYAxis.FlipText = True
                End If
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BorderLabel.VisualChartObject">
            <summary>
            Sets or gets a reference to the VisualChartObject on which the label draws.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.VisualChartObject"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.BorderLabelList">
            <summary>
            This class wraps an array list that contains the list of BorderLabel objects.
            </summary>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Grid.BorderLabelList">Grid.BorderLabelList Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.DeviceBase.BorderLabelList">DeviceBase.BorderLabelList Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabelList.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabelList.#ctor(System.Collections.ICollection)">
            <exclude/>
            <param name="c"></param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabelList.SetVisualChartObjectBackPointer(GraphicsServer.GSNet.Charting.VisualChartObject)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabelList.Add(System.Object)">
            <summary>
            Adds a BorderLabel or WidgetBorderLabel object to the list.
            </summary>
            <remarks>
            This method is overridden for connecting the BorderLabel object to 
            internal structures.
            <para>Note that only BorderLabel objects should be added to a chart's
            BorderLabel list and only WidgetBorderLabel objects to a widget's BorderLabel
            list.</para> 
            </remarks>
            <returns>Index of the added object in the list.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.BorderLabelList.SetLabelAt(System.Int32,GraphicsServer.GSNet.Charting.BorderLabel)">SetLabelAt Method</seealso>
            <param name="value">BorderLabel or WidgetBorderLabel object to add.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabelList.Remove(System.Object)">
            <summary>
            Removes a BorderLabel from the collection. 
            </summary>
            <remarks>
            The object passed in should be type BorderLabel.
            </remarks>
            <param name="value">The BorderLabel object to remove from the 
            BorderLabelList.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabelList.SetLabelAt(System.Int32,GraphicsServer.GSNet.Charting.BorderLabel)">
            <summary> 
            Places a BorderLabel object in the list at the specified index. 
            </summary>
            <remarks>If a BorderLabel object already exists at that index, it is replaced with the specified label. 
            If the index does not exist in the list, then the BorderLabel object is added to the end of the list.
            </remarks>
            <param name="index">Zero-based index.</param>
            <param name="borderLabel">BorderLabel object to place in the list.</param>
            <returns>Index at which the BorderLabel was set in the list.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabelList.GetBorderLabel(System.Int32)">
            <summary> 
            Retrieves the BorderLabel at the specified index.
            </summary>
            <returns>BorderLabel object or null if index does not contain an object.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.BorderLabelList.Add(System.Object)">Add Method</seealso>
            <remarks>
            Note that the Add method returns the zero-based index of the object when it is
            added to the list.
            </remarks>
            <param name="index">Zero-based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabelList.GetBorderLabel(System.String)">
            <summary> 
            Retrieves a BorderLabel with the specified name. 
            </summary>
            <remarks>
            This method searches the BorderLabels in the list and returns the first one that
            contains the specified string in its <see cref="P:GraphicsServer.GSNet.Charting.BorderLabel.Name"/> property.
            </remarks>
            <returns>BorderLabel object or null if not found.</returns>
            <seealso cref="P:GraphicsServer.GSNet.Charting.BorderLabel.Name">BorderLabel.Name Property</seealso>
            <example>
                The following code fragment moves a chart's Y axis to the right side of the
                grid and moves the associated BorderLabel to the right side as well.
                <code lang="CS" title="C# Example">
            Chart cht = this.gsNetWinChart1.Chart;
            .
            .  //Omitted code creates a BorderLabel named "Y Axis"
            .
            //Move the Y axis to the right side of the grid
            cht.Grid.AxisY.AxisPosition = AxisPositionType.Right;
             
            //Move the Y axis label to the right side of the grid
            BorderLabel labelYAxis = cht.Grid.BorderLabelList.GetBorderLabel("Y Axis");
            if (null != labelYAxis)
            {
                labelYAxis.RelativeLocation = RelativeLocation.RightMiddle;
                labelYAxis.FlipText = true;
            }
                </code>
            	<code lang="VB" title="VB Example">
            With Me.GsNetWinChart1.Chart
            .
            .  'Omitted code creates a BorderLabel named "Y Axis"
            .
                'Move the Y axis to the right side of the grid
                .Grid.AxisY.AxisPosition = AxisPositionType.Right
             
                'Move the Y axis label to the right side of the grid
                Dim labelYAxis As BorderLabel = .Grid.BorderLabelList.GetBorderLabel("Y Axis")
                If Not labelYAxis Is Nothing Then
                    labelYAxis.RelativeLocation = RelativeLocation.RightMiddle
                    labelYAxis.FlipText = True
                End If
            End With
                </code>
            </example>
            <param name="name">The name of the BorderLabel to return.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabelList.RemoveBorderLabel(System.Int32)">
            <summary>Removes the BorderLabel object at the specified index.</summary>
            <remarks>
            Note that the Add method returns the zero-based index of the object when it is
            added to the list.
            </remarks>
            <returns>
            This method returns true if the specified border label exists and was removed.
            </returns>
            <param name="index">Zero-based index.</param>
            <seealso cref="M:GraphicsServer.GSNet.Charting.BorderLabelList.Add(System.Object)">Add Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.BorderLabelList.SetLabelAt(System.Int32,GraphicsServer.GSNet.Charting.BorderLabel)">SetLabelAt Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabelList.RemoveBorderLabel(System.String)">
            <summary>
            Removes a BorderLabel object with the specified string in its Name property from
            the list.
            </summary>
            <remarks>
            This method searches the list for a BorderLabel object that has the specified
            string in its Name property. The first object found is removed from the list.
            </remarks>
            <returns>
            This method returns true if the specified border label exists and was removed.
            </returns>
            <param name="name">Name of the BorderLabel to remove.</param>
            <seealso cref="P:GraphicsServer.GSNet.Charting.BorderLabel.Name">BorderLabel.Name Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabelList.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>
            Write properties of all BorderLabel objects currently in the list out to
            XML.
            </summary>
            <returns>
            This method returns an XmlElement if properties were written. A null value is
            returned if there were no properties to write.
            </returns>
            <param name="doc">This paramenter is the XmlDocument context used to create the new element node.</param>
            <param name="flags">Template flags to control template writing. See the <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/> class.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.BorderLabelList.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Reads in properties of all BorderLabel objects that are children of the passed in Xml Node.
            </summary>
            <param name="node">XmlNode that contains the BorderLabelList properties.</param>
            <param name="flags">Template flags to control template writing. See the <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/> class.</param>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Class</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Title">
            <summary>
            Provides the title for the chart. A chart has a single title but can include many
            annotations.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Annotation">Annotation Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Title.TooltipText">
            <summary>
            Sets or gets the text to display in the popup tooltip.
            </summary>
            <value>string</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendBase">
            <summary>Base class from which all trend classes are derived.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendBase.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendBase.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <remarks>
            The base constructor requires the SeriesComponent the trend uses when calculating
            trend data.
            </remarks>
            <summary>Constructs an instance of this type.</summary>
            <param name="seriesComp">This parameter specifies the series component that the trend
            will use when calculating the trend data.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendBase.GenerateDrawingObjects(System.Collections.ArrayList,GraphicsServer.GSNet.Charting.AxisX,GraphicsServer.GSNet.Charting.AxisY)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendBase.LineProperties">
            <summary>
            Gets the Line object that draws trend lines. This property exists to provide
            access to the properties and methods of the underlying Line object. 
            <!--DXMETADATA end -->
            	<!--DXMETADATA start type="TaggedComment" source="Item" id="##OVERLOADS" format="%%comment%%" --><!--DXMETADATA end --><!--DXMETADATA start type="FilteredItemList" scrap="OVERLOAD_LIST" namespace="property" source="Item" filter="" format="<h4 class=dxh4>$$OverloadList$$</h4>%%filtereditemlist%%" --><!--DXMETADATA end --><!--DXMETADATA start type="FilteredItemList" scrap="SYNTAX" namespace="language" NoHeader="True" NoFooter="True" filter="" format="" -->
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
            <example>
                The following example searches for a trend of TrendType.Mean and, if found, changes
                the line properties.
                <code lang="CS" title="C# Example]">
            // Cycle through the SeriesDrawingList
            foreach (SeriesDrawing s in this.gsNetWinChart1.Chart.SeriesDrawingList)
            {
                //Find a SeriesDrawing that has trends
                if (s.TrendCount &gt; 0)
                {
                    // Check each trend
                    for (int i = 0; i &lt; s.TrendCount; i++)
                    {
                        // If it's our type...
                        if (s.GetTrend(i).Trendtype == TrendType.Mean)
                        {
                            // Change the color and thickness of the line
                            TrendBase t = s.GetTrend(i);
                            t.LineProperties.Color = Color.Blue;
                            t.LineProperties.Thickness = 4;
                
                        }
                    }
                }
            }
            // Redraw the chart
            this.gsNetWinChart1.Chart.ReconcileAndRecalcAll();
                </code>
            	<code lang="VB" title="[VB Example]">
            Dim i As Integer
            ' Cycle through the SeriesDrawingList
            For Each s As SeriesDrawing In Me.GsNetWinChart1.Chart.SeriesDrawingList
                ' Find a SeriesDrawing that has trends
                If s.TrendCount &gt; 0 Then
                    ' Check each trend
                    For i = 0 To (s.TrendCount - 1)
                        ' If it's our type...
                        If s.GetTrend(i).Trendtype = TrendType.Mean Then
                            ' Change the color and thickness of the line
                            Dim t As TrendBase = s.GetTrend(i)
                            t.LineProperties.Color = Color.Blue
                            t.LineProperties.Thickness = 4
                        End If
                    Next
                End If
            Next
            ' Redraw the chart
            Me.GsNetWinChart1.Chart.ReconcileAndRecalcAll()
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendBase.Trendtype">
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
            <summary>
            Gets the Trend Type of this trend object.
            </summary>
            <remarks>Refer to the <see cref="T:GraphicsServer.GSNet.Charting.TrendType"/> enumeration for details.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendBase.IsCalculated">
            <value>bool</value>
            <remarks>
            Returns true if the trend data has been calculated. Note that the grid will make
            sure that this data is calculated for the first time if the user has not already forced
            a calculation via the series. Once a trend is allocated it can be added to a specific
            SeriesDrawing object via the SeriesDrawing.AddTrend() method. A specific instance of a
            trend should be added to one and only one SeriesDrawing object. Once attached to that
            SeriesDrawing object the trend object will calculate the trend results and buffer that
            data for later use.
            </remarks>
            <summary>Indicates if trend data has been calculated for the first time.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendExponentialOne">
            <base>GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial</base>
            <summary>
            Exponential One Trend.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial">
            <base>GraphicsServer.GSNet.Charting.TrendBase</base>
            <summary>
            This is the base class for the Variable Order Polynomial Type trends.
            The general equation for a polynomial order trend is:
            Y = a + b * (x) + c * (x ^ 2) + d * (x ^ 3) + e * (x ^ 4) + f * (x ^ 5) + ...
            The degree to which X gets raised to depends on the degree property.
            A maximum degree of 9 is allowed.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculataions.</param>
            <param name="deg">Degrees of the polynomial. The maximum degree allowed is 
            nine (a 9th order polynomial). Any degree value higher than nine will be reset
            to the value of 9. If a best fit curve is desired (a curve passing through
            all your data points), use a <see cref="T:GraphicsServer.GSNet.Charting.TrendSplineFit"/>
            instead of a <see cref="T:GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial"/>.
            </param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial.Coefficients">
            <summary>
            An array containing the Coefficients of the Regression equation. These can be used
            to find the underlying equation. 
            For example, assume the trend's equation is: Y = a + b * X + c * (X ^ 2).
            Then to calculate the real equation substitute the Coefficents in for the "a, b, c" values:
            Coefficients[0] = a
            Coefficients[1] = b
            Coefficients[2] = c
            Thus the new equation would be:
            Y = Coefficients[0] + Coefficients[1] * X + Coefficients[2] * (X ^ 2)
            </summary>
            <value>double array</value>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendExponentialOne.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculataions.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendExponentialOne.Trendtype">
            <summary>
            Exponential One Trend. The equation for this trend is:  Y = a * exp(b * x).
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendExponentialTwo">
            <base>GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial</base>
            <summary>
            Exponentail Two Trend. The equation for this trend is:  Y = a * x * exp(-b * x).
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendExponentialTwo.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculataions.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendExponentialTwo.Trendtype">
            <summary>
            Get the Trend Type this object represents.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendInverseFive">
            <base>GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial</base>
            <summary>
            Inverse Five Trend. The equation for this trend is:  Y = 1 / ((a + b * x) ^ 2).
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendInverseFive.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculataions.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendInverseFive.Trendtype">
            <summary>
            Get the Trend Type this object represents.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendInverseFour">
            <base>GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial</base>
            <summary>
            Trend Inverse Four Trend. The equation for this trend is:  Y = x / (a * x + b).
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendInverseFour.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculataions.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendInverseFour.Trendtype">
            <summary>
            Get the Trend Type this object represents.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendInverseOne">
            <base>GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial</base>
            <summary>
            Trend Inverse One Trend. The equation for this trend is:  Y = a + b / x
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendInverseOne.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculataions.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendInverseOne.Trendtype">
            <summary>
            Get the Trend Type this object represents.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendInverseThree">
            <base>GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial</base>
            <summary>
            A TrendInverseThree trend object. The equation for this trend is:  Y = 1 / (a + b * x).
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendInverseThree.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculataions.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendInverseThree.Trendtype">
            <summary>
            Trend Inverse Three Trend
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendInverseTwo">
            <base>GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial</base>
            <summary>
            A TrendInverseTwo trend object. The equation for this trend is:  Y = a / (b + x).
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendInverseTwo.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculataions.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendInverseTwo.Trendtype">
            <summary>
            Trend Inverse Two Trend
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendCollection">
            <summary>
            Manages a collection of annotation objects.
            </summary>
            <remarks>
            This class is simply a wrapper around the array list that contains the
            list of annotation objects.  Note that the Chart class contains the
            <see cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList"/> property which
            is of type AnnotationCollection. The AnnotationList and AnnotationCollection
            are essentially the some thing. 
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList">AnnotationList Property</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Annotation">Annotation Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendCollection.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendCollection.GetTrend(System.Int32)">
            <summary>Retrieves the annotation at the specified index in the AnnotationList.</summary>
            <returns>Annotation object or null if no annotation exists at the specified index.</returns>
            <remarks>See the example for the SetAnnotationAt method.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList">AnnotationList Property</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AnnotationCollection.SetAnnotationAt(System.Int32,GraphicsServer.GSNet.Charting.Annotation)">SetAnnotationAt Method</seealso>
            <param name="index">zero based index.</param>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendLogarithmic">
            <base>GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial</base>
            <summary>
            Logarithmic Trend. The equation for this trend is:  Y = a + b * log(x).
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendLogarithmic.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculataions.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendLogarithmic.Trendtype">
            <summary>
            Get the Trend Type this object represents.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendMean">
            <summary>Draws a line indicating the mean value of all points in a data series.</summary>
            <remarks>
            	<para>A TrendMean object draws a line indicating the mean value of a specified
                component of all points in a particular data series shown on the chart. A
                SeriesComponent (such as SeriesComponent.Y) is specified in the constructor.</para>
            	<para><strong>Note</strong>: When the trend object calculates a mean, it excludes
                any data points that are hidden (for example, by calling the
                SeriesDrawing.HideDataPoint method).</para>
            	<para>To associate the mean line with a data series, you must add it to the
                SeriesDrawing object for the series.</para>
            	<para>You can control drawing characteristics of the line by setting properties of
                the Line object accessed via TrendMean.LineProperties.</para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing Class</seealso>
            <example>
                The following example draws red standard deviation lines and a blue mean line for
                the first series on the chart. 
                <code lang="CS" title="[C#]">
            // Create a standard deviation trend object
            TrendStandardDeviation trendSD = new TrendStandardDeviation(SeriesComponent.Y, 1);
             
            // Configure the lines
            trendSD.LineProperties.Color = System.Drawing.Color.OrangeRed;
            trendSD.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
            trendSD.LineProperties.Thickness = 2;
             
            // Create a mean trend object
            TrendMean trendMN = new TrendMean(SeriesComponent.Y);
             
            // Configure the line
            trendMN.LineProperties.Color = System.Drawing.Color.Blue;
            trendMN.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
            trendMN.LineProperties.Thickness = 2;
             
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clear existing trends from the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends();
             
            // Add the trends to the first series
            int trendSDIndex = cht.GetSeriesDrawing(0).AddTrend(trendSD);
            int trendMNIndex = cht.GetSeriesDrawing(0).AddTrend(trendMN);
                </code>
            	<code lang="VB" title="[VB]">
            ' Create a standard deviation trend object
            Dim trendSD As TrendStandardDeviation = New TrendStandardDeviation(SeriesComponent.Y, 1)
             
            ' Configure the lines
            trendSD.LineProperties.Color = System.Drawing.Color.OrangeRed
            trendSD.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
            trendSD.LineProperties.Thickness = 2
             
            ' Create a mean trend object
            Dim trendMN As TrendMean = New TrendMean(SeriesComponent.Y)
             
            ' Configure the line
            trendMN.LineProperties.Color = System.Drawing.Color.Blue
            trendMN.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
            trendMN.LineProperties.Thickness = 2
             
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clear existing trends from the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends()
             
            ' Add the trends to the first series
            Dim trendSDIndex As Integer = cht.GetSeriesDrawing(0).AddTrend(trendSD)
            Dim trendMNIndex As Integer = cht.GetSeriesDrawing(0).AddTrend(trendMN)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMean.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMean.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>Constructs an instance of this type.</summary>
            <param name="seriesComp"><see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/> used for trend calculations.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMean.GenerateDrawingObjects(System.Collections.ArrayList,GraphicsServer.GSNet.Charting.AxisX,GraphicsServer.GSNet.Charting.AxisY)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendMean.Mean">
            <summary>Gets the calculated mean value.</summary>
            <value>double</value>
            <remarks>
            The mean value is not calculated until the TrendMean object has been added to a
            SeriesDrawing object and its drawing has been rendered by calling one of the chart's
            reconciliation methods such as RecalcLayout().
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.RecalcLayout">Chart.RecalcLayout Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddTrend(GraphicsServer.GSNet.Charting.TrendBase)">SeriesDrawing.AddTrend Method</seealso>
            <example>
                The fragment below creates a TrendMean object, adds it to a SeriesDrawing object,
                reconciles drawing objects, and then gets the calculated mean value of data in the
                series.
                <code lang="CS" title="C# Example">
            // create a mean trend object 
            TrendMean trendMN = new TrendMean(SeriesComponent.Y); 
              
            // configure the line 
            trendMN.LineProperties.Color = System.Drawing.Color.Blue; 
            trendMN.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot; 
            trendMN.LineProperties.Thickness = 2; 
             
            Chart cht = this.gsNetWinChart1.Chart; 
             
            // clear existing trends from the first series 
            cht.GetSeriesDrawing(0).RemoveAllTrends(); 
             
            // add the trend to the first series 
            int trendMNIndex = cht.GetSeriesDrawing(0).AddTrend(trendMN);
             
            // refresh the drawing (and calculate the trend)
            cht.RecalcLayout();
             
            // retrieve the trend object
            trendMN = (TrendMean) cht.GetSeriesDrawing(0).GetTrend(trendMNIndex);
             
            // get the calculated mean value
            double meanValue = trendMN.Mean;
                </code>
            	<code lang="VB" title="VB Example">
            ' create a mean trend object 
            Dim trendMN As TrendMean = New TrendMean(SeriesComponent.Y)
             
            ' configure the line 
            trendMN.LineProperties.Color = System.Drawing.Color.Blue
            trendMN.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
            trendMN.LineProperties.Thickness = 2
             
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' clear existing trends from the first series 
            cht.GetSeriesDrawing(0).RemoveAllTrends()
             
            ' add the trend to the first series 
            Dim trendMNIndex As Integer = cht.GetSeriesDrawing(0).AddTrend(trendMN)
             
            ' refresh the drawing (and calculate the trend)
            cht.RecalcLayout()
             
            ' retrieve the trend object
            trendMN = CType(cht.GetSeriesDrawing(0).GetTrend(trendMNIndex), TrendMean)
             
            ' get the calculated mean value
            Dim meanValue As Double = trendMN.Mean
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendMean.Trendtype">
            <summary>Gets the Trend Type this object represents.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendMinMax">
            <summary>Draws two lines representing the minimum and maximum values of a series.</summary>
            <remarks>
            	<para>A TrendMinMax object draws lines representing the minimum and maximum values
                of a particular series of the chart. You can control drawing characteristics of the
                lines by setting properties of the Line object accessed via
                TrendMinMax.LineProperties.</para>
            	<para>After you create a TrendMinMax object, you must associate it with a data
                series by adding it to the SeriesDrawing object associated with the series. A
                series can have more than one trend line. You can, for example, create a
                TrendMinMax object and a TrendMean object, and add them both to the same
                SeriesDrawing object.</para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing Class</seealso>
            <example>
                The following example draws min/max lines for the first series on the chart.
                <code lang="CS" title="[C#]">
            // Create a Min/Max trend object
            TrendMinMax trendMinMaxLines = new TrendMinMax(SeriesComponent.Y);
             
            // Configure the lines
            trendMinMaxLines.LineProperties.Color = System.Drawing.Color.OrangeRed;
            trendMinMaxLines.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
            trendMinMaxLines.LineProperties.Thickness = 3;
             
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clear existing trends from the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends();
             
            // Add the trend to the first series
            int trendMinMaxIndex = cht.GetSeriesDrawing(0).AddTrend(trendMinMaxLines);
                </code>
            	<code lang="VB" title="[VB]">
            ' Create a Min/Max trend
            Dim trendMinMaxLines As TrendMinMax = New TrendMinMax(SeriesComponent.Y)
             
            'Configure the lines
            trendMinMaxLines.LineProperties.Color = System.Drawing.Color.OrangeRed
            trendMinMaxLines.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash
            trendMinMaxLines.LineProperties.Thickness = 3
             
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clear existing trends from the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends()
             
            ' Add the trend to the first series
            Dim trendMinMaxIndex As Integer = cht.GetSeriesDrawing(0).AddTrend(trendMinMaxLines)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMinMax.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMinMax.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>Constructs an instance of this type.</summary>
            <param name="seriesComp">SeriesComponent used for trend calculataions.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMinMax.GenerateDrawingObjects(System.Collections.ArrayList,GraphicsServer.GSNet.Charting.AxisX,GraphicsServer.GSNet.Charting.AxisY)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendMinMax.Trendtype">
            <summary>Gets the Trend Type this object represents.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendMinMax.Min">
            <summary>Gets the min value in the series.</summary>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendMinMax.Max">
            <summary>Gets the max value in the series.</summary>
            <value>double</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendMovingAvgBase">
            <summary>Base class for moving average trend classes.</summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TrendMovingAvgBeg">TrendMovingAvgBeg Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TrendMovingAvgEnd">TrendMovingAvgEnd Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TrendMovingAvgMid">TrendMovingAvgMid Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMovingAvgBase.#ctor">
            Constructs an instance of this type.
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMovingAvgBase.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32)">
            <summary>
            Constructs an instance of this type.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculations.</param>
            <param name="number">Number of points to average.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMovingAvgBase.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32,System.Single)">
            <summary>
            Constructs an instance of this type.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculations.</param>
            <param name="number">Number of points to average.</param>
            <param name="tension">
            	<para>Determines the shape of the curve. If the value is 0.0F, this method draws
                straight line segments to connect the points. Usually, the <i>tension</i> parameter
                is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
            </param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMovingAvgBase.GenerateDrawingObjects(System.Collections.ArrayList,GraphicsServer.GSNet.Charting.AxisX,GraphicsServer.GSNet.Charting.AxisY)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendMovingAvgBase.Tension">
            <summary>Gets and sets the tension for the spline fit.</summary>
            <value>float</value>
            <remarks>
            	<para>Tension determines the shape of the curve. If the value is 0.0F, this method
                draws straight line segments to connect the points. Usually, the tension parameter
                is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendMovingAvgBase.NumberPtsToAvg">
            <summary>Gets and sets the number of points to average.</summary>
            <value>int</value>
            <remarks>
            A moving average is calculated by dividing a series of data points into sets of
            consecutive points and then averaging the values in each set. This property determines
            how many points are in each set.
            </remarks>
            <example>
                The following code fragment changes the number of points to average based on user
                input via a checkbox.
                <code lang="CS" title="[C#]">
            private void textBox1_TextChanged(object sender, System.EventArgs e)
            {
                // Cycle through the SeriesDrawingList
                foreach (SeriesDrawing s in this.gsNetWinChart1.Chart.SeriesDrawingList)
                {
                    //Find a SeriesDrawing that has trends
                    if (s.TrendCount &gt; 0)
                    {
                        // Check each trend
                        for (int i = 0; i &lt; s.TrendCount; i++)
                        {
                            // If it's our type...
                            if (s.GetTrend(i).Trendtype == TrendType.MovingAverageBegPoint)
                            {
                                // Change the number of points to average
                                TrendMovingAvgBeg t = (TrendMovingAvgBeg)s.GetTrend(i);
                                t.NumberPtsToAvg = Convert.ToInt16(this.textBox1.Text);
                            }
                        }
                    }
                }
                                            
                // Redraw the chart
                this.gsNetWinChart1.Chart.ReconcileAndRecalcAll();
            }
                </code>
            	<code lang="VB" title="[VB]">
            Private Sub TextBox1_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TextBox1.TextChanged
                Dim i As Integer
                ' Cycle through the SeriesDrawingList
                For Each s As SeriesDrawing In Me.GsNetWinChart1.Chart.SeriesDrawingList
                    ' Find a SeriesDrawing that has trends
                    If s.TrendCount &gt; 0 Then
                        ' Check each trend
                        For i = 0 To (s.TrendCount - 1)
                            ' If it's our type...
                            If s.GetTrend(i).Trendtype = TrendType.MovingAverageBegPoint Then
                                ' Change the number of points to average
                                CType(s.GetTrend(i), TrendMovingAvgBeg).NumberPtsToAvg = CInt(Me.TextBox1.Text)
                            End If
                        Next
                    End If
                Next
                ' Redraw the chart
                Me.GsNetWinChart1.Chart.ReconcileAndRecalcAll()
            End Sub
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendMovingAvgBase.AveragePoints">
            <summary>
            Gets an array of points to average.
            </summary>
            <value>PointF Array</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendMovingAvgBeg">
            <summary>
            Draws a moving average line for a data series by plotting the average at the
            first point of each set of data points.
            </summary>
            <remarks>
            	<para>A TrendMovingAvgBeg object creates sets of <em>n</em> points within a series.
                The specified component values of data points (for example, the Y values) in each
                set are averaged, and the averaged value is drawn at the first point of the set.
                This procedure is repeated for all sets of <em>n</em> points in the series, and the
                averaged values are connected with lines.</para>
            	<para>After you create a TrendMovingAvgBeg object, you must add it to the
                SeriesDrawing object associated with a particular data series on the chart. A
                series can be associated with more than one trend line.</para>
            </remarks>
            <example>
                The following example draws a moving average line for Y values of the first data
                series on the chart. The average moves in sets of two consecutive data points.
                <code lang="CS" title="C# Example]">
            /* Create a moving average trend object 
             * that averages Y component data in  
             * sets of two consecutive data points */
            TrendMovingAvgBeg trendMovAvg = new TrendMovingAvgBeg(SeriesComponent.Y, 2);
             
            // Configure the line
            trendMovAvg.LineProperties.Color = System.Drawing.Color.OrangeRed;
            trendMovAvg.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid;
            trendMovAvg.LineProperties.Thickness = 4;
             
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clear existing trends from the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends();
             
            // Add the trend to the first series
            int trendMovAvgIndex = cht.GetSeriesDrawing(0).AddTrend(trendMovAvg);
                </code>
            	<code lang="VB" title="[VB Example]">
            ' Create a moving average trend object
            ' that averages Y component data in  
            ' sets of two consecutive data points 
            Dim trendMovAvg As TrendMovingAvgBeg = New TrendMovingAvgBeg(SeriesComponent.Y, 2)
             
            'Configure the line
            trendMovAvg.LineProperties.Color = System.Drawing.Color.OrangeRed
            trendMovAvg.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid
            trendMovAvg.LineProperties.Thickness = 4
             
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clear away existing trends for the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends()
             
            ' Add the trend to the first series
            Dim trendMovAvgIndex As Integer = cht.GetSeriesDrawing(0).AddTrend(trendMovAvg)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMovingAvgBeg.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32)">
            <summary>Constructs an instance of this type.</summary>
            <param name="seriesComp">SeriesComponent used for trend calculations.</param>
            <param name="number">Number of points to average.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMovingAvgBeg.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32,System.Single)">
            <summary>Constructs an instance of this type.</summary>
            <param name="seriesComp">SeriesComponent used for trend calculations.</param>
            <param name="number">Number of points to average.</param>
            <param name="tension">
            	<para>Determines the shape of the curve. If the value is 0.0F, this method draws
                straight line segments to connect the points. Usually, the <i>tension</i> parameter
                is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
            </param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendMovingAvgBeg.Trendtype">
            <summary>
            Get the Trend Type this object represents.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendMovingAvgEnd">
            <summary>
            Draws a moving average line for a data series by plotting the average at the last
            point of each set of data points.
            </summary>
            <remarks>
            	<para>A TrendMovingAvgEnd object creates sets of <em>n</em> points within a series.
                The specified component values of data points (for example, the Y values) in each
                set are averaged, and the averaged value is drawn at the last point of the set.
                This procedure is repeated for all sets of <em>n</em> points in the series, and the
                averaged values are connected with lines.</para>
            	<para>After you create a TrendMovingAvgEnd object, you must add it to the
                SeriesDrawing object associated with a particular data series on the chart. A
                series can be associated with more than one trend line.</para>
            </remarks>
            <example>
                The following example draws a moving average line for Y values of the first data
                series on the chart. The average moves in sets of two consecutive data points.
                <code lang="CS" title="C# Example]">
            /* Create a moving average trend object 
             * that averages Y component data in  
             * sets of two consecutive data points */
            TrendMovingAvgEnd trendMovAvg = new TrendMovingAvgEnd(SeriesComponent.Y, 2);
             
            // Configure the line
            trendMovAvg.LineProperties.Color = System.Drawing.Color.OrangeRed;
            trendMovAvg.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid;
            trendMovAvg.LineProperties.Thickness = 4;
             
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clear existing trends from the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends();
             
            // Add the trend to the first series
            int trendMovAvgIndex = cht.GetSeriesDrawing(0).AddTrend(trendMovAvg);
                </code>
            	<code lang="VB" title="VB Example]">
            ' Create a moving average trend object
            ' that averages Y component data in  
            ' sets of two consecutive data points 
            Dim trendMovAvg As TrendMovingAvgEnd = New TrendMovingAvgEnd(SeriesComponent.Y, 2)
             
            'Configure the line
            trendMovAvg.LineProperties.Color = System.Drawing.Color.OrangeRed
            trendMovAvg.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid
            trendMovAvg.LineProperties.Thickness = 4
             
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clear away existing trends for the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends()
             
            ' Add the trend to the first series
            Dim trendMovAvgIndex As Integer = cht.GetSeriesDrawing(0).AddTrend(trendMovAvg)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMovingAvgEnd.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32)">
            <summary>Constructs an instance of this type.</summary>
            <param name="seriesComp">SeriesComponent used for trend calculations.</param>
            <param name="number">Number of points to average.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMovingAvgEnd.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32,System.Single)">
            <summary>Constructs an instance of this type.</summary>
            <param name="seriesComp">SeriesComponent used for trend calculations.</param>
            <param name="number">Number of points to average.</param>
            <param name="tension">
            	<para>Determines the shape of the curve. If the value is 0.0F, this method draws
                straight line segments to connect the points. Usually, the <i>tension</i> parameter
                is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
            </param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendMovingAvgEnd.Trendtype">
            <summary>
            Gets the Trend Type this object represents.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendMovingAvgMid">
            <summary>
            Draws a moving average line for a data series by plotting the average at the
            mid-point of each set of data points.
            </summary>
            <remarks>
            	<para>A TrendMovingAvgMid object creates sets of <em>n</em> points within a series.
                The specified component values of data points (for example, the Y values) in each
                set are averaged, and the averaged value is drawn at the mid-point of the set. This
                procedure is repeated for all sets of <em>n</em> points in the series, and the
                averaged values are connected with lines.</para>
            	<para>After you create a TrendMovingAvgMid object, you must add it to the
                SeriesDrawing object associated with a particular data series on the chart. A
                series can be associated with more than one trend line. You can, for example,
                create moving average trends with different intervals and add them to the same
                SeriesDrawing object. Or you can create other types of Trend objects and add them
                all to the same SeriesDrawing object.</para>
            	<para>You can also add the same TrendMovingAvgMid object to more than one series,
                but this is not recommended because each line would have the same drawing
                characteristics and thus not be easily distinquished from moving averages for other
                series.</para>
            </remarks>
            <example>
                The following example draws a moving average line for Y values of the first data
                series on the chart. The average moves in sets of three consecutive data points. 
                <code lang="CS" title="[C#]">
            /* Create a moving average trend object 
             * that averages Y component data in  
             * sets of three consecutive data points */
            TrendMovingAvgMid trendMovAvg = new TrendMovingAvgMid(SeriesComponent.Y, 3);
             
            // Configure the line
            trendMovAvg.LineProperties.Color = System.Drawing.Color.OrangeRed;
            trendMovAvg.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid;
            trendMovAvg.LineProperties.Thickness = 4;
             
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clear away existing trends for the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends();
             
            // Add the trend to the first series
            int trendMovAvgIndex = cht.GetSeriesDrawing(0).AddTrend(trendMovAvg);
                </code>
            	<code lang="VB" title="[VB]">
            ' Create a moving average trend object
            ' that averages Y component data in  
            ' sets of three consecutive data points 
            Dim trendMovAvg As TrendMovingAvgMid = New TrendMovingAvgMid(SeriesComponent.Y, 3)
             
            'Configure the line
            trendMovAvg.LineProperties.Color = System.Drawing.Color.OrangeRed
            trendMovAvg.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid
            trendMovAvg.LineProperties.Thickness = 4
             
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clear away existing trends for the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends()
             
            ' Add the trend to the first series
            Dim trendMovAvgIndex As Integer = cht.GetSeriesDrawing(0).AddTrend(trendMovAvg)
                </code>
            </example>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMovingAvgMid.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMovingAvgMid.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32)">
            <summary>
            Constructs an instance of the TrendMovingAvgMid class given a SeriesComponent and
            a number of points to average.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculations.</param>
            <param name="number">Number of points to average.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendMovingAvgMid.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32,System.Single)">
            <summary>
            Constructs an instance of the TrendMovingAvgMid class given a SeriesComponent, a
            number of points to average, and curve tension.
            </summary>
            <param name="seriesComp">Specifies the SeriesComponent to average.</param>
            <param name="number">Determines the number of consecutive points in each averaged set.</param>
            <param name="tension">
            	<para>Determines the shape of the curve. If the value is 0.0F, this method draws
                straight line segments to connect the points. Usually, the <i>tension</i> parameter
                is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
            </param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendMovingAvgMid.Trendtype">
            <summary>
            Gets the Trend Type of this trend object.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendPower">
            <base>GraphicsServer.GSNet.Charting.TrendVariableOrderPolynomial</base>
            <summary>
            Power Trend. The equation for this trend is:  Y = a * (x ^ b).
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendPower.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculataions.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendPower.Trendtype">
            <summary>
            Get the Trend Type this object represents.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendSplineFit">
            <base>GraphicsServer.GSNet.Charting.TrendBase</base>
            <summary>
            Spline Fit Trend. This is a well fitted curve that will pass through
            all points in a series. To adjust the curvature of the curve use
            the Tension property.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendSplineFit.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="seriesComp">SeriesComponent used for trend calculataions.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendSplineFit.Tension">
            <summary>
            Get the tension for the spline fit
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendSplineFit.Trendtype">
            <summary>
            Get the Trend Type this object represents.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendStandardDeviation">
            <summary>Draws standard deviation lines.</summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing Class</seealso>
            <remarks>
            	<para>A TrendStandardDeviation object draws two lines related to the values of a
                particular data series. One line is a specified number of standard deviations above
                the mean, the other line is the same number of standard deviations below the mean.
                You can specify the number of standard deviations in the constructor or by setting
                the NumberOfDevs property.</para>
            	<para>After creating a TrendStandardDeviation object you must associate it with a
                data series by adding it to a SeriesDrawing object in the chart's
                SeriesDrawingList. Any number of trend objects can be added to a particular
                SeriesDrawing object.</para>
            </remarks>
            <example>
                The following example draws lines one standard deviation above and below the mean
                value of the first series. 
                <code lang="CS" title="[C#]">
            // Create a standard deviation trend object
            TrendStandardDeviation trendSD = new TrendStandardDeviation(SeriesComponent.Y, 1);
             
            // Configure the lines
            trendSD.LineProperties.Color = System.Drawing.Color.OrangeRed;
            trendSD.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
            trendSD.LineProperties.Thickness = 2;
             
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clear existing trends from the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends();
             
            // Add the trend to the first series
            int trendSDIndex = cht.GetSeriesDrawing(0).AddTrend(trendSD);
                </code>
            	<code lang="VB" title="[VB]">
            ' Create a standard deviation trend object
            Dim trendSD As TrendStandardDeviation = New TrendStandardDeviation(SeriesComponent.Y, 1)
             
            ' Configure the lines
            trendSD.LineProperties.Color = System.Drawing.Color.OrangeRed
            trendSD.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
            trendSD.LineProperties.Thickness = 2
             
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clear existing trends from the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends()
             
            ' Add the trend to the first series
            Dim trendSDIndex As Integer = cht.GetSeriesDrawing(0).AddTrend(trendSD)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendStandardDeviation.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendStandardDeviation.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>Constructs an instance of this type.</summary>
            <param name="seriesComp">SeriesComponent used for trend calculations.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendStandardDeviation.#ctor(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32)">
            <summary>Constructs an instance of this type.</summary>
            <param name="seriesComp"><para>SeriesComponent used for trend calculations.</para></param>
            <param name="numberOfDevs">Number of standard deviations to use in plotting the lines.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TrendStandardDeviation.GenerateDrawingObjects(System.Collections.ArrayList,GraphicsServer.GSNet.Charting.AxisX,GraphicsServer.GSNet.Charting.AxisY)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendStandardDeviation.StandardDeviation">
            <summary>Gets the standard deviation.</summary>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendStandardDeviation.Mean">
            <summary>Gets the calculated mean value.</summary>
            <value>double</value>
            <remarks>
            The mean value is not calculated until the trend object has been added to the
            chart and series data has been reconciled by calling, for example, the
            <see cref="M:GraphicsServer.GSNet.Charting.Chart.ReconcileDataAndRecalc">ReconcileDataAndRecalc</see> method.
            </remarks>
            <example>
                The following example creates a TrendStandDeviation object, adds it to the chart,
                reconciles data, and then displays the mean value in the chart's bottom title. 
                <code lang="CS" title="[C#Example]">
            // Create a standard deviation trend object
            TrendStandardDeviation trendSD = new TrendStandardDeviation(SeriesComponent.Y);
             
            // Set the number of deviations
            trendSD.NumberOfDevs = 1;
             
            // Configure the lines
            trendSD.LineProperties.Color = System.Drawing.Color.OrangeRed;
            trendSD.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
            trendSD.LineProperties.Thickness = 2;
             
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Add the trend to the first series
            int trendSDIndex = cht.GetSeriesDrawing(0).AddTrend(trendSD);
             
            // Force the mean to be calculated
            cht.ReconcileDataAndRecalc();
             
            // Create a bottom title and use it to display the mean value
            TrendStandardDeviation t = (TrendStandardDeviation)cht.GetSeriesDrawing(0).GetTrend(trendSDIndex);
            string strMean = "Mean: " + t.Mean.ToString();
            cht.SetGridBottomTitle(strMean);
                </code>
            	<code lang="VB" title="[VB Example]">
            ' Create a standard deviation trend object
            Dim trendSD As TrendStandardDeviation = New TrendStandardDeviation(SeriesComponent.Y)
             
            ' Set the number of deviations
            trendSD.NumberOfDevs = 1
             
            ' Configure the lines
            trendSD.LineProperties.Color = System.Drawing.Color.OrangeRed
            trendSD.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
            trendSD.LineProperties.Thickness = 2
             
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Add the trend to the first series
            Dim trendSDIndex As Integer = cht.GetSeriesDrawing(0).AddTrend(trendSD)
             
            ' Force the mean to be calculated
            cht.ReconcileDataAndRecalc()
             
            ' Create a bottom title and use it to display the mean value
            Dim t As TrendStandardDeviation = CType(cht.GetSeriesDrawing(0).GetTrend(trendSDIndex), TrendStandardDeviation)
            Dim strMean As String = "Mean: " + t.Mean.ToString()
            cht.SetGridBottomTitle(strMean)
                </code>
            </example>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.ReconcileDataAndRecalc">ReconcileDataAndRecalc Method</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendStandardDeviation.NumberOfDevs">
            <summary>
            Gets and sets the number of standard deviations to use in plotting the
            lines.
            </summary>
            <value>int</value>
            <remarks>
            	<para>Two lines are drawn, one above the mean, the other below. This property
                controls how many standard deviations the lines are drawn above and below the
                mean.</para>
            	<para><strong>Note:</strong> When NumberOfDevs is greater than 1, one or both lines
                can fall above or below the margins of the grid. By default, anything drawn
                beyond the grid's margins is clipped. You can turn clipping off by setting the
                Grid.ClipToTopMargin and Grid.ClipToBottomMargin properties.</para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Grid">Grid Class</seealso>
            <example>
                The following example draws standard deviation lines for the first series on the
                chart. The lines are two standard deviations from the mean, so the code turns off
                clipping at the grid margins. 
                <code lang="CS" title="[C#]">
            // Create a standard deviation trend object
            TrendStandardDeviation trendSD = new TrendStandardDeviation(SeriesComponent.Y);
             
            // Set the number of deviations
            trendSD.NumberOfDevs = 2;
             
            // Configure the lines
            trendSD.LineProperties.Color = System.Drawing.Color.OrangeRed;
            trendSD.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
            trendSD.LineProperties.Thickness = 2;
             
            Chart cht = this.gsNetWinChart1.Chart;
             
            // Clear existing trends from the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends();
             
            // Add the trend to the first series
            int trendSDIndex = cht.GetSeriesDrawing(0).AddTrend(trendSD);
             
            // Turn off clipping for top and bottom margins
            cht.Grid.ClipToTopMargin = false;
            cht.Grid.ClipToBottomMargin = false;
                </code>
            	<code lang="VB" title="[VB]">
            ' Create a standard deviation trend object
            Dim trendSD As TrendStandardDeviation = New TrendStandardDeviation(SeriesComponent.Y)
             
            'Set the number of deviations
            trendSD.NumberOfDevs = 2
             
            ' Configure the lines
            trendSD.LineProperties.Color = System.Drawing.Color.OrangeRed
            trendSD.LineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
            trendSD.LineProperties.Thickness = 2
             
            Dim cht As Chart = Me.GsNetWinChart1.Chart
             
            ' Clear existing trends from the first series
            cht.GetSeriesDrawing(0).RemoveAllTrends()
             
            ' Add the trend to the first series
            Dim trendSDIndex As Integer = cht.GetSeriesDrawing(0).AddTrend(trendSD)
             
            ' Turn of clipping for the top and bottom margins
            cht.Grid.ClipToTopMargin = False
            cht.Grid.ClipToBottomMargin = False
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TrendStandardDeviation.Trendtype">
            <summary>
            Get the Trend Type this object represents.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TrendType"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TrendType">
            <summary>
            Trend Types
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.Mean">
            <summary>Mean</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.MinMax">
            <summary>MinMax</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.StandardDeviation">
            <summary>StandardDeviation</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.VariableOrderPolynomial">
            <summary>VariableOrderPolynomial</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.Logarithmic">
            <summary>Logarithmic</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.ExponentialOne">
            <summary>ExponentialOne</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.ExponentialTwo">
            <summary>ExponentialTwo</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.Power">
            <summary>Power</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.InverseOne">
            <summary>InverseOne</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.InverseTwo">
            <summary>InverseTwo</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.InverseThree">
            <summary>InverseThree</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.InverseFour">
            <summary>InverseFour</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.InverseFive">
            <summary>InverseFive</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.SplineFit">
            <summary>SplineFit</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.MovingAverageBegPoint">
            <summary>MovingAverageBegPoint</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.MovingAverageMidPoint">
            <summary>MovingAverageMidPoint</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.MovingAverageEndPoint">
            <summary>MovingAverageEndPoint</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.TrendType.Custom">
            <summary>Custom</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.RelativeLocation">
            <summary>
            The RelativeLocation enumeration is used primarily by the
            <see cref="M:GraphicsServer.GSNet.Charting.Chart.SetRelativeLocation(GraphicsServer.GSNet.Charting.VisualChartObject,GraphicsServer.GSNet.Charting.VisualChartObject,GraphicsServer.GSNet.Charting.RelativeLocation)">SetRelativeLocation</see>  
            method to specify one object's location relative to another object's location.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.SetRelativeLocation(GraphicsServer.GSNet.Charting.VisualChartObject,GraphicsServer.GSNet.Charting.VisualChartObject,GraphicsServer.GSNet.Charting.RelativeLocation)">SetRelativeLocation Method</seealso>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RelativeLocation.TopLeft">
            <summary>Object is placed on top and to the left of the other object.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RelativeLocation.TopMiddle">
            <summary>Object is placed on top and in the middle of the other object.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RelativeLocation.TopRight">
            <summary>Object is placed on top and to the right of the other object.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RelativeLocation.LeftTop">
            <summary>Object is placed to the left and at the top of the other object.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RelativeLocation.LeftMiddle">
            <summary>Object is placed to the left and in the middle of the other object.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RelativeLocation.LeftBottom">
            <summary>Object is placed to the left and at the bottom of the other object.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RelativeLocation.RightTop">
            <summary>Object is placed to the right and at the top of the other object.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RelativeLocation.RightMiddle">
            <summary>Object is placed to the right and in the middle of the other object.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RelativeLocation.RightBottom">
            <summary>Object is placed to the right and at the bottom of the other object.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RelativeLocation.BottomLeft">
            <summary>Object is placed on the bottom of and to the left of the other object.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RelativeLocation.BottomMiddle">
            <summary>Object is placed on the bottom of and in the middle of the other object.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RelativeLocation.BottomRight">
            <summary>Object is placed on the bottom of and to the right of the other object.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Chart">
            <summary>
            This class exposes all the properties, methods, and events of the Graphics Server
            .NET Chart object.
            </summary>
            <remarks>
            The Chart object has been wrapped inside a custom Windows user control and a Web
            control to facilitate its use in Windows forms and Web forms. However, you can also use
            the object directly within your code.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWebChart">GSNetWebChart Class</seealso>
            <example>
                The following example creates a chart with two data series. It also demonstrates
                common operations on various chart elements, such as the axes, the legend, the
                grid, and the chart title.
                <code lang="CS" title="C# Example">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.SeriesData;
             
            private void Form1_Load(object sender, System.EventArgs e)
            {
                /* ---------------------- 
                 * Prepare data for the chart
                 * ----------------------*/
                // Load apple data in a data provider
                ArrayDataProvider dpApples = new ArrayDataProvider();
                dpApples.DataArray = new double[] {32200, 28500, 40300, 42700};
                // Create a series object to hold apple data
                Series apples = new Series();
                apples.SeriesName = "Apples";  // SeriesName is used in the legend
                // Bind the data to the Y component of the series
                apples.BindComponent(SeriesComponent.Y, dpApples, string.Empty);
             
                // Load orange data in a data provider
                ArrayDataProvider dpOranges = new ArrayDataProvider();
                dpOranges.DataArray = new double[] {43200, 20500, 38600, 51800};
                // Create a series object to hold orange data
                Series oranges = new Series();
                oranges.SeriesName = "Oranges"; 
                // Bind the data to the Y component of the series
                oranges.BindComponent(SeriesComponent.Y, dpOranges, string.Empty);
             
                // Create a series with X axis labels
                ArrayDataProvider dpLabels = new ArrayDataProvider();
                dpLabels.DataArray = new string[] {"Q1", "Q2", "Q3", "Q4"};
                Series labels = new Series();
                labels.BindComponent(SeriesComponent.Label, dpLabels, string.Empty);
             
                Chart cht = this.gsNetWinChart1.Chart;
             
                // Layout chart objects
                cht.QuickLayout(QuickLayoutType.LayoutGridMiddleTitleTopLegendBottom);
             
                /* ----------------------
                 * Title the chart
                 * ----------------------*/
                cht.ChartTitle.Text = "Apples and Oranges";
                cht.ChartTitle.TextFormat.Font = new Font("Myriad Web", 20, FontStyle.Bold);
             
                /* ----------------------
                 *  Send the data to the chart
                 * ----------------------*/
             
                // First get rid of default data
                cht.RemoveAllSeries();
                // Now add the new data series
                int indexApples = cht.AddSeries(apples);
                int indexOranges = cht.AddSeries(oranges);
             
                /* ---------------------- 
                 * Format data markers
                 * ----------------------*/
                // Set marker fill color
                cht.GetSeriesDrawing(indexApples).MarkerFill.Color = Color.Red;
                cht.GetSeriesDrawing(indexOranges).MarkerFill.Color = Color.Orange;
                // Turn off marker outlines
                cht.GetSeriesDrawing(indexApples).MarkerOutlineEnabled = false;
                cht.GetSeriesDrawing(indexOranges).MarkerOutlineEnabled = false;
                /*
                 * Note: Another way to specify color and outlining is to
                 *       set Chart.SeriesDefaults either in the Properties
                 *       window or in code.
                 */
             
                /* ----------------------
                 * Format the grid area
                 * ----------------------*/
                // Increase the left margin
                cht.Grid.MarginAxisLeft = 70;
                // and shrink the right margin
                cht.Grid.MarginAxisRight = 10;
             
                // Add a border label next to the Y axis
                BorderLabel lbl = new BorderLabel("YAxisTitle");
                lbl.RelativeLocation = RelativeLocation.LeftMiddle;
                lbl.Text = "Bushels";
                lbl.TextFormat.Color = Color.DimGray;
                cht.Grid.BorderLabelList.Add(lbl);
             
                /* ----------------------
                 * Configure the X axis
                 * ----------------------*/
                AxisX x = cht.Grid.AxisX;
                x.AxisMode = AxisMode.Category;
             
                // Attach the label series
                x.LabelSeries = labels;
                // Set the label color
                x.LabelProperties.Color = Color.DimGray;
                // But don't draw the axis line
                x.AxisLineVisible = false;
                // And make the tick marks invisible
                x.TickSize = 0;
             
                /* ----------------------
                 * Configure the Y axis
                 * ----------------------*/
                AxisY y = cht.Grid.AxisY;
                y.AxisMode = AxisMode.ValueLinear;
             
                // Color
                y.Color = Color.DimGray;
             
                // Tick marks
                y.MajorTickCount = 0;  // If this property is &gt; 0, interval is ignored
                y.MajorTickInterval = 10000;
                y.TickDrawStyle = TickDrawStyle.InsideAxis;
             
                // Labels
                y.LabelProperties.Color = Color.DimGray;
                y.LabelFormatMask = "0,.k"; // 1000 displays as 1k
             
                /* ----------------------
                 * Format the legend
                 * ----------------------*/
                // Don't draw a border
                cht.Legend.Border.BorderType = BorderType.NoBorder;
                // Choose boxes rather than icons
                cht.Legend.BoxMode = LegendBoxMode.BoxesOn;
                // Don't outline boxes
                cht.Legend.IconOutlineEnabled = false;
                // Change the box size
                cht.Legend.BoxSize = new Size(12, 10);
                // Don't draw the text in the marker color
                cht.Legend.AutoTextColor = false;
                cht.Legend.TextFormat.Color = Color.DimGray;
                // Align legend text
                cht.Legend.TextFormat.HorizontalAlignment = StringAlignment.Near;
             
                // Select the chart type
                cht.ChartType = ChartType.Bar2D;
                /*
                 * Note: Setting chart type also redraws the chart.
                 *       Another way to refresh the drawing is to
                 *       call Chart.RecalcLayout().
                 */
            }
                </code>
            	<code lang="VB" title="VB Example">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.SeriesData
             
            Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
                ' ----------------------
                ' Prepare data for the chart
                ' ----------------------
                ' Load apple data in a data provider
                Dim dpApples As ArrayDataProvider = New ArrayDataProvider
                dpApples.DataArray = New Double() {32200, 28500, 40300, 42700}
                ' Create a series object to hold apple data
                Dim apples As Series = New Series
                apples.SeriesName = "Apples"  ' SeriesName is used in the legend
                ' Bind the data to the Y component of the series
                apples.BindComponent(SeriesComponent.Y, dpApples, String.Empty)
             
                ' Load orange data in a data provider
                Dim dpOranges As ArrayDataProvider = New ArrayDataProvider
                dpOranges.DataArray = New Double() {43200, 20500, 38600, 51800}
                ' Create a series object to hold orange data
                Dim oranges As Series = New Series
                oranges.SeriesName = "Oranges"
                ' Bind the data to the Y component of the series
                oranges.BindComponent(SeriesComponent.Y, dpOranges, String.Empty)
             
                ' Create a series with X axis labels
                Dim dpLabels As ArrayDataProvider = New ArrayDataProvider
                dpLabels.DataArray = New String() {"Q1", "Q2", "Q3", "Q4"}
                Dim labels As Series = New Series
                labels.BindComponent(SeriesComponent.Label, dpLabels, String.Empty)
             
                With Me.GsNetWinChart1.Chart
                    ' Layout chart objects
                    .QuickLayout(QuickLayoutType.LayoutGridMiddleTitleTopLegendBottom)
             
                    ' ----------------------
                    ' Title the chart
                    ' ----------------------
                    With .ChartTitle
                        .Text = "Apples and Oranges"
                        .TextFormat.Font = New Font("Myriad Web", 20, FontStyle.Bold)
                    End With
             
                    ' ----------------------
                    '  Send the data to the chart
                    ' ----------------------
                    ' First get rid of default data
                    .RemoveAllSeries()
                    ' Now add the new data series
                    Dim indexApples As Integer = .AddSeries(apples)
                    Dim indexOranges As Integer = .AddSeries(oranges)
             
                    ' ---------------------- 
                    ' Format data markers
                    '----------------------
                    ' Set marker fill color
                    .GetSeriesDrawing(indexApples).MarkerFill.Color = Color.Red
                    .GetSeriesDrawing(indexOranges).MarkerFill.Color = Color.Orange
                    ' Turn off marker outlines
                    .GetSeriesDrawing(indexApples).MarkerOutlineEnabled = False
                    .GetSeriesDrawing(indexOranges).MarkerOutlineEnabled = False
                    '
                    ' Note: Another way to specify color and outlining is to
                    '       set Chart.SeriesDefaults either in the Properties
                    '       window or in code.
                    '
             
                    ' ----------------------
                    ' Format the grid area
                    ' ----------------------
                    With .Grid
                        ' Increase the left margin
                        .MarginAxisLeft = 70
                        ' and shrink the right margin
                        .MarginAxisRight = 10
             
                        ' Add a border label next to the Y axis
                        Dim lbl As BorderLabel = New BorderLabel("YAxisTitle")
                        lbl.RelativeLocation = RelativeLocation.LeftMiddle
                        lbl.Text = "Bushels"
                        lbl.TextFormat.Color = Color.DimGray
                        .BorderLabelList.Add(lbl)
                    End With
             
                    ' ----------------------
                    ' Configure the X axis
                    ' ----------------------
                    With .Grid.AxisX
                        .AxisMode = AxisMode.Category
             
                        ' Attach the label series
                        .LabelSeries = labels
                        ' Set the label color
                        .LabelProperties.Color = Color.DimGray
                        ' But don't draw the axis line
                        .AxisLineVisible = False
                        ' And make the tick marks invisible
                        .TickSize = 0
                    End With
             
                    ' ----------------------
                    ' Configure the Y axis
                    ' ----------------------
                    With .Grid.AxisY
                        .AxisMode = AxisMode.ValueLinear
             
                        ' Color
                        .Color = Color.DimGray
             
                        ' Tick marks
                        .MajorTickCount = 0  ' If this property is &gt; 0, interval is ignored
                        .MajorTickInterval = 10000
                        .TickDrawStyle = TickDrawStyle.InsideAxis
             
                        ' Labels
                        .LabelProperties.Color = Color.DimGray
                        .LabelFormatMask = "0,.k" ' 1000 displays as 1k
                    End With
             
                    ' ----------------------
                    ' Format the legend
                    ' ----------------------
                    With .Legend
                        ' Don't draw a border
                        .Border.BorderType = BorderType.NoBorder
                        ' Choose boxes rather than icons
                        .BoxMode = LegendBoxMode.BoxesOn
                        ' Don't outline boxes
                        .IconOutlineEnabled = False
                        ' Change the box size
                        .BoxSize = New Size(12, 10)
                        ' Don't draw the text in the marker color
                        .AutoTextColor = False
                        .TextFormat.Color = Color.DimGray
                        ' Align legend text
                        .TextFormat.HorizontalAlignment = StringAlignment.Near
                    End With
             
                    ' Select the chart type
                    .ChartType = ChartType.Bar2D
                    '
                    ' Note: Setting chart type also redraws the chart.
                    '       Another way to refresh the drawing is to
                    '       call Chart.RecalcLayout().
                    '
                    End With
            End Sub
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.#ctor">
            <summary>Constructs an instance of the Chart class.</summary>
            <remarks>
            Creates grid, legend, title, background, and border objects; creates empty
            annotation and series lists; and defaults to a Line2D chart type.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.GetSelectedObject">
            <summary>
            Returns the selected object in the chart if an object is selected. 
            Otherwise null is returned.
            </summary>
            <returns>Returns a <see cref="T:GraphicsServer.GSNet.Charting.VisualChartObject"/> if an object
            is currently selected.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.UnselectChartObject(System.Boolean)">UnselectChartObject Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.IsVisualObjectSelected">IsVisualObjectSelected Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.SetAllObjectsIsMovable(System.Boolean)">
            <summary>
            This helper method walks all the visual chart objects 
            in the Chart and sets their IsMovable property to the specified state.
            </summary>
            <param name="state">Set to true or false.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.SetAllObjectsIsResizable(System.Boolean)">
            <summary>
            This helper method walks all the visual chart objects 
            in the Chart and sets their IsResizable property to the specified state.
            </summary>
            <param name="state">Set to true or false.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.SetAllObjectsIsSelectable(System.Boolean)">
            <summary>
            This helper method walks all the visual chart objects 
            in the Chart and sets their IsSelectable property to the specified state.
            </summary>
            <param name="state">Set to true or false.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.EnableAnnotationCoupling">
            <summary>Enables annotation coupling in a Web Forms application.
            </summary>
            <remarks>
                This method exists due to a timing problem. When the Web chart control initializes
                during the Page Load event, it must turn off annotation coupling in order to read in
                settings for size and location properties. Once initial settings have been read in, the
                initialization process completes, and annotation coupling, unfortunately, remains
                off. 
                <para>This is not a problem if there is no user interaction and chart object sizes
                and locations do not change. However, if there is user interaction and annotation
                coupling is off, coupled annotations will not properly follow the object to which
                they are coupled. They will behave as if they were not coupled.</para>
            	<para>The cure is to call EnableAnnotationCoupling() inside the Web form's Page
                Load event. This ensures that coupling is turned back on and that annotations move
                when the objects to which they are coupled move.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Annotation.CoupleToObject">CoupleToObject Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.AutoBindData(System.Data.DataView,System.String[])">
            <summary>
            Creates a series for each field name passed in a string array, and binds data from
            fields in a DataView to the Y component of each series.
            </summary>
            <remarks>
            Auto-binding is a quick and easy way to create category-based charts. This and other
            auto-binding methods do all the work involved in creating DataProvider and Series objects,
            binding the Y component of the series to the data provider, and adding the series
            to the chart.
            </remarks>
            <param name="view">The DataView that contains the data to bind.</param>
            <param name="fields">A string array of field names.</param>
            <exception cref="T:GraphicsServer.GSNet.SeriesData.DPConnectionException">One or more field names do not
            exist in the DataView.</exception>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.AutoBindData(System.Data.DataView,System.String[],System.String)">
            <summary>
            Creates a series for each field name passed in a string array, binds data from fields
            in a DataView to the Y component of each series, creates a label series for a specified 
            label field, and associates the label series with the X axis.
            </summary>
            <param name="view">The DataView that contains the data to bind.</param>
            <param name="fields">A string array of field names.</param>
            <param name="labelField">Field name of the data that contains X axis labels.</param>
            <exception cref="T:GraphicsServer.GSNet.SeriesData.DPConnectionException">The label field or one or more data field names do not
            exist within the DataView.</exception>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.AutoBindData(System.Data.DataView,System.String)">
            <summary>
            Creates a label series for a specified label field in a DataView and
            associates the label series with the X axis.
            </summary>
            <param name="view">The DataView that contains the data to bind.</param>
            <param name="labelField">Field name of the data that contains X axis labels.</param>
            <exception cref="T:GraphicsServer.GSNet.SeriesData.DPConnectionException">The label field does not exist in the DataView.</exception>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.AutoBindData(System.Data.DataSet,System.String,System.String[])">
            <summary>
            Creates a series for each field name in a string array, and binds field data
            from a table in a DataSet to the Y-component of each series.
            </summary>
            <param name="dataSet">The DataSet that contains the data to bind.</param>
            <param name="tableName">The name of the DataSet table that will be binded.</param>
            <param name="fields">A string array of field names.</param>
            <exception cref="T:GraphicsServer.GSNet.SeriesData.DPConnectionException">One or more field names do not
            exist within the table or the table name does not exist in the DataSet.</exception>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.AutoBindData(System.Data.DataSet,System.String,System.String[],System.String)">
            <summary>
            Creates a series for each field name passed in a string array, binds data from
            fields in a specified table of a DataSet to the Y component of each series, creates a
            label series for a specified label field, and associates this label field with the X
            axis.
            </summary>
            <exception cref="T:GraphicsServer.GSNet.SeriesData.DPConnectionException">One or more field names do not
            exist within the table, the label field does not exist in the table, or the table name 
            does not exist in the DataSet.</exception>
            <param name="dataSet">The DataSet that contains the data to bind.</param>
            <param name="tableName">The name of the DataSet table that will be binded.</param>
            <param name="fields">A string array of field names.</param>
            <param name="labelField">Field name of the data that contains x-axis labels.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.AutoBindData(System.Data.DataSet,System.String,System.String)">
            <summary>
            Creates a label series for the specified field in a specified table
            of a DataSet, and associates this series with the X axis.
            </summary>
            <param name="dataSet">The DataSet that contains the data to bind.</param>
            <param name="tableName">The name of the DataSet table that will be binded.</param>
            <param name="labelField">Field name of the data that contains x-axis labels.</param>
            <exception cref="T:GraphicsServer.GSNet.SeriesData.DPConnectionException">The label field does not
            exist within the table, or the table name does not exist in the DataSet.</exception>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.WriteTemplate(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            DEPRECATED. Use the WriteChartProperties method.
            </summary>
            <remarks>
            This method has been replaced by the WriteChartProperties method.  WriteChartProperties()
            has enhanced functionality to be able to write a sparsely populated chart
            property XML structure. Note that the TemplateFlags class now contains numerous
            flags to control which properties are written.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.WriteChartProperties(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)">WriteChartProperties</seealso>
            <param name="filename">Name of the file to write template to.</param>
            <param name="flags">Template flags to control template writing.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.WriteTemplate(System.IO.Stream,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            DEPRECATED. Use the WriteChartProperties method.
            </summary>
            <remarks>
            This method has been replaced by the WriteChartProperties method.  WriteChartProperties()
            has enhanced functionality to be able to write a sparsely populated chart
            property XML structure.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.WriteChartProperties(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)">WriteChartProperties Method</seealso>
            <param name="stream">Name of the stream to write template to.</param>
            <param name="flags">Template flags to control template writing.</param> 
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReadTemplate(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            DEPRECATED. Use the ReadChartProperties method.
            </summary>
            <remarks>
            This method has been replaced by the ReadChartProperties method.  ReadChartProperties()
            has enhanced functionality to be able to read a sparesly populated chart
            property XML structure.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.ReadChartProperties(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)">ReadChartProperties Method</seealso>
            <param name="filename">Name of the template file to read.</param>
            <param name="flags">Template flags to control template writing.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReadTemplate(System.IO.Stream,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            DEPRECATED. Use the ReadChartProperties method.
            </summary>
            <remarks>
            This method has been replaced by the ReadChartProperties method. ReadChartProperties()
            has enhanced functionality to be able to read a sparesly populated chart
            property XML structure.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.ReadChartProperties(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)">ReadChartProperties Method</seealso>
            <param name="stream">Name of the template stream to read.</param>
            <param name="flags"><see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags</see> 
            to control template writing.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Reads chart properties from the supplied XmlNode.  
            </summary>
            <remarks>
            The ReadChartProperties method calls this method to do all 
            the work. You can, however, bypass ReadChartProperties and call this 
            method directly.  Also note that many of the other chart objects have a 
            ReadProperties method that can be called directly.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.ReadChartProperties(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)">ReadChartProperties Method</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
            <param name="node">XmlNode that contains the chart properties.</param>
            <param name="flags"><see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags</see> 
            to control template reading.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReadChartProperties(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Reads chart properties from XML data in the specified file and applies
            those properties as directed by the TemplateFlags.
            </summary>
            <remarks>
            The XML data need not contain the full set of property
            elements for the chart. It can be sparsely populated.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
            <param name="filename">Name of the template file to read.</param>
            <param name="flags"><see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags</see> 
            to control template reading. If this parameter is null, the default flag settings apply.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReadChartProperties(System.IO.Stream,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Reads chart properties from XML data in the specified stream and applies
            those properties as directed by the TemplateFlags.
            </summary>
            <remarks>
            The XML data need not contain the full set of property
            elements for the chart. It can be sparsely populated.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
            <param name="stream">Contains XML data.</param>
            <param name="flags"><see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags</see> 
            to control template reading. If this parameter is null, the default flag settings apply.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.GetAllChartPropertyFlags">
            <summary>
            Returns the flags necessary to read/write all the
            chart properties to a template XML file. 
            </summary>
            <remarks>
            This method will return an instance of TemplateFlags,
            which contains the options for reading and writing a 
            complete XML template file, including Quick Layout data
            and Annotation Layout data.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
            <returns>The template flags</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReadAllChartProperties(System.String)">
            <summary>
            Reads all chart property settings from an XML file and restores
            the entire state of the chart.
            </summary>
            <remarks>
            This method reads the all the properties from an XML file, effectively
            restoring a chart's previous state.
            </remarks>
            <param name="filename">The template file to be read</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReadAllChartProperties(System.IO.Stream)">
            <summary>
            Reads all chart property settings from an XML stream and restores
            the entire state of the chart.
            </summary>
            <remarks>
            This method reads the all the properties from an XML stream, effectively
            restoring a chart's state.
            </remarks>
            <param name="stream">The template file stream be read</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>
            Writes chart properties from the supplied XmlNode.
            </summary>
            <remarks>
            The ReadChartProperties method calls this method to do all the work. You can,
            however, bypass ReadChartProperties() and call this method directly. Also note that
            many other chart objects have a ReadProperties method that can be called
            directly.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
            <returns>
            If, based on the TemplateFlags, properties have been found to write, this method
            returns an XmlElement containing the properties. Otherwise, it returns null.
            </returns>
            <param name="doc">The XmlDocument object that is used as a context to create new XmlElement nodes.</param>
            <param name="flags"><see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags</see> 
            to control template writing.</param>
            <param name="nodeName">The name that will be used to label the element node that is returned.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.WriteChartProperties(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Writes chart properties to XML and stores them in the specified file.  
            </summary>
            <remarks>
            Note that the TemplateFlags object can be used to control which 
            properties get written out.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
            <param name="filename">Name of the template file to write to.</param>
            <param name="flags"><see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags</see> 
            to control template writing. If this parameter is null, the default flag settings apply.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.WriteChartProperties(System.IO.Stream,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Writes chart properties to XML and stores them in the specified stream.
            </summary>
            <remarks>
            Note that the TemplateFlags object can be used to control which 
            properties get written out.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Enumeration</seealso>
            <param name="stream">Name of the stream to write to.</param>
            <param name="flags"><see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags</see> 
            to control template writing. If this parameter is null, the default flag settings apply.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.WriteAllChartProperties(System.String)">
            <summary>
            Writes all chart properties to an XML file.
            </summary>
            <remarks>
            This is the basic method for writing all properties to an XML file.  It saves
            the entire state of the chart.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.ReadAllChartProperties(System.String)">ReadAllChartProperties Method</seealso>
            <param name="filename">The filename of the XML template to be written</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.WriteAllChartProperties(System.IO.Stream)">
            <summary>
            Writes all chart properties to an XML stream.
            </summary>
            <remarks>
            This is the basic method for writing all properties to an XML stream.  It saves
            the entire state of the chart.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.ReadAllChartProperties(System.IO.Stream)">ReadAllChartProperties Method</seealso>
            <param name="stream">The stream for the XML template to be written</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.WriteImageMapString">
            <summary>Returns a string containing an HTML image map for the chart.</summary>
            <returns>A string containing an HTML image map.</returns>
            <remarks>
            <para>Set the <see cref="P:GraphicsServer.GSNet.Charting.Chart.EnableWebHotSpots">EnableWebHotSpots</see> property to <c>true</c> before calling this method.</para>
            <para>The returned image map includes all chart hot regions with their associated URLs
            and tooltips. The default name for the image map is ChartImageMap. Use the overloaded
            method to assign your own image map name.</para>
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.WriteImageMapString(System.String)">WriteImageMapString Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.WriteImageMapString(System.String)">
            <summary>Returns a string containing an HTML image map for the chart.</summary>
            <remarks>
            <para>Set the <see cref="P:GraphicsServer.GSNet.Charting.Chart.EnableWebHotSpots">EnableWebHotSpots</see> property to <c>true</c> before calling this method.</para>
            <para>The returned image map includes all chart hot regions and their associated URLs
            and tooltips.</para>
            </remarks>
            <returns>A string containing an HTML image map.</returns>
            <param name="ImageMapName">Name used to reference the image map in HTML tags.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.RenderImageMap(System.Web.UI.HtmlTextWriter,System.String)">
            <summary>
            Creates an image map containing all chart hot regions
            with their associated URLs and tooltips.
            </summary>
            <remarks>
            This method is called by the WriteImageMapString methods. Rather than calling this
            method directly, call one of the WriteImageMapString methods in your code.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.WriteImageMapString">WriteImageMapString Method</seealso>
            <param name="output">HtmlTextWriter object to receive the image map.</param>
            <param name="ImageMapName">Name used to reference the image map in HTML tags.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.BestFitControlsInChart(System.Drawing.Size)">
            <summary>
            Runs a quick and dirty algorithm to provide a default position for the various
            chart objects within the chart space.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.QuickLayout(GraphicsServer.GSNet.Charting.QuickLayoutType)">QuickLayout Method</seealso>
            <param name="s">Size of the chart</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ResizeAndRepositionChartObjects(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Resizes and repositions chart objects proportionally
            based on the old size and the new size of the chart window.
            </summary>
            <param name="oldSize">Previous chart height and width.</param>
            <param name="newSize">New chart height and width.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.PropertyChangedHandler(System.Object,GraphicsServer.GSNet.Charting.PropertyEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.GetSeriesCount">
            <summary>
            Returns the number of series that are inside the chart.
            </summary>
            <remarks>
            You can also get this information using the SeriesDrawingList.Count
            property.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.SeriesDrawingList">SeriesDrawingList Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.AddSeries(GraphicsServer.GSNet.SeriesData.Series)">
            <summary>
            Adds a series to the chart. 
            </summary>
            <remarks>
            The return value is the index of the series in the chart and can be used 
            to reference that series later.
            <para>Note that when a series is added to a chart, it is wrapped inside
            of a SeriesDrawing object. See the <see cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing</see>
            class for more information.</para>
            </remarks>
            <returns>Zero-based index of the SeriesDrawing object in the SeriesDrawingList.</returns>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing Class</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.GetSeriesDrawing(System.Int32)">GetSeriesDrawing Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.RemoveAllSeries">RemoveAllSeries Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.ReplaceSeries(System.Int32,GraphicsServer.GSNet.SeriesData.Series)">ReplaceSeries Method</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.AxisBase.LabelSeries">LabelSeries Property</seealso>
            <example>
            	<para>The code fragment below creates two new Series objects loaded with random
                data, an additional Series object loaded with category labels, and adds all three
                to a chart. Notice that only the data series are added by calling the AddSeries
                method. The label series is simply assigned to the LabelSeries property of the X
                axis.</para>
            	<para>It is also worth pointing out that before adding the new Series objects, the
                example code removes the two dummy series created at design time as an aide to
                design. If we had omittted the call to RemoveAllSeries(), the chart would end up
                with four data series rather than two.</para>
            	<code lang="CS" title="C# Example">
            //Load random data for apple sales into a series
            Series apples = new Series();
            apples.RandomizeComponent(SeriesComponent.Y, 9, 46, 237);
            apples.SeriesName = "Apples";
             
            //Load random data for orange sales into a series
            Series oranges = new Series();
            oranges.RandomizeComponent(SeriesComponent.Y, 9, 17, 193);
            oranges.SeriesName = "Oranges";
             
            //Load category (X axis) labels into a series
            Series labels = new Series();
            System.Globalization.DateTimeFormatInfo dt = new System.Globalization.DateTimeFormatInfo();
            for (int i = 1; i &lt;= 12; i++) 
                labels.SetValue(SeriesComponent.Label, i - 1, dt.GetAbbreviatedMonthName(i));
             
            //Remove the dummy series created at design time
            this.gsNetWinChart1.Chart.RemoveAllSeries();
             
            //Add the new data series to the chart
            int appleIndex = this.gsNetWinChart1.Chart.AddSeries(apples);
            int orangeIndex = this.gsNetWinChart1.Chart.AddSeries(oranges);
             
            //Add category labels
            this.gsNetWinChart1.Chart.Grid.AxisX.LabelSeries = labels;
                </code>
            	<code lang="VB" title="Visual Basic Example">
            'Load random data for apple sales into a series
            Dim apples As New Series
            apples.RandomizeComponent(SeriesComponent.Y, 9, 46, 237)
            apples.SeriesName = "Apples"
             
            'Load random data for orange sales into a series
            Dim oranges As New Series
            oranges.RandomizeComponent(SeriesComponent.Y, 9, 17, 193)
            oranges.SeriesName = "Oranges"
             
            'Load category (X axis) labels into a series
            Dim labels As New Series
            Dim dt As New System.Globalization.DateTimeFormatInfo
            Dim i As Integer
            For i = 1 To 12
                'Set label to the name of a month
                labels.SetValue(SeriesComponent.Label, i - 1, dt.GetAbbreviatedMonthName(i))
            Next
             
            With Me.GsNetWinChart1.Chart
                'Remove the dummy series created at design time
                .RemoveAllSeries()
             
                'Add the new data series to the chart
                Dim appleIndex As Integer = .AddSeries(apples)
                Dim orangeIndex As Integer = .AddSeries(oranges)
             
                'Add category labels
                .Grid.AxisX.LabelSeries = labels
            End With
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReplaceSeries(System.Int32,GraphicsServer.GSNet.SeriesData.Series)">
            <summary>
            Replaces the series object for an existing series in the chart.
            </summary>
            <remarks>
            If a series does not exist at the specified index, the replacement will fail. 
            The return value indicates whether or not the replacement was successful. 
            <para>Note that when a series is first added to a chart, it is wrapped inside
            of a SeriesDrawing object. The SeriesDrawing object carries all the drawing properties 
            for a series within the chart. See the <see cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing</see>
            class for more information.</para>
            	<para>Using this method to swap a series of data within an existing SeriesDrawing object preserves
            all the original drawing properties. This method is useful for developers who create
            multiple random series objects at design-time in order to set up all the drawing properties within
            the design-time environment. Then at run time the developer simply needs to create the new series
            objects and replace the random series already in the chart.</para>
            </remarks>
            <returns>Returns true if the series was successfully replaced.</returns>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing Class</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.GetSeriesDrawing(System.Int32)">GetSeriesDrawing Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.AddSeries(GraphicsServer.GSNet.SeriesData.Series)">AddSeries Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.RemoveAllSeries">RemoveAllSeries Method</seealso>
            <example>
                The code fragment below replaces two series with two new series populated with data
                taken from a table in a dataset. 
                <code lang="CS" title="C# Example">
            //Populate the dataset
            this.dsShipments1.Clear();
            this.sqlDataAdapter1.Fill(this.dsShipments1);
             
            //Send the dataset to a chart data provider
            DataSetDataProvider dp = new DataSetDataProvider(this.dsShipments1, "Shipments by Month");
             
            //Create two new series
            Series apples = new Series();
            Series oranges = new Series();
             
            //Bind data to the series
            apples.BindComponent(SeriesComponent.Y, dp, "Apples");
            oranges.BindComponent(SeriesComponent.Y, dp, "Oranges");
             
            int indexApples = 0;
            int indexOranges = 1;
             
            //Replace existing data series with the new series
            if (this.gsNetWinChart1.Chart.ReplaceSeries(indexApples, apples) != true)
                //If the series doesn't exist, add it
                indexApples = this.gsNetWinChart1.Chart.AddSeries(apples);
             
            if (this.gsNetWinChart1.Chart.ReplaceSeries(indexOranges, oranges) != true)
                indexOranges = this.gsNetWinChart1.Chart.AddSeries(oranges);
             
            //SeriesName displays in the legend
            this.gsNetWinChart1.Chart.GetSeriesDrawing(indexApples).SeriesName = "Apples";
            this.gsNetWinChart1.Chart.GetSeriesDrawing(indexOranges).SeriesName = "Oranges";
             
            //Draw the chart
            this.gsNetWinChart1.Chart.ChartType = ChartType.Line2D;
                </code>
            	<code lang="VB" title="Visual Basic Example">
            'Populate the dataset
            Me.DsShipments1.Clear()
            Me.SqlDataAdapter1.Fill(Me.DsShipments1)
             
            'Send the dataset to a chart data provider
            Dim dp As DataSetDataProvider = New DataSetDataProvider(Me.DsShipments1, "Shipments by Month")
             
            'Create two new series 
            Dim apples As New Series
            Dim oranges As New Series
             
            'Bind data to the series
            apples.BindComponent(SeriesComponent.Y, dp, "Apples")
            oranges.BindComponent(SeriesComponent.Y, dp, "Oranges")
             
            Dim indexApples As Integer = 0
            Dim indexOranges As Integer = 1
             
            With Me.GsNetWinChart1.Chart
                'Replace existing data series with the new series
                If Not .ReplaceSeries(indexApples, apples) Then
                    'If the series doesn't exist, add it
                    indexApples = .AddSeries(apples)
                End If
                If Not .ReplaceSeries(indexOranges, oranges) Then
                    indexApples = .AddSeries(oranges)
                End If
             
                'SeriesName displays in the legend
                .GetSeriesDrawing(indexApples).SeriesName = "Apples"
                .GetSeriesDrawing(indexOranges).SeriesName = "Oranges"
             
                'Draw the chart
                .ChartType = ChartType.Line2D
            End With
                </code>
            </example>
            <seealso cref="T:GraphicsServer.GSNet.SeriesData.DataSetDataProvider">DataSetDataProvider Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.AddSeriesRandom">
            <summary>
            Adds a series to the chart with 5 random data points. Each of the 5
            random data points have all their <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/>
            values filled in with data.
            </summary>
            <returns>Zero-based index of the SeriesDrawing object in the SeriesDrawingList.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.AddSeriesRandom(System.String)">
            <summary>
            Adds a series to the chart with 5 random data points. Each of the 5
            random data points have all their <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/>
            values filled in with data.
            </summary>
            <param name="seriesName">The name of the new random series, which appears in the legend.</param>
            <returns>Zero-based index of the SeriesDrawing object in the SeriesDrawingList.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ApplySeriesDefaultsToAllSeries">
            <summary>
            Calling this method will reapply all the default properties in the SeriesDrawing object
            to each SeriesDrawing object currently in the SeriesDrawingList.
            </summary>
            <remarks>
            Call this method after loading a template into the chart object.  When a template
            is loaded into the chart, the chart will not force the existing SeriesDrawing objects
            to reload their properties based on the SeriesDefault properties read in from the template.
            Calling this method will ensure that the existing SeriesDrawing objects in the chart
            get refreshed with the SeriesDefaults from the template.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.RemoveAllSeries">
            <summary>
            Removes all the SeriesDrawing objects from the chart.
            </summary>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.SeriesDrawingList">SeriesDrawingList Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.GetSeriesDrawing(System.Int32)">
            <summary>
            Retrieves the SeriesDrawing object for the specified index.
            </summary>
            <returns>SeriesDrawing object or null if index does not contains an object.</returns>
            <example>
            	<code lang="CS" title="Setting marker properties">
            /* Assume that in previous code we have created 
             * two series, apples and oranges 
             */
            Chart cht = this.gsNetWinChart1.Chart; 
             
            //Add the new data series to the chart
            int appleIndex = cht.AddSeries(apples);
            int orangeIndex = cht.AddSeries(oranges);
             
            //Set marker characteristics
            cht.GetSeriesDrawing(appleIndex).MarkerLine.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;
            cht.GetSeriesDrawing(orangeIndex).MarkerLine.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid;
                </code>
            	<code lang="VB" title="Setting marker properties">
            'Assume that in previous code we have created
            'two series, apples and oranges
            With Me.GsNetWinChart1.Chart
                'Add the new data series to the chart
                Dim appleIndex As Integer = .AddSeries(apples)
                Dim orangeIndex As Integer = .AddSeries(oranges)
                'Set marker characteristics
                .GetSeriesDrawing(appleIndex).MarkerLine.DashStyle = Drawing2D.DashStyle.DashDot
                .GetSeriesDrawing(orangeIndex).MarkerLine.DashStyle = Drawing2D.DashStyle.Solid
            End With
                </code>
            </example>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawingCollection">SeriesDrawingCollection Class</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.AddSeries(GraphicsServer.GSNet.SeriesData.Series)">AddSeries Method</seealso>
            <remarks>
            Note that the SeriesDrawingCollection class also includes a GetSeriesDrawing
            method. That method and this one perform exactly the same function.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.GetAnnotation(System.Int32)">
            <summary>Retrieves the annotation at the specified index in the AnnotationList.</summary>
            <returns>Annotation object or null if no annotation exists at the specified index.</returns>
            <remarks>Note that the AnnotationCollection class also includes a GetAnnotation(int index)
            method. That method and this one perform exactly the same function.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.AnnotationCollection.GetAnnotation(System.Int32)">AnnotationCollection.GetAnnotation method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.BeginInit">
            <summary>Temporarily suspends Reconcile and RecalcLayout operations.</summary>
            <remarks>
                This method implements the ISupportInitialize.BeginInit interface method.
                BeginInit() disables any Reconcile or RecalcLayout operation that might occur due
                to setting properties in the chart. EndInit() re-enables Reconcile and RecalcLayout
                operations. 
                <para>Use both methods together for temporarily disabling Reconcile and
                RecalcLayout operations while doing a block of property setting operations.</para>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.EndInit">
            <summary>
            See BeginInit().
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.BeginInit">BeginInit Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReconcileAndRecalcAll">
            <summary>
            Reconciles series data with the active ChartType, resets series drawing 
            characteristics to the default for the active ChartType, recalculates the
            layout, and redraws the chart.
            </summary>
            <remarks>
                This method is called internally by Graphics Server each time the value of the
                ChartType property changes. You should not call it directly from your code; it
                will reset chart display properties to the defaults for the selected ChartType. 
                <para>If you have modified data within any of the chart's attached Series, call the
                ReconcileDataAndRecalc() method to update the display. If you have modified
                characteristics of drawing objects on the chart, call the RecalcLayout()
                method.</para>
            	<para>There are two concepts here: reconciling series data and reconciling
                SeriesDrawing display properties. Reconciling data is a non-destructive process
                that simply determines if an attached series contains the proper data components to
                be displayed for the active ChartType. (For example, if the active ChartType is
                Range2D, it checks to see that there are both High and Low series components.)
                During the process of reconciling data, each SeriesDrawing object also walks all
                components within the attached Series object and buffers up the maximum number of
                data points across those components for later use.</para>
            	<para>In contrast, reconciling SeriesDrawing display properties is a destructive
                process. SeriesDrawing properties are modified to suit the rules of the active
                ChartType. For example, each time you change the chart type you will notice that
                the MarkerType property on the SeriesDrawing objects change to reflect the active
                ChartType. Other properties may be modified as well. This is why you may not want
                to call this method directly. The ReconcileDataAndRecalc() method and the
                RecalcLayout() method are usually better choices.</para>
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.ReconcileDataAndRecalc">ReconcileDataAndRecalc Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.RecalcLayout">RecalcLayout Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReconcileDataAndRecalc">
            <summary>
            Reconciles series data with the active ChartType, recalculates the layout,
            and redraws the chart.
            </summary>
            <remarks>
            This method should be called any time data has been manipulated in any of the
            attached Series. (Remember that Series are wrapped inside the SeriesDrawing object when
            attached to the chart.) This method will scan all the attached Series and validate they
            are still valid to display on the active ChartType. It also walks all attached Series
            and buffers up the total data point count across the active Series. This is the
            definition of reconciling the data based on the active chart type. It is
            non-destructive.
            <para>Note that this method is different from the ReconcileAndRecalcAll() method, which
            reconciles the data but also reconciles the display properties on the SeriesDrawing object.
            Reconciling the display properties is a destructive process.</para>
            <para>Also note that RecalcLayout() will be called within this method.</para>
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.RecalcLayout">RecalcLayout Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReconcileMarkerConditions">
            <summary>
            Walks each attached SeriesDrawing object and tells it to
            run the attached marker condition tests.  
            </summary>
            <remarks>
            Note that this method is lightweight and does not cause any data or property
            reconciliation to take place.
            </remarks>
            <example>
            	<code lang="CS" title="Using marker conditions">
            // Assume there are two created series and add them to the chart
            this.gsNetWinChart1.Chart.AddSeries(s1);
            this.gsNetWinChart1.Chart.AddSeries(s2);
                        
            // Next create the check object
            LessThanYCheck check = new LessThanYCheck(100);
            // Set the color if the condition passes
            check.MarkerFill.Color = Color.Yellow;
            // Add the condition to the series drawing objects
            this.gsNetWinChart1.Chart.GetSeriesDrawing(0).AddMarkerCondition(check);
            this.gsNetWinChart1.Chart.GetSeriesDrawing(1).AddMarkerCondition(check);
            // Now tell the chart to run the tests and display the results
            this.gsNetWinChart1.Chart.ReconcileMarkerConditions();
                </code>
            	<code lang="VB" title="Using marker conditions">
            ' Assume there are two created series and add them to the chart
            Me.GsNetWinChart1.Chart.AddSeries(s1)
            Me.GsNetWinChart1.Chart.AddSeries(s2)
             
            ' Next create the check object
            Dim check As LessThanYCheck = New LessThanYCheck(100)
            ' Set the color if the condition passes
            check.MarkerFill.Color = Color.Yellow
            ' Add the condition to the series drawing objects
            Me.GsNetWinChart1.Chart.GetSeriesDrawing(0).AddMarkerCondition(check)
            Me.GsNetWinChart1.Chart.GetSeriesDrawing(1).AddMarkerCondition(check)
            ' Now tell the chart to run the tests and display the results
            Me.GsNetWinChart1.Chart.ReconcileMarkerConditions()
                </code>
            </example>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddMarkerCondition(GraphicsServer.GSNet.Charting.IMarkerCondition)">AddMarkerCondition Method</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.LessThanYCheck">LessThanYCheck Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReconcileLineConditions">
            <summary>
            Walks each attached SeriesDrawing object and tells it to
            run the attached line condition tests.  
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddLineCondition(GraphicsServer.GSNet.Charting.ILineCondition)">AddLineCondition</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.SeriesDrawing.AddMarkerCondition(GraphicsServer.GSNet.Charting.IMarkerCondition)">AddMarkerCondition</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReconcileDataAndRecalcForCodeGen">
            <summary>
            This method exists to support the code generation sequence in the win forms
            InitializeComponents() method. It should not be used directly in code.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ReconcileAllDataForActiveChartType">
            <summary>
            Reconciles all series data with the current chart type.
            </summary>
            <remarks>
            Call this method, then call RecalcLayout to generate the drawing objects for the 
            grid. Note that once this method is called, the properties on the series
            and the active axis can be modified.	
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.ReconcileDataAndRecalc">ReconcileDataAndRecalc Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.RecalcLayout">
            <summary>
            Recalculates the axis coordinate system, regenerates all drawing objects in
            the grid, updates the legend, and redraws the chart.
            </summary>
            <remarks>
            At design time, when you modify a chart property, the chart is redrawn to display the result. This 
            encourages interactive experimentation. The same behavior carries over to run time when a user 
            interactively changes properties through the property window or property pages. However, it
            is not desirable to have the chart update after every modification when you set properties in 
            code. In this case, drawing objects on screen are not updated when you change property values.
            Once you have modified all the properties that you intend to set, call the RecalcLayout() method 
            to update the chart's display. 
            <para>Note that if data has been modified within any of the attached Series, calling
            this method may not properly show the results of the updated data. Instead
            call the ReconcileDataAndRecalc() method.</para>
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.ReconcileDataAndRecalc">ReconcileDataAndRecalc Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.Paint(System.Windows.Forms.PaintEventArgs,System.Boolean)">
            <summary>Paints into the Graphics object that resides within the PaintEventArgs.</summary>
            <remarks>This is the main drawing method used by the chart.</remarks>
            <param name="e">PaintEventArgs</param>
            <param name="drawSelection">Paints the selection rectangle around the select object if true.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.Export(System.Drawing.Graphics,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>Exports the active chart to an image file.</summary>
            <example>
            	<code lang="CS" title="Export from WinForm">
            // Using Windows Forms
            GraphicsServer.GSNet.Charting.Chart chart = this.gsNetWinChart1.Chart;
            // "this" must refer to a (Win)Form
            chart.Export(this.CreateGraphics(), "C:\\GSImages\\chart1.jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
                </code>
            	<code lang="CS" title="Export from WebForm">
            // Using Web Forms
            //need to create Bitmap and Graphics objects to output chart image to file
            int wid = (int)GSNetWebChart1.Chart.Size.Width;
            int ht = (int)GSNetWebChart1.Chart.Size.Height;
            Bitmap bmap = new Bitmap(wid, ht);
            Graphics gfx = Graphics.FromImage(bmap);
            GSNetWebChart1.Chart.Export(gfx, "C:\\GsWebImages\chart1.png", System.Drawing.Imaging.ImageFormat.Png);
            //need to clean up gfx object, IN ADDITION TO normal .NET garbage collection
            gfx.Dispose();
            bmap.Dispose();
                </code>
            	<code lang="VB" title="Export from WnForm">
            ' Using Windows Forms
            Dim chart As GraphicsServer.GSNet.Charting.Chart = Me.GsNetWinChart1.Chart
            ' "Me" must refer to a (Win)Form
            chart.Export(Me.CreateGraphics(), "C:\GSImages\chart1.jpg", System.Drawing.Imaging.ImageFormat.Jpeg)
                </code>
            	<code lang="VB" title="Export from WebForm">
            ' Using Web Forms
            ' need to create Bitmap and Graphics objects to output chart image to file
            Dim wid As Integer = CInt(GSNetWebChart1.Chart.Size.Width)
            Dim ht As Integer = CInt(GSNetWebChart1.Chart.Size.Height)
            Dim bmap As Bitmap = New Bitmap(wid, ht)
            Dim gfx As Graphics = Graphics.FromImage(bmap)
            GSNetWebChart1.Chart.Export(gfx, "C:\GSWebImages\chart1.png", System.Drawing.Imaging.ImageFormat.Png)
            'need to clean up gfx object, IN ADDITION TO normal .NET garbage collection
            gfx.Dispose()
            bmap.Dispose()
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.Export(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Exports the active chart to an image file.
            </summary>
            <example>
            	<code lang="CS" title="Export using Windows Forms">
            // Using Windows Forms 
            GraphicsServer.GSNet.Charting.Chart chart = this.gsNetWinChart1.Chart; 
            chart.Export("C:\\GSImages\\chart1.jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
                </code>
            	<code lang="CS" title="Export using Web Forms">
            // Using Web Forms 
            GSNetWebChart1.Chart.Export("C:\\GsWebImages\chart1.png", System.Drawing.Imaging.ImageFormat.Png);
                </code>
            	<code lang="VB" title="Export using Windows Forms">
            ' Using Windows Forms 
            Dim chart As GraphicsServer.GSNet.Charting.Chart = Me.GsNetWinChart1.Chart 
            chart.Export("C:\GSImages\chart1.jpg", System.Drawing.Imaging.ImageFormat.Jpeg)
                </code>
            	<code lang="VB" title="Export using Web Forms">
            ' Using Web Forms 
            GSNetWebChart1.Chart.Export("C:\GSWebImages\chart1.png", System.Drawing.Imaging.ImageFormat.Png)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.Export(System.String)">
            <summary>Exports the active chart to an image file.</summary>
            <param name="fileName">
            Name of the image file. Must include a valid image file extension, such as .JPG,
            .BMP, .WMF, and so on. The extension must be a valid ImageFormat from the
            System.Drawing.Imaging.ImageFormat enumeration.
            </param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.Export(System.Drawing.Graphics,System.String)">
            <summary>Exports the active chart to an image file.</summary>
            <param name="g">Graphics object to help with the export.</param>
            <param name="fileName">
            Name of the image file. Must include a valid image file extension, such as .JPG,
            .BMP, .WMF, and so on. The extension must be a valid ImageFormat from the
            System.Drawing.Imaging.ImageFormat enumeration.
            </param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.Export(System.Drawing.Graphics,System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>Exports the active chart to a stream.</summary>
            <param name="g">Graphics object to help with the export.</param>
            <param name="s">Stream to save the image to.</param>
            <param name="imageFormat">Image format. See System.Drawing.Imaging.ImageFormat enumeration.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.Export(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>Exports the active chart to a stream.</summary>
            <param name="s">Stream to save the image to.</param>
            <param name="imageFormat">Image format. See System.Drawing.Imaging.ImageFormat enumeration.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ExportToClipboard(System.Drawing.Graphics)">
            <summary>Exports the active chart to the clipboard.</summary>
            <param name="g">Graphics object to help with the export.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ExportToClipboard">
            <summary>Exports the active chart to the clipboard.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.Print(System.Drawing.Printing.PrintPageEventArgs,System.Drawing.Point)">
            <summary>
            Prints the active chart. The chart will be offset on the page based on the point
            passed in.
            </summary>
            <remarks>Note that this method changes the Graphics PageUnit to GraphicsUnit.Point
            when it prints.  This may cause the graph to print larger then it should.  A new
            set of methods called PrintChart have been create to fix this problem.
            These existing Print methods have been left in place for backward compatibility.</remarks>
            <param name="e">The printing arguments</param>
            <param name="point">The point to offset the printing of the chart on the page.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.Print(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>Prints the active chart.</summary>
            <remarks>Note that this method changes the Graphics PageUnit to GraphicsUnit.Point
            when it prints.  This may cause the graph to print larger then it should.  A new
            set of methods called PrintChart have been create to fix this problem.
            These existing Print methods have been left in place for backward compatibility.</remarks>
            <param name="e">The printing arguments</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.PrintChart(System.Drawing.Printing.PrintPageEventArgs,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Prints the active chart without changing the Grapics.PageUnit property.  The
            GraphicsUnit.Display PageUnit setting produces good results.
            </summary>
            <remarks>This routine will print the chart at the specified point.  The chart will aslo
            be resize based on the specified size before printing.  After the chart is printed the
            original size of the chart will be reset.
            </remarks>
            <param name="e">The printing arguments</param>
            <param name="location">The point to offset the printing of the chart on the page.</param>
            <param name="size">The size to print the chart.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.PrintChart(System.Drawing.Printing.PrintPageEventArgs,System.Drawing.Point)">
            <summary>
            Prints the active chart without changing the Grapics.PageUnit property.  The
            GraphicsUnit.Display PageUnit setting produces good results.
            </summary>
            <remarks>This routine will print the chart at the specified point.  The current chart size
            will be used when printing the chart.</remarks>
            <param name="e">The printing arguments</param>
            <param name="location">The point to offset the printing of the chart on the page.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.PrintChart(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Prints the active chart without changing the Grapics.PageUnit property.  The
            GraphicsUnit.Display PageUnit setting produces good results.
            </summary>
            <remarks>This routine will print the chart in the upper left corner of the page.</remarks>
            <param name="e">The printing arguments</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.QuickLayout(GraphicsServer.GSNet.Charting.QuickLayoutType)">
            <summary>
            Lay out the chart using a canned quick layout format.
            </summary>
            <remarks>
            This method uses one of the canned layouts from the <see cref="T:GraphicsServer.GSNet.Charting.QuickLayoutType">QuickLayoutType</see> enumeration. 
            For more precise control over a quick layout, use the 
            <see cref="T:GraphicsServer.GSNet.Charting.QuickLayoutData">QuickLayoutData</see> class.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.QuickLayoutType">QuickLayoutType Enumeration</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.QuickLayoutData">QuickLayoutData Class</seealso>
            <param name="quickLayoutType">Defines which canned quick layout to apply.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.QuickLayout(GraphicsServer.GSNet.Charting.QuickLayoutData)">
            <summary>
            Lay out the chart by defining relative chart object sizes and locations.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.QuickLayoutData">QuickLayoutData Class</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.GenerateQuickLayout">GenerateQuickLayout Method</seealso>
            <param name="quickLayoutData">Defines the relative location and size for the chart objects.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ToString">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.DisplayChartPropertyWindow(System.Windows.Forms.UserControl)">
            <summary>Displays a Properties window for the chart.</summary>
            <remarks>
            This method pops up the Chart Property window. Once this window is
            displayed, the chart properties can be modified interactively.
            </remarks>
            <param name="owner">The owner of the chart.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.DisplayChartPropertySheet(System.Boolean,System.Collections.ArrayList,System.Boolean,System.Windows.Forms.TabPage)">
            <summary>Displays a chart property sheet dialog that includes a custom page.</summary>
            <remarks>
            Not only does this method display the chart property sheet dialog, it also allows
            custom property pages to be added to the dialog. It is important to note that added 
            custom property pages must be derived from the .Net TabPage object and must
            implement the <see cref="T:GraphicsServer.GSNet.Charting.IPropertyPage">IPropertyPage</see> interface.
            An exception is thrown if the custom property page does not follow these rules.
            <para>Note that this method calls the <see cref="M:GraphicsServer.GSNet.Charting.IPropertyPage.InitPage(GraphicsServer.GSNet.Charting.Chart,GraphicsServer.GSNet.Charting.GSNetPropertySheet)">InitPage</see> 
            method in the IPropertPage interface prior to adding the custom property page to the dialog.</para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.IPropertyPage">IPropertyPage Interface</seealso>
            <exception cref="T:System.Exception">Custom property page does not implement the IPropertyPage interface.</exception>
            <param name="enableAllPages">Flag indicating whether to enable all property pages.  This overrides
            the flags in the <see cref="P:GraphicsServer.GSNet.Charting.Chart.RunTimeProperties">RunTimeProperties</see> object.</param>
            <param name="extraPages">This ArrayList contains all the custom pages to add to the dialog.</param>
            <param name="displayBeforeStandardPages">Set this value to true if the custom pages are to display
            before any of the standard pages that may be turned on.</param>
            <param name="startPage">
            This parameter can be null. If it is not null, then the specified property page
            will be the active page when the dialog displays. Note that this property page must
            also be in the extraPages ArrayList.
            </param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.DisplayChartPropertySheet(System.Boolean)">
            <summary>Displays a chart property sheet dialog.</summary>
            <param name="enableAllPages">Flag indicating whether to enable all property pages.  This overrides
            the flags in the <see cref="P:GraphicsServer.GSNet.Charting.Chart.RunTimeProperties">RunTimeProperties</see> object.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.GenerateQuickLayout">
            <summary>
            Retrieves the current layout of the chart in QuickLayout format.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.QuickLayoutData">QuickLayoutData Class</seealso>
            <returns>A <see cref="T:GraphicsServer.GSNet.Charting.QuickLayoutData">QuickLayoutData</see> object
            for the current chart.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.QuickLayout(GraphicsServer.GSNet.Charting.QuickLayoutData)">QuickLayout(QuickLayoutData) Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.SetRelativeLocation(GraphicsServer.GSNet.Charting.VisualChartObject,GraphicsServer.GSNet.Charting.VisualChartObject,GraphicsServer.GSNet.Charting.RelativeLocation)">
            <summary>Changes one chart object's location in relation to another chart object.</summary>
            <example>
            	<code lang="CS" title="Adding a title to the legend">
            /* 
             * Place an annotation along the bottom edge of the 
             * legend, where it can serve as the legend title 
             */
            Chart cht = this.gsNetWinChart1.Chart; 
            Annotation ann = new Annotation();
            ann.Text = "Legend";
            ann.Size = new System.Drawing.Size(60, 20);
            ann.CoupleToEdge = CoupleToEdge.Top;
            ann.CoupleToObject = CoupleToObject.Legend;
            cht.AnnotationList.Add(ann);
            cht.SetRelativeLocation(ann, cht.Legend, RelativeLocation.BottomMiddle);
                </code>
            	<code lang="VB" title="Adding a title to the legend">
            ' Place an annotation along the bottom edge of the
            ' legend, where it can serve as the legend title
            Dim ann As Annotation = New Annotation
            With ann
                .Text = "Legend"
                .Size = New System.Drawing.Size(60, 20)
                .CoupleToEdge = CoupleToEdge.Top
                .CoupleToObject = CoupleToObject.Legend
            End With
            With Me.GsNetWinChart1.Chart
                .AnnotationList.Add(ann)
                .SetRelativeLocation(ann, .Legend, RelativeLocation.BottomMiddle)
                .SetRelativeLocation(.ChartTitle, .Grid, RelativeLocation.TopMiddle)
            End With
                </code>
            </example>
            <seealso cref="T:GraphicsServer.GSNet.Charting.RelativeLocation">RelativeLocation Enumeration</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.VisualChartObject">VisualChartObject Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.GetGridTopTitle">
            <summary>Gets the annotation that is the top title for the grid.</summary>
            <returns>Annotation object. If no top title exists, then null is returned.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.SetGridTopTitle(System.String)">SetGridTopTitle Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.SetGridTopTitle(System.String)">
            <summary>Creates an annotation at the top edge of the grid.</summary>
            <returns>
            Annotation object. This allows one to change the annotation properties once the
            title has been created.
            </returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.GetGridTopTitle">GetGridTopTitle Method</seealso>
            <remarks>
            	<para>This method checks the chart's annotation collection for an Annotation object
                with the Name property set to "GridTopTitle." If such an object exists, the method
                sets its Text property with the specified string. If an annotation object named
                "GridTopTitle" does not exist, the method creates one. The method also:</para>
            	<list type="bullet">
            		<item>sets the Annotation.Text property with the specified string</item>
            		<item>sets the Annotation.CoupleToObject property to "Grid"</item>
            		<item>sets the Annotation.CoupleToEdge property to "Top"</item>
            		<item>adds the annotation to the chart's annotation collection.</item>
            	</list>
            </remarks>
            <param name="text">The text used for the Top Title.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.GetGridLeftTitle">
            <summary>
            Gets the annotation that is the left title for the grid. 
            </summary>
            <returns>Annotation object. If no Left Title exists, then null is returned.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.SetGridLeftTitle(System.String)">SetGridLeftTitle Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.SetGridLeftTitle(System.String)">
            <summary>Creates an annotation at the left edge of the grid.</summary>
            <remarks>
            	<para>This method checks the chart's annotation collection for an Annotation object
                with the Name property set to "GridLeftTitle." If such an object exists, the method
                sets its Text property with the specified string. If an annotation object named
                "GridLeftTitle" does not exist, the method creates one. The method also:</para>
            	<list type="bullet">
            		<item>sets the Annotation.Text property with the specified string</item>
            		<item>sets the Annotation.TextFormat.RotateAngle property to 270</item>
            		<item>sets the Annotation.CoupleToObject property to "Grid"</item>
            		<item>sets the Annotation.CoupleToEdge property to "Left"</item>
            		<item>adds the annotation to the chart's annotation collection.</item>
            	</list>
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.GetGridLeftTitle">GetGridLeftTitle Method</seealso>
            <returns>
            Annotation object. This allows one to change the annotation properties once the
            title has been created.
            </returns>
            <example>
            	<code lang="CS" title="[C# Example]">
            // Add a left title
            Annotation oLeftTitle = this.gsNetWinChart1.Chart.SetGridLeftTitle("bushels");
             
            // Format the title
            oLeftTitle.TextFormat.Font = new System.Drawing.Font("Myriad Condensed Web", 9, FontStyle.Bold);
            oLeftTitle.TextFormat.Color = Color.DarkSlateBlue;
                </code>
            	<code lang="VB" title="[VB Example]">
            ' Add a left title
            Dim oLeftTitle As Annotation = Me.GsNetWinChart1.Chart.SetGridLeftTitle("bushels")
             
            ' Format the title
            oLeftTitle.TextFormat.Font = New System.Drawing.Font("Myriad Condensed Web", 9, FontStyle.Bold)
            oLeftTitle.TextFormat.Color = Color.DarkSlateBlue
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.GetGridRightTitle">
            <summary>Gets the annotation that is the right title for the grid.</summary>
            <returns>Annotation object. If no Left Title exists, then null is returned.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.SetGridRightTitle(System.String)">SetGridRightTitle Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.SetGridRightTitle(System.String)">
            <summary>Creates an annotation at the right edge of the grid.</summary>
            <returns>
            Annotation object. This allows one to change the annotation 
            properties once the title has been created.
            </returns>
            <remarks>
            	<para>This method checks the chart's annotation collection for an Annotation object
                with the Name property set to "GridRightTitle." If such an object exists, the
                method sets its Text property with the specified string. If an annotation object
                named "GridRightTitle" does not exist, the method creates one. The method
                also:</para>
            	<list type="bullet">
            		<item>sets the Annotation.Text property with the specified string</item>
            		<item>sets the Annotation.TextFormat.RotateAngle property to 90</item>
            		<item>sets the Annotation.CoupleToObject property to "Grid"</item>
            		<item>sets the Annotation.CoupleToEdge property to "Right"</item>
            		<item>adds the annotation to the chart's annotation collection.</item>
            	</list>
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.GetGridRightTitle">GetGridRightTitle Method</seealso>
            <param name="text">The text used for the Right Title.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.GetGridBottomTitle">
            <summary>Gets the annotation that is the bottom title for the grid.</summary>
            <returns>Annotation object. If no top title exists, then null is returned.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.SetGridBottomTitle(System.String)">SetGridBottomTitle Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.SetGridBottomTitle(System.String)">
            <summary>Creates a title at the bottom edge of the grid.</summary>
            <returns>
            Annotation object. This allows one to change the Annotation 
            properties once the title has been created.
            </returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.GetGridBottomTitle">GetGridBottomTitle Method</seealso>
            <remarks>
            	<para>This method checks the chart's annotation collection for an Annotation object
                with the Name property set to "GridBottomTitle." If such an object exists, the
                method sets its Text property with the specified string. If an annotation object
                named "GridBottomTitle" does not exist. The method also:</para>
            	<list type="bullet">
            		<item>sets the Annotation.Text property with the specified string</item>
            		<item>sets the Annotation.CoupleToObject property to "Grid"</item>
            		<item>sets the Annotation.CoupleToEdge property to "Bottom"</item>
            		<item>adds the annotation to the chart's annotation collection.</item>
            	</list>
            </remarks>
            <example>
            	<code lang="CS" title="[C# Example]">
            // Add a bottom title
            Annotation oBottomTitle = this.gsNetWinChart1.Chart.SetGridBottomTitle("fy 05");
             
            // Format the title
            oBottomTitle.TextFormat.Font = new System.Drawing.Font("Myriad Condensed Web", 9, FontStyle.Bold);
            oBottomTitle.TextFormat.Color = Color.DarkSlateBlue;
                </code>
            	<code lang="VB" title="[VB Example]">
            ' Add a bottom title
            Dim oBottomTitle As Annotation = Me.GsNetWinChart1.Chart.SetGridBottomTitle("fy 05")
             
            ' Format the title
            oBottomTitle.TextFormat.Font = New System.Drawing.Font("Myriad Condensed Web", 9, FontStyle.Bold)
            oBottomTitle.TextFormat.Color = Color.DarkSlateBlue
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.UnselectChartObject(System.Boolean)">
            <summary>Unselects the selected Chart object.</summary>
            <remarks>
            Calling this method will unselect the currently selected chart object.
            If there are no currently selected chart object then this method
            will not do anything.
            </remarks>
            <param name="sendChartSelectedEvent">Set to true if you want a second selection change event
            to be sent out indicating that the Chart is now the selected object.  This second event
            will go out after the first event which sends information about the object that is being
            unselected.</param>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.IsVisualObjectSelected">IsVisualObjectSelected Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.GetSelectedObject">GetSelectedObject Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.CanDeleteSelectedChartObject">
            <summary>Returns true if the selected chart object can be deleted.</summary>
            <remarks>
            Calling this method will return a boolean indicating whether or not the
            selected chart object can be deleted.  If no object is selected then false
            is returned.
            </remarks>
            <returns>Returns a true if selected object can be deleted.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.DeleteSelectedChartObject">DeleteSelectedChartObject Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.DeleteSelectedChartObject">
            <summary>Deletes the selected chart object.</summary>
            <remarks>
            Calling this method will delete the selected chart object if it can
            be deleted.  If no object is selected then nothing happens.
            </remarks>
            <returns>Returns a true if selected object can be deleted.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.CanDeleteSelectedChartObject">CanDeleteSelectedChartObject Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.IsVisualObjectSelected">
            <summary>Returns true if a Chart object is currently selected.</summary>
            <remarks>
            Call this method to determine if a chart object is currently selected.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.UnselectChartObject(System.Boolean)">UnselectChartObject Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.GetSelectedObject">GetSelectedObject Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ctrlEvent_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ctrlEvent_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ctrlEvent_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ctrlEvent_MouseHover(System.Object,System.Windows.Forms.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.Chart.ctrlEvent_MouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.ChartWizard">
            <summary>
            This property pops up the Wizard Designer form.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.Designers">
            <summary>
            Expand the Designers object in the property window for access to 
            the list of available designer forms.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.TemplateLoad">
            <summary>
            Invokes a dialog box that allows the user to apply
            an existing template to the current chart.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.TemplateSave">
            <summary>
            Invokes a dialog box that allows the user to save a chart as a template.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.GridTitles">
            <summary>Invokes a dialog box that allows the user to add and modify grid titles.</summary>
            <remarks>
            At run time you can get and set grid titles using Chart object methods such as
            GetGridLeftTitle(), SetGridLeftTitle(), and so on.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.SetGridLeftTitle(System.String)">SetGridLeftTitle Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.SetGridRightTitle(System.String)">SetGridRightTitle Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.SetGridTopTitle(System.String)">SetGridTopTitle Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.SetGridBottomTitle(System.String)">SetGridBottomTitle Method</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Grid.BorderLabelList">BorderLabelList Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.SeriesDefaults">
            <summary>
            Gets the SeriesDefault object that is associated with the chart. This property
            exists to allow access to the properties and methods of the underlying SeriesDefault
            object.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.SeriesDefaults"/></value>
            <remarks>
            When you add a Series object to a chart, it is wrapped in a SeriesDrawing object
            with properties and methods that control the visual display of data on a chart. Each
            new SeriesDrawing object inherits the settings of the SeriesDefaults object exposed by
            the chart's SeriesDefaults property.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDefaults">SeriesDefaults Class</seealso>
            <example>
            	<code lang="CS" title="Setting the SeriesDefaults property">
            //Specify a default setting for SeriesDrawing.MarkerLineThickness
            this.gsNetWinChart1.Chart.SeriesDefaults.MarkerLineThickness = 4;
                </code>
            	<code lang="VB" title="Setting the SeriesDefaults property">
            'Specify a default setting for SeriesDrawing.MarkerLineThickness
            Me.GsNetWinChart1.Chart.SeriesDefaults.MarkerLineThickness = 4
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.ChartType">
            <summary>
            Gets or sets the type of chart used to represent the data.
            </summary>
            <remarks>
            	<para>This property controls which type of chart currently represents the data. For
                a list of supported chart types, see the 
                <see cref="T:GraphicsServer.GSNet.Charting.ChartType">ChartType enumeration</see>.
                </para>
            	<para>Changing the setting for this property reconciles any existing SeriesDrawing
                objects and axes to conform to the selected chart type, and then redraws the
                chart.</para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.ChartType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.Background">
            <summary>
            Gets the Background object that provides the background for the charting area.
            This property exists to provide access to the properties and methods of the underlying 
            Background object.
            </summary>
            <remarks>
            Note that this property controls the main background for the chart. Each chart
            object, including the grid, legend, chart title, and any annotations, can have its own
            background. If you want the chart's main background to show through other objects, you
            must set the Background.Transparency properties of the other objects.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <example>
            	<code lang="CS" title="Setting the Chart.Background property">
            Chart cht = this.gsNetWinChart1.Chart; 
             
            //Make chart objects transparent
            cht.ChartTitle.Background.Transparency = 100;
            cht.Grid.Background.Transparency = 100;
            cht.Legend.Background.Transparency = 100;
             
            //Give the chart a gradient background
            cht.Background.BackgroundType = BackgroundType.Gradient;
            cht.Background.GradientStartColor = System.Drawing.Color.DeepSkyBlue;
            cht.Background.GradientEndColor = System.Drawing.Color.MediumBlue;
                </code>
            	<code lang="VB" title="Setting the Chart.Background property">
            With Me.GsNetWinChart1.Chart
                'Make chart objects transparent
                .ChartTitle.Background.Transparency = 100
                .Grid.Background.Transparency = 100
                .Legend.Background.Transparency = 100
                'Give the chart a gradient background
                .Background.BackgroundType = BackgroundType.Gradient
                .Background.GradientStartColor = System.Drawing.Color.DeepSkyBlue
                .Background.GradientEndColor = System.Drawing.Color.MediumBlue
            End With
                </code>
            </example>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.OleDBConnect">
            <summary>
            Gets the OleDBConnect object associated with the chart. This property exists to
            provide access to the properties and methods of the underlying OleDBConnect
            object.
            </summary>
            <remarks>
            Set this property in the Properties window at design time to create a connection
            to an OleDb data source.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.OleDBConnect"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.OleDBConnect">OleDBConnect Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.Border">
            <summary>
            Gets the Border object that controls the border around the chart. This property
            exists to provide access to the properties and methods of the underlying Border
            object.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Border"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Border">Border Class</seealso>
            <example>
            	<code lang="CS" title="Using the Border property to access the Border object">
            Chart cht = this.gsNetWinChart1.Chart;
             
            //Put a shadowed border around the chart drawing area
            cht.Border.BorderType = BorderType.Simple;
            cht.Border.EdgeEffectType = EdgeEffectType.GradientDropShadow;
                </code>
            	<code lang="VB" title="Using the Border property to access the Border object">
            'Put a shadowed border around the chart drawing area
            With Me.GsNetWinChart1.Chart.Border
                .BorderType = BorderType.Simple
                .EdgeEffectType = EdgeEffectType.GradientDropShadow
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.ChartTitle">
            <summary>Gets the Title object that controls the main title for the chart. 
            This property exists to provide access to the properties and methods of the
            underlying Title object.</summary>
            <remarks>
            In addition to the chart title, a chart can contain other text in the form of
            annotations, including annotations created by setting the GridTitles property.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Title"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Title">Title Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Annotation">Annotation Class</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.GridTitles">GridTitles Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.Grid">
            <summary>
            Gets the Grid object that controls the area of the chart where the graph selected
            by the ChartType property is drawn. The Grid property exists to provide access to the
            properties and methods of the underlying Grid object.
            </summary>
            <remarks>
                This property wraps a Grid object that provides the drawing surface for
                the graph, including axes, axis labels, tick marks, grid lines, limit lines, 
                trend lines, error bars, data markers, and data labels. 
                <para>By default, the Grid object clips all drawing so that it does not extend
                past Grid object boundaries. You can change clipping behavior by setting properties
                of the Grid object. See the Grid Class for more information.</para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Grid"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Grid">Grid Class</seealso>
            <example>
            	<code lang="CS" title="Using the Grid property to access the Grid object">
            Chart cht = this.gsNetWinChart1.Chart;
             
            //Turn grid lines on for X and Y axes
            cht.Grid.AxisX.GridLinesOn = true;
            cht.Grid.AxisY.GridLinesOn = true;
             
            // Make grid lines dotted
            cht.Grid.AxisX.GridLineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot; 
            cht.Grid.AxisY.GridLineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
                </code>
            	<code lang="VB" title="Using the Grid property to access the Grid object">
            With Me.GsNetWinChart1.Chart.Grid
                'Turn grid lines on for X and Y axes
                .AxisX.GridLinesOn = True
                .AxisY.GridLinesOn = True
                'Make grid lines dotted
                .AxisX.GridLineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
                .AxisY.GridLineProperties.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.Legend">
            <summary>
            Gets the Legend object that provides the chart's legend. The Legend property
            exists to provide access to the properties and methods of the underlying Legend object.
            </summary>
            <remarks>
            The legend includes text read from the 
            <see cref="P:GraphicsServer.GSNet.SeriesData.Series.SeriesName">Series.SeriesName</see> 
            property for each data series shown on the chart, along with a box or line showing the 
            color used to represent the series. You can arrange the list horizontally or vertically, 
            and you can lay it out in one or more columns. You can hide the legend by setting its 
            IsVisible property to False. See the Legend Class for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Legend"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Legend">Legend Class</seealso>
            <example>
            	<code lang="CS" title="Using the Legend property to access the Legend object">
            Chart cht = this.gsNetWinChart1.Chart;
             
            //Do NOT display the legend item text in 
            //the same color as the series it represents
            cht.Legend.AutoTextColor = false;
             
            //Display a box rather than an icon for each item
            cht.Legend.BoxMode = LegendBoxMode.BoxesOn;
                </code>
            	<code lang="VB" title="Using the Legend property to access the Legend object">
            With Me.GsNetWinChart1.Chart.Legend
                'Do NOT display the legend item text in
                'the same color as the series it represents
                .AutoTextColor = False
                'Display a box rather than an icon for each item
                .BoxMode = LegendBoxMode.BoxesOn
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.AnnotationList">
            <summary>Gets the AnnotationCollection object that maintains annotations on the chart. 
            The AnnotationList property exists to provide access to the methods of the underlying 
            AnnotationCollection object.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.AnnotationCollection"/></value>
            <remarks>
                An annotation is a text object that can be placed anywhere on the chart, and can be
                used to add axis titles, or subtitles, or simply to append information that
                clarifies some aspect of the chart. The AnnotationList property contains a
                collection of all the chart's annotations. 
                <para>To create a chart annotation, first allocate an Annotation object, then add
                it to the chart's annotation collection by calling the
                <see cref="M:GraphicsServer.GSNet.Charting.AnnotationCollection.Add(System.Object)">Add</see>
                method.</para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.AnnotationCollection">AnnotationCollection Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Annotation">Annotation Class</seealso>
            <example>
            	<code lang="CS" title="Adding an annotation to the chart">
            //Create an annotation
            Annotation ann = new Annotation();
            ann.Text = "What caused the spike in apple sales?";
            ann.Background.Color = Color.LightGoldenrodYellow; //Make it yellow, like a sticky note
            ann.Border.EdgeEffectType = EdgeEffectType.DropShadow;
            ann.Size = new Size(110, 85);
            ann.AutoSizeText = false; //Turn off autosizing when you want a specific font size
            ann.TextFormat.Font = new Font("Microsoft Sans Serif", 10);
            ann.TextFormat.VerticalAlignment = StringAlignment.Center;
             
            Chart cht = this.gsNetWinChart1.Chart;
             
            //Add the annotation to the chart
            cht.AnnotationList.Add(ann);
             
            //Position it relative to the grid
            cht.SetRelativeLocation(ann, cht.Grid, RelativeLocation.RightTop);
                </code>
            	<code lang="VB" title="Adding an annotation to the chart">
            'Create an annotation
            Dim ann As New Annotation
            With ann
                .Text = "What caused the spike in apple sales?"
                .Background.Color = Color.LightGoldenrodYellow 'Make it yellow, like a sticky note
                .Border.EdgeEffectType = EdgeEffectType.DropShadow
                .Size = New Size(110, 85)
                .AutoSizeText = False 'Turn off autosizing when you want a specific font size
                .TextFormat.Font = New Font("Microsoft Sans Serif", 10)
                .TextFormat.VerticalAlignment = StringAlignment.Center
            End With
             
            With Me.GsNetWinChart1.Chart
                'Add the annotation to the chart
                .AnnotationList.Add(ann)
                'Position it relative to the grid
                .SetRelativeLocation(ann, .Grid, RelativeLocation.RightTop)
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.ChartEventsToEnable">
            <summary>
            Gets the ChartEventWrapper object that enables and disables Chart events. The
            ChartEventsToEnable property exists to provide access to the underlying
            ChartEventWrapper object.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.ChartEventWrapper"/></value>
            <remarks>
            The properties of the ChartEventWrapper object act as switches that enable and
            disable all events that the Chart object can fire. In addition to enabling an event,
            you must also delegate a handler for it. See the example below.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ChartEventWrapper">ChartEventWrapper</seealso>
            <example>
            	<code lang="CS" title="Setting up a mouse click marker event">
            Chart cht = this.gsNetWinChart1.Chart;
             
            //Set up mouse click marker events
            cht.Grid.IsSelectable = false; //We don't want clicking in the grid to select the grid
            cht.ChartEventsToEnable.EnableMarkerMouseClickEvent = true;
            this.gsNetWinChart1.MouseClickMarkerEvent += new GSNetWinChart.ChartMarkerEventHandler(this.gsNetWinChart1_MouseClickMarkerEvent);
             
            . . .
             
            private void gsNetWinChart1_MouseClickMarkerEvent(object sender, GraphicsServer.GSNet.Charting.MarkerMouseEventArgs e)
            {
                //Extract the value of the data point
                Series dataSeries = e.SeriesDrawing.GetSeries();
                double pointValue = dataSeries.GetValue(SeriesComponent.Y, e.DataPoint);
             
                //Show it
                MessageBox.Show(pointValue.ToString());
            }
                </code>
            	<code lang="VB" title="Setting up a mouse click marker event">
            'Set up mouse click marker chart events
            With Me.GsNetWinChart1.Chart
                .Grid.IsSelectable = False 'We don't want clicking in the grid to select the grid
                .ChartEventsToEnable.EnableMarkerMouseClickEvent = True
            End With
             
            AddHandler Me.GsNetWinChart1.MouseClickMarkerEvent, AddressOf Me.GsNetWinChart1_MouseClickMarkerEvent
             
            . . .
             
            Private Sub GsNetWinChart1_MouseClickMarkerEvent(ByVal sender As System.Object, ByVal e As GraphicsServer.GSNet.Charting.MarkerMouseEventArgs)
                'Extract the value of the data point
                 Dim dataSeries As Series = e.SeriesDrawing.GetSeries()
                 Dim pointValue As Double = dataSeries.GetValue(SeriesComponent.Y, e.DataPoint)
             
                 'Show it
                 MessageBox.Show(pointValue.ToString())
            End Sub
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.SeriesDrawingList">
            <summary>
            Gets the SeriesDrawingCollection object that contains the SeriesDrawing objects currently
            attached to the chart. This property exists to provide access to the properties and
            methods of the underlying SeriesDrawingCollection object.
            </summary>
            <remarks>
            In Graphics Server .NET, data are managed by the Series class and the drawing
            characteristics of data are managed by the SeriesDrawing class. When you add a 
            Series object to a chart by calling the AddSeries method, the system wraps the 
            Series object in the SeriesDrawing class, creating a new SeriesDrawing object.
            This new object is added to the SeriesDrawingCollection object held in the chart's 
            SeriesDrawingList property.
            <para>See the <see cref="T:GraphicsServer.GSNet.Charting.SeriesDrawingCollection">SeriesDrawingCollection</see> 
            and the <see cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing</see> classes 
            for more information.</para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.SeriesDrawingCollection"/></value>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.AddSeries(GraphicsServer.GSNet.SeriesData.Series)">AddSeries Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.GetSeriesDrawing(System.Int32)">GetSeriesDrawing Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.RemoveAllSeries">RemoveAllSeries Method</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawingCollection">SeriesDrawingCollection Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing Class</seealso>
            <example>
            	<code lang="CS" title="Using the SeriesDrawingList">
            //Display the name of each series in the list
            SeriesDrawingCollection list = this.gsNetWinChart1.Chart.SeriesDrawingList;
            for (int i = 0; i &lt; list.Count; i++)
            {
                MessageBox.Show(list.GetSeriesDrawing(i).SeriesName);
            }
                </code>
            	<code lang="VB" title="Using the SeriesDrawingList">
            'Display the name of each series in the list
            With Me.GsNetWinChart1.Chart.SeriesDrawingList
                Dim i As Integer
                For i = 0 To (.Count - 1)
                    MessageBox.Show(.GetSeriesDrawing(i).SeriesName)
                Next
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.ImageMapUrl">
            <summary>Sets and gets the URL to load when the chart is clicked on.</summary>
            <value>string</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.EnableWebHotSpots">EnableWebHotSpots Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.ImageMapUrl">SeriesDrawing.ImageMapUrl Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.TooltipText">
            <summary>
            Indicates the text to display in the popup tooltip.
            </summary>
            <value>string</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.EnableWebHotSpots">EnableWebHotSpots Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.ImageMapExtraString">
            <summary>
            Specifies an extra string to embed in the chart's image map entry.
            </summary>
            <value>string</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.SeriesDrawing.ImageMapExtraString">SeriesDrawing.ImageMapExtraString Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.EnableWebHotSpots">EnableWebHotSpots Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.EnableWebHotSpots">
            <summary>
            Specifies whether or not to enable hot spots for Web images. 
            </summary>
            <remarks>
            Features enabled include the ToolTipText and ImageMapUrl properties for all 
            visual elements as well as the ImageMapExtraString properties in the Chart 
            and SeriesDrawing objects.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.AutoSizeText">
            <summary>Toggles all element level AutoSizeText properties to either true or false.</summary>
            <value>bool</value>
            <remarks>
            The setting of this property is not persistent and has no real meaning by
            itself.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.RunTimeProperties">
            <summary>Gets the chart's PropertyPageEnabler object. This property exists to 
            provide access to the properties and methods of the underlying PropertyPageEnabler object.
            </summary>
            <remarks>
            The PropertyPageEnabler object contains settings that control the context menu items, starting property page, and
            which property pages to display at run time.  See the 
            <see cref="T:GraphicsServer.GSNet.Charting.PropertyPageEnabler">PropertyPageEnabler</see>
            class for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.PropertyPageEnabler"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.PropertyPageEnabler">PropertyPageEnabler Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.CustomDataList">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.CustomXLabelList">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.AutoInvalidate">
            <summary>
            Controls whether the chart recalculates its layout and redraws every time a
            property setting is modified.
            </summary>
            <value>bool</value>
            <remarks>
            The default is false, which means that modifying properties does not cause the
            chart to recalculate its layout and redraw.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.Size">
            <summary>Gets or sets the size of the displayed chart.</summary>
            <remarks>
            Set this property only when you are using the Chart object independently of
            the GSNetWinChart or GSNetWebChart control.
            <para>When you are using one of the controls, you should not modify the Size
            property of the Chart object directly. Instead, set the size property of the parent
            GSNetWinChart or GSNetWebChart object and let the Chart object inherit the
            change.</para>
            </remarks>
            <value>Size</value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWebChart">GSNetWebChart Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.SmoothingMode">
            <summary>
            Specifies whether smoothing (antialiasing) is applied to lines and curves
            on the chart. 
            </summary>
            <remarks>
            This property does not affect the smoothing mode for text elements. 
            For text smoothing, use the text element's 
            <see cref="P:GraphicsServer.GSNet.Charting.TextPainter.TextRenderingMode">TextRenderingMode</see>
            property.
            </remarks>
            <value><see cref="T:System.Drawing.Drawing2D.SmoothingMode"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.Chart.AnimatedGif">
            <summary>
            AnimatedGif allows one to add individual Images, or Bitmaps, to create an
            animation, or slideshow.
            </summary>
            <remarks>
            This requires that one assigns each frame of the animation themself.
            One can also define the speed of the animation.
            </remarks>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.ChartSelectionChangedEvent">
            <summary>
            Fires when the object selection within the chart changes.  
            </summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.ChartSelectionChangedHandler">ChartSelectionChangedHandler</see> 
            delegate for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.ChartSelectionChangedHandler">ChartSelectionChangedHandler Delegate</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.ChartReadTemplateEvent">
            <summary>
            Fires after a chart template has been read in and applied by the Chart class.  
            </summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.ChartReadTemplateEventHandler">ChartReadTemplateEventHandler</see> 
            delegate for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.ChartReadTemplateEventHandler">ChartReadTemplateEventHandler Delegate</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.ChartChangedEvent">
            <summary>
            Fires as various properties within the chart are changed.  
            </summary>
            <remarks>This event is used extensively in the <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart</see> 
            control, which hooks into the event and forces a redraw when properties change. 
            See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.ChartChangedEventHandler">ChartChangedEventHandler</see> delegate
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.ChartChangedEventHandler">ChartChangedEventHandler Delegate</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.MouseClickChartEvent">
            <summary>
            Fires when a mouse click occurs in the chart area.  
            </summary>
            <remarks>See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMouseEventHandler">ChartMouseEventHandler</see>
            delegate for more information.
            <para>
            The <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart</see> control wraps this event 
            and fires its own <see cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseClickChartEvent">MouseClickChartEvent</see>
            event.  When using the GSNetWinChart control, hook into its event instead of the one in the Chart class.
            </para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMouseEventHandler">ChartMouseEventHandler Delegate</seealso>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseClickChartEvent">GSNetWinChart.MouseClickChartEvent</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.MouseMoveChartEvent">
            <summary>
            Fires when a mouse moves in the chart area.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMouseEventHandler">ChartMouseEventHandler</see>
            delegate for more information.
            <para>
            The <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart</see> control wraps 
            this event and fires its own <see cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseMoveChartEvent">MouseMoveChartEvent</see>
            event.  When using the GSNetWinChart control hook, into its event instead of the one in the Chart class.
            </para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMouseEventHandler">ChartMouseEventHandler Delegate</seealso>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseMoveChartEvent">GSNetWinChart.MouseMoveChartEvent</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.MouseHoverChartEvent">
            <summary>
            Fires when a mouse hovers over the chart area.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMouseEventHandler">ChartMouseEventHandler</see>
            delegate for more information.
            <para>
            The <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart</see> control wraps 
            this event and fires its own <see cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverChartEvent">MouseHoverChartEvent</see>
            event.  When using the GSNetWinChart control, hook into its event instead of the one in the Chart class.
            </para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMouseEventHandler">ChartMouseEventHandler Delegate</seealso>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverChartEvent">GSNetWinChart.MouseHoverChartEvent</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.MouseWheelChartEvent">
            <summary>
            Fires when a mouse wheel event occurs in the chart area.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMouseEventHandler">ChartMouseEventHandler</see>
            delegate for more information.
            <para>
            The <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart</see> control wraps 
            this event and fires it via its own <see cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseWheelChartEvent">MouseWheelChartEvent</see>
            event. When using the GSNetWinChart control hook into its event instead of the one in the Chart class.
            </para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMouseEventHandler">ChartMouseEventHandler Delegate</seealso>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseWheelChartEvent">GSNetWinChart.MouseWheelChartEvent</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.MouseClickMarkerEvent">
            <summary>
            Fires when a mouse click occurs on a marker.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMarkerEventHandler">ChartMarkerEventHandler</see>
            delegate for more information.
            <para>
            The <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart</see> control wraps 
            this event and fires its own <see cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseClickMarkerEvent">MouseClickMarkerEvent</see>
            event.  When using the GSNetWinChart control, hook into its event instead of the one in the Chart class.
            </para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMarkerEventHandler">ChartMarkerEventHandler Delegate</seealso>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseClickMarkerEvent">GSNetWinChart.MouseClickMarkerEvent</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.MouseMoveMarkerEvent">
            <summary>
            Fires when a mouse move occurs within a marker.
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMarkerEventHandler">ChartMarkerEventHandler</see> 
            delegate for more information.
            <para>
            The <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart</see> control wraps 
            this event and fires its own <see cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseMoveMarkerEvent">MouseMoveMarkerEvent</see>
            event. When using the GSNetWinChart control, hook into its event instead of the one in the Chart class.
            </para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMarkerEventHandler">ChartMarkerEventHandler Delegate</seealso>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseMoveMarkerEvent">GSNetWinChart.MouseMoveMarkerEvent</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.MouseHoverMarkerEvent">
            <summary>
            Fires when a mouse hover occurs within a marker.  
            </summary>
            <remarks>
            <para>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMarkerEventHandler">ChartMarkerEventHandler</see> 
            delegate for more information.
            The <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart</see> control wraps 
            this event and fires its own <see cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverMarkerEvent">MouseHoverMarkerEvent</see>
            event.  When using the GSNetWinChart control, hook into its event instead of the one in the Chart class.
            </para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMarkerEventHandler">ChartMarkerEventHandler Delegate</seealso>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverMarkerEvent">GSNetWinChart.MouseHoverMarkerEvent</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.MouseWheelMarkerEvent">
            <summary>
            Fires when a mouse wheel event occurs within a marker.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMarkerEventHandler">ChartMarkerEventHandler</see>
            delegate for more information.
            <para>
            The <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart</see> control wraps 
            this event and fires its own <see cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseWheelMarkerEvent">MouseWheelMarkerEvent</see>
            event.  When using the GSNetWinChart control, hook into its event instead of the one in the Chart class.
            </para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.ChartMarkerEventHandler">ChartMarkerEventHandler Delegate</seealso>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseWheelMarkerEvent">GSNetWinChart.MouseWheelMarkerEvent</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.OnPostPaintEvent">
            <summary>
            Fires after the chart finishes painting.  
            </summary>
            <remarks>Use this event to do custom painting on top of the chart. 
            See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.PostPaintEventHandler">PostPaintEventHandler</see>
            delegate for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.PostPaintEventHandler">PostPaintEventHandler Delegate</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.Chart.OnPrePaintEvent">
            <summary>
            Fires before the chart paints.
            </summary>
            <remarks>Use this event to do custom painting before the chart does any painting. 
            See the <see cref="T:GraphicsServer.GSNet.Charting.Chart.PrePaintEventHandler">PrePaintEventHandler</see>
            delegate for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart.PrePaintEventHandler">PrePaintEventHandler Delegate</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Chart.ChartChangedEventHandler">
            <summary>
            Handles the chart changed event.
            </summary>
            <remarks>
            Note that the <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart</see> control 
            handles this event so it should not be handled unless the Chart
            class is being used independent of the Windows form control.  See 
            <see cref="T:GraphicsServer.GSNet.Charting.ChartChangedEventArgs">ChartChangedEventArgs</see> 
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart">GSNetWinChart Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ChartChangedEventArgs">ChartChangedEventArgs Class</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Chart.ChartMouseEventHandler">
            <summary>
            Handles the various chart mouse events.  
            </summary>
            <remarks>
            See <see cref="T:GraphicsServer.GSNet.Charting.ChartMouseEventArgs">ChartMouseEventArgs</see> 
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ChartMouseEventArgs">ChartMouseEventArgs Class</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Chart.ChartReadTemplateEventHandler">
            <summary>
            Handles the ChartReadTemplateEvent, which fires when the chart reads a template
            via the ReadTemplate method.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Charting.Chart.ReadTemplate(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)">ReadTemplate Method</seealso>
            <seealso cref="F:GraphicsServer.GSNet.Charting.Chart.ChartReadTemplateEvent">ChartReadTemplateEvent</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Chart.ChartMarkerEventHandler">
            <summary>
            Handles the various marker mouse events.   
            </summary>
            <remarks>
            See <see cref="T:GraphicsServer.GSNet.Charting.ChartChangedEventArgs">ChartChangedEventArgs</see> 
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ChartChangedEventArgs">ChartChangedEventArgs Class</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Chart.ChartSelectionChangedHandler">
            <summary>
            Handles the selecting and unselecting of visual chart objects within the chart.
            </summary>
            <remarks>
            Note that when the selection changes from one object to another object, 
            this event is sent twice. The first time indicates which object
            is being unselected (sender is object being unselected), and the second time 
            indicates the object being selected (sender is the object being selected). 
            The <see cref="T:GraphicsServer.GSNet.Charting.ChartSelectionChangedEventArgs">ChartSelectionChangedEventArgs</see> 
            will have data indicating whether the sender is being selected or unselected.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ChartSelectionChangedEventArgs">ChartSelectionChangedEventArgs Class</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Chart.PostPaintEventHandler">
            <summary>
            Handles the OnPostPaintEvent.
            </summary>
            <remarks>
            The PaintEventArgs contain a Graphics object that can be used to paint on top of
            the chart. 
            <para>
            If you want to paint before the chart does any painting, hook into the 
            <see cref="F:GraphicsServer.GSNet.Charting.Chart.OnPrePaintEvent">OnPrePaintEvent</see>.
            </para>  
            </remarks>
            <seealso cref="F:GraphicsServer.GSNet.Charting.Chart.OnPostPaintEvent">OnPostPaintEvent</seealso>
            <seealso cref="F:GraphicsServer.GSNet.Charting.Chart.OnPrePaintEvent">OnPrePaintEvent</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.Chart.PrePaintEventHandler">
            <summary>
            Handles the OnPrePaintEvent.
            </summary>
            <remarks>The OnPrePaintEvent fires after the chart's background is drawn
            and before the grid, legend, titles and annotations are drawn. Painting inside
            this event will therefore paint on top of the Chart's background.
            <para>
            If you want to paint after the chart does all its painting, hook into the 
            <see cref="F:GraphicsServer.GSNet.Charting.Chart.OnPostPaintEvent">OnPostPaintEvent</see>.
            </para>  
            </remarks>
            <seealso cref="F:GraphicsServer.GSNet.Charting.Chart.OnPrePaintEvent">OnPrePaintEvent</seealso>
            <seealso cref="F:GraphicsServer.GSNet.Charting.Chart.OnPostPaintEvent">OnPostPaintEvent</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartDesigners.LayoutDesigner">
            <summary>
            This property pops up the Chart Layout Designer form.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartDesigners.StyleDesigner">
            <summary>
            This property pops up the Chart Style Designer form.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartDesigners.ChartDesigner">
            <summary>
            This property pops up the Chart Designer form.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartDesigners.ChartTemplateSelector">
            <summary>
            This property pops up the Chart Designer form.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.EventType">
            <summary>
            Identifies the type of mouse event. This enumeration is used in the event data 
            structures that are returned when a mouse event happens.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.EventType.None">
            <summary>
            No event
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.EventType.MouseClick">
            <summary>
            Mouse click
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.EventType.MouseMove">
            <summary>
            Mouse move
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.EventType.MouseHover">
            <summary>Mouse hover</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.EventType.MouseWheel">
            <summary>Mouse wheel</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ButtonState">
            <summary>
            Indicates the state of the mouse button when an event occurs.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ButtonState.None">
            <summary>
            No state
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ButtonState.Up">
            <summary>
            Mouse button up
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ButtonState.Down">
            <summary>
            Mouse button down
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ChartSelectionChangedEventArgs">
            <summary>
            The ChartSelectionChangedEventArgs object is passed back when a Chart 
            object's selection state has changed.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ChartSelectionChangedEventArgs.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ChartSelectionChangedEventArgs.ToString">
            <summary>
            Converts the ChartChangedEventArgs to string format.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartSelectionChangedEventArgs.Selected">
            <summary>
            If this value is true, the object is selected.  If
            false, the object is unselected.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ChartChangedEventArgs">
            <summary>
            The ChartChangedEvent object is passed back when a chart property changes.
            This class contains properties with information about the event.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ChartChangedEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ChartChangedEventArgs.ToString">
            <summary>
            Converts the ChartChangedEventArgs to string format.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartChangedEventArgs.Invalidate">
            <summary>
            Whether to invalidate or not.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartChangedEventArgs.InvalidateRect">
            <summary>
            The rectangle to invalidate.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.EventAxisValues">
            <summary>
            Provides information about chart axes when a chart or marker mouse 
            event occurs.
            </summary>
            <remarks>
            The EventAxisValues class is implemented as a property in the
            <see cref="T:GraphicsServer.GSNet.Charting.BaseMouseEventArgs"/> class.  When
            a chart or marker mouse event occurs, the properties in this class are
            filled in with values for the corresponding axis systems that are active
            in the chart.  Note that these values are not screen coordinates but actual
            axis system values.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.BaseMouseEventArgs">BaseMouseEventArgs Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.EventAxisValues.ToString">
            <summary>
            Converts the EventAxisValues to string format.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.EventAxisValues.XValue">
            <summary>
            X axis value based on current position of the mouse.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.EventAxisValues.YValue">
            <summary>
            Y axis value based on current position of the mouse.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.EventAxisValues.ZValue">
            <summary>
            Z axis value based on current position of the mouse.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.EventAxisValues.RadValue">
            <summary>
            Radius axis value based on current position of the mouse.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.EventAxisValues.AngValue">
            <summary>
            Angular axis value based on current position of the mouse.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.BaseMouseEventArgs">
            <summary>
            The base class from which other mouse event structures are derived.
            This class contains properties with information about the event.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BaseMouseEventArgs.EventType">
            <summary>
            The type of mouse event.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.EventType">EventType Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BaseMouseEventArgs.ChartPoint">
            <summary>
            The point of the cursor in chart coordinates.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BaseMouseEventArgs.GridPoint">
            <summary>
            The point of the cursor in grid coordinates.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BaseMouseEventArgs.AxisValues">
            <summary>
            This object contains the values on the axis corresponding to the location of the mouse.
            See <see cref="T:GraphicsServer.GSNet.Charting.EventAxisValues"/>.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.EventAxisValues">EventAxisValues Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BaseMouseEventArgs.MouseButtons">
            <summary>
            Indicates which button of the mouse was pressed.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BaseMouseEventArgs.ButtonClicks">
            <summary>
            The number of mouse button clicks.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BaseMouseEventArgs.WheelDetents">
            <summary>
            The number of detents in which the mouse wheel moved.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.BaseMouseEventArgs.ButtonState">
            <summary>
            The state of the mouse button.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ButtonState">ButtonState Enumeration</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ChartMouseEventArgs">
            <summary>
            The ChartMouseEventArgs object is passed back when a chart mouse event occurs.
            This class contains properties with information about the event.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.ChartMouseEventArgs.ToString">
            <summary>
            Converts the ChartMouseEventArgs to string format.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartMouseEventArgs.Sender">
            <summary>
            The object that handled the event.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartMouseEventArgs.SenderType">
            <summary>
            The sender's type.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.MarkerMouseEventArgs">
            <summary>
            The MarkerMouseEventArgs object is passed back when a mouse marker event occurs.
            This class contains properties with information about the event.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerMouseEventArgs.ChartSymbolPoint">
            <summary>
            The point, in chart coordinates, of the symbol for the marker that was hit.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerMouseEventArgs.GridSymbolPoint">
            <summary>
            The point, in grid coordinates, of the symbol for the marker that was hit.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerMouseEventArgs.DataPoint">
            <summary>
            The data point represented by the marker that was hit.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.MarkerMouseEventArgs.SeriesDrawing">
            <summary>The SeriesDrawing object with which the hit marker is associated.</summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.SeriesDrawing">SeriesDrawing Class</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ChartEventWrapper">
            <summary>
            This is a helper class that simply wraps the
            boolean switches that turn chart events on and off.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartEventWrapper.EnableChartMouseClickEvent">
            <summary>
            Gets and sets a value that enables or disables mouse click events in the chart.
            </summary>
            <value>boolean</value>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseClickChartEvent">MouseClickChartEvent</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartEventWrapper.EnableChartMouseMoveEvent">
            <summary>
            Gets and sets a value that enables or disables mouse move events in the chart.
            </summary>
            <value>boolean</value>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseMoveChartEvent">MouseMoveChartEvent</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartEventWrapper.EnableChartMouseHoverEvent">
            <summary>
            Gets or sets a value that enables or disables mouse hover events in the chart.
            </summary>
            <remarks>
            Note that the MouseHover event only fires once by default. To continually fire the MouseHover event
            set <see cref="P:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverReFire"/> to true.
            </remarks>
            <value>boolean</value>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverChartEvent">MouseHoverChartEvent</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverReFire">MouseHoverReFire</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartEventWrapper.EnableChartMouseWheelEvent">
            <summary>
            Gets and sets a value that enables or disables mouse wheel events in the chart.
            </summary>
            <value>boolean</value>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseWheelChartEvent">MouseWheelChartEvent</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartEventWrapper.EnableMarkerMouseClickEvent">
            <summary>
            Gets and sets a value that enables or disables mouse click events for data markers in the grid.
            </summary>
            <value>boolean</value>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseClickMarkerEvent">MouseClickMarkerEvent</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartEventWrapper.EnableMarkerMouseMoveEvent">
            <summary>
            Gets and sets a value that enables or disables mouse move events for data markers in the grid.
            </summary>
            <value>boolean</value>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseMoveMarkerEvent">MouseMoveMarkerEvent</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartEventWrapper.EnableMarkerMouseHoverEvent">
            <summary>
            Indicates if we should process Mouse Hover events for markers in the grid.
            </summary>
            <remarks>
            Note that the MouseHover event only fires once by default. To continually fire the MouseHover event
            set <see cref="P:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverReFire"/> to true.
            </remarks>
            <value>boolean</value>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverMarkerEvent">MouseHoverMarkerEvent</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverReFire">MouseHoverReFire</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.ChartEventWrapper.EnableMarkerMouseWheelEvent">
            <summary>
            Gets and sets a value that enables or disables mouse wheel events for markers in the grid.
            </summary>
            <value>boolean</value>
            <seealso cref="F:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseWheelMarkerEvent">MouseWheelMarkerEvent</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.DateTimeExt">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            The DateTimeExt class is used in the Axis objects to help define min
            and max user-defined values for an axis in AxisMode.Date.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.DateTimeExt.ShouldSerializeDate">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.DateTimeExt.ResetDate">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.DateTimeExt.ShouldSerializeTime">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.DateTimeExt.ResetTime">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.DateTimeExt.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.DateTimeExt.Date">
            <value>DataTime</value>
            <remarks>Use the Time property to specify a time.</remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.DateTimeExt.Time">Time Property</seealso>
            <summary>Sets and gets a date.</summary>
            <example>
                The following code fragment sets the min and max values for an axis in date
                mode.
                <code lang="CS" title="C# Example">
            // Min = 00:00 on 17 Sep 2004
            this.gsNetWinChart1.Chart.Grid.AxisX.DateMinAxisValueUser.Date = new DateTime(2004, 9, 17, 0, 0, 0, 0);
            // Max = 15:00 on 17 Sep 2004
            this.gsNetWinChart1.Chart.Grid.AxisX.DateMaxAxisValueUser.Date = new DateTime(2004, 9, 17, 15, 0, 0, 0);
            </code>
            	<code lang="VB" title="VB Example">
            ' Min = 00:00 on 17 Sep 2004
            Me.GsNetWinChart1.Chart.Grid.AxisX.DateMinAxisValueUser.Date = New DateTime(2004, 9, 17, 0, 0, 0, 0)
            ' Max = 15:00 on 17 Sep 2004
            Me.GsNetWinChart1.Chart.Grid.AxisX.DateMaxAxisValueUser.Date = New DateTime(2004, 9, 17, 15, 0, 0, 0)
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.DateTimeExt.Time">
            <summary>Sets and gets a time.</summary>
            <value>TimeSpan</value>
            <remarks>This property is the time portion of the date.</remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.DateTimeExt.Date">Date Property</seealso>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GridTitlesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.GSAnchorStyles">
            <summary>
                Supports anchoring in Graphics Server .NET. 
            </summary>
            <remarks>
                This enumeration includes the same anchor styles as the .Net AnchorStyles
                enumeration, and the behavior of anchoring in Graphics Server .NET is identical to
                the behavior of anchoring in standard .Net forms. 
                <para>The GSAnchorStyles enumeration was created due to a documented .Net framework
                problem (Knowledge Base Article - 825082) when using bitmask type enumerations
                declared with the FlagsAttribute. The GSAnchorStyles enumeration, therefore, has a
                single value for all combinations of left, right, top and bottom.</para>
            	<para>Note, however, that anchor values can still be set by OR-ing the primitive
                values together. For example:</para>
            	<pre>
            Chart.Grid.Anchor = GSAnchorStyles.Left | GSAnchorStyles.Right;
            	</pre>
            </remarks>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.None">
            <summary>
            Object is not anchored.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.Left">
            <summary>
            Object is anchored to left side of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.Top">
            <summary>
            Object is anchored to top of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.Bottom">
            <summary>
            Object is anchored to bottom of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.Right">
            <summary>
            Object is anchored to right side of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.TopLeft">
            <summary>Object is anchored to top and left of chart.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.TopBottom">
            <summary>
            Object is anchored to to top and bottom of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.LeftRight">
            <summary>
            Object is anchored to right and left sides of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.BottomRight">
            <summary>
            Object is anchored to right and bottom of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.TopRight">
            <summary>
            Object is anchored to right and top of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.BottomLeft">
            <summary>
            Object is anchored to left and bottom of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.BottomLeftTop">
            <summary>
            Object is anchored to left, bottom and top of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.LeftTopRight">
            <summary>
            Object is anchored to left, top and right of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.BottomTopRight">
            <summary>
            Object is anchored to bottom, top and right of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.BottomLeftRight">
            <summary>
            Object is anchored to bottom, left and right of chart.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.GSAnchorStyles.BottomLeftTopRight">
            <summary>
            Object is anchored to left, bottom, top and right of chart.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.GSMath">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSMath.DistanceBetweenPoints(System.Drawing.PointF,System.Drawing.PointF)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyEventArgs.Invalidate">
            <summary>
            Controls whether the object is invalidated.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.PropertyPageEnabler">
            <summary>
            This is a helper class that simply wraps the boolean switches that turn  
            elements of the built-in user interface on and off.  This class is exposed 
            as the <see cref="P:GraphicsServer.GSNet.Charting.Chart.RunTimeProperties"/>
            property in the Chart object.
            </summary>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.RunTimeProperties">RunTimeProperties Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.PropertyPageEnabler.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyPageEnabler.ContextMenuItems">
            <summary>
            Specifies which context menu items to use at run time.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.ContextMenuItem"/> enumeration 
            for more information.
            <para>Note that the chart's ContextMenu property must be set to blank or None 
            to enable these ContextMenuItems.</para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ContextMenuItem">ContextMenuItem Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyPageEnabler.StartingPropertyPage">
            <summary>
            Specifies the page to display initially when the property pages are invoked.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.PropertyPage">PropertyPage Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyPageEnabler.DisplayAboutPage">
            <summary>
            Enables or disables the About page at run time.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyPageEnabler.DisplayAnnotationPage">
            <summary>
            Enables or disables the Annotation page at run time.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyPageEnabler.DisplayAxisPage">
            <summary>
            Enables or disables the Axis page at run time.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyPageEnabler.DisplayGalleryPage">
            <summary>
            Enables or disables the Gallery page at run time.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyPageEnabler.DisplayLegendPage">
            <summary>
            Enables or disables the Legend page at run time.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyPageEnabler.DisplayQuickLayoutPage">
            <summary>
            Enables or disables the Quick Layout page at run time.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyPageEnabler.DisplaySeriesPage">
            <summary>
            Enables or disables the Series page at run time.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyPageEnabler.DisplayTitlePage">
            <summary>
            Enables or disables the Title page at run time.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyPageEnabler.DisplaySystemPage">
            <summary>
            Enables or disables the System page at run time.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.PropertyPageEnabler.Display3DPage">
            <summary>
            Enables or disables the 3D page at run time.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ContextMenuItem">
            <summary>
            This enumeration allows the user to specify the context menu items to use at run time.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ContextMenuItem.None">
            <summary>
            No context menu items.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ContextMenuItem.PropertyWindow">
            <summary>
            Only the Property Window context menu item.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ContextMenuItem.PropertyPages">
            <summary>
            Only the Property Pages context menu item.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ContextMenuItem.Both">
            <summary>
            Both the Property Window and the Property Pages context menu items. 
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ContextMenuItem.AlternateContextMenu">
            <summary>
            Use the context menu defined by the <see cref="P:GraphicsServer.GSNet.Charting.GSNetWinChart.AlternateContextMenu"/> property.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ContextMenuItem.EnableFormContextMenu">
            <summary>
            Use the context menu for the form that contains GsNetWinChart.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.PropertyPage">
            <summary>
            This enumeration allows the user to specify the initially selected page in the property sheet.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PropertyPage.About">
            <summary>
            About property page
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PropertyPage.Annotation">
            <summary>
            Annotation property page
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PropertyPage.Axis">
            <summary>
            The Axis property page
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PropertyPage.Gallery">
            <summary>
            Gallery property page
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PropertyPage.Legend">
            <summary>
            Legend property page
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PropertyPage.QuickLayout">
            <summary>
            QuickLayout property page
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PropertyPage.Series">
            <summary>
            Series property page
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PropertyPage.System">
            <summary>
            System property page
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PropertyPage.Title">
            <summary>
            Title property page
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.PropertyPage.ThreeD">
            <summary>
            ThreeD property page
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.QuickLayoutData">
            <summary>
            Quick layouts are an easy way to quickly arrange the various charting
            objects via percentages.  The QuickLayoutData class provides full control
            over the various charting object location and sizes (as opposed to the
            <see cref="T:GraphicsServer.GSNet.Charting.QuickLayoutType"/> which provides precanned arrangements.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.QuickLayoutData.ReadProperties(System.Xml.XmlNode)">
            <summary>
            The ReadProperties method can be used to read QuickLayoutData properties from
            an XmlNode.  
            </summary>
            <param name="node">XmlNode that contains the properties of the object.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.QuickLayoutData.WriteProperties(System.Xml.XmlDocument,System.String)">
            <summary>
            The WriteProperties method can be used to QuickLayoutData object properties to
            an XmlElement.  Note that all properties are written whether they are default
            or not.
            </summary>
            <param name="doc">This paramenter is the XmlDocument context used to create the new element node.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
            <returns>This method will return an XmlElement containing the properties.</returns>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.GridAnchor">
            <summary>
            Anchor style to be applied to the Grid.
            </summary>
            <value>System.Windows.Forms.AnchorStyles</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.TitleAnchor">
            <summary>
            Anchor style to be applied to the Chart Title.
            </summary>
            <value>System.Windows.Forms.AnchorStyles</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.LegendAnchor">
            <summary>
            Anchor style to be applied to the legend.
            </summary>
            <value>System.Windows.Forms.AnchorStyles</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.TitleX">
            <summary>
            Relative x location of the chart title expressed as a percentage from the
            left side of the chart (e.g.  0.50 is 50 percent).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.TitleY">
            <summary>
            Relative y location of the chart title expressed as a percentage from the
            top of the chart (e.g.  0.50 is 50 percent).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.TitleWidth">
            <summary>
            Relative width of the chart title expressed as a percentage
            of the chart width (e.g.  0.50 is 50 percent).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.TitleHeight">
            <summary>
            Relative height of the chart title expressed as a percentage
            of the chart height (e.g.  0.50 is 50 percent).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.LegendX">
            <summary>
            Relative x location of the chart Legend expressed as a percentage from the
            left side of the chart (e.g.  0.50 is 50 percent).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.LegendY">
            <summary>
            Relative y location of the chart Legend expressed as a percentage from the
            top of the chart (e.g.  0.50 is 50 percent).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.LegendWidth">
            <summary>
            Relative width of the chart Legend expressed as a percentage
            of the chart width (e.g.  0.50 is 50 percent).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.LegendHeight">
            <summary>
            Relative height of the chart Legend expressed as a percentage
            of the chart height (e.g.  0.50 is 50 percent).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.GridX">
            <summary>
            Relative x location of the chart Grid expressed as a percentage from the
            left side of the chart (e.g.  0.50 is 50 percent).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.GridY">
            <summary>
            Relative y location of the chart Grid expressed as a percentage from the
            top of the chart (e.g.  0.50 is 50 percent).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.GridWidth">
            <summary>
            Relative width of the chart Grid expressed as a percentage
            of the chart width (e.g.  0.50 is 50 percent).
            </summary>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.QuickLayoutData.GridHeight">
            <summary>
            Relative height of the chart Grid expressed as a percentage
            of the chart height (e.g.  0.50 is 50 percent).
            </summary>
            <value>float</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.QuickLayoutType">
            <summary>
            These are all the valid chart quick layout types in the system. 
            Quick layouts allow the user to specify predefined arrangements for the grid, title and legend.
            For more control over the sizes and locations of these object see the
            <see cref="T:GraphicsServer.GSNet.Charting.QuickLayoutData"/> class.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.QuickLayoutType.None">
            <summary>
            Makes no changes to current layout
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.QuickLayoutType.LayoutGridLeftTitleTopLegendRight">
            <summary>
            Layout: Grid at Left, Title at Top, Legend at Right
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.QuickLayoutType.LayoutGridRightTitleTopLegendLeft">
            <summary>
            Layout: Grid at Right, Title at Top, Legend at Left
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.QuickLayoutType.LayoutGridLeftTitleBottomLegendRight">
            <summary>
            Layout: Grid at Left, Title at Bottom, Legend at Right
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.QuickLayoutType.LayoutGridRightTitleBottomLegendLeft">
            <summary>
            Layout: Grid at Right, Title at Bottom, Legend at Left
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.QuickLayoutType.LayoutGridMiddleTitleTopLegendBottom">
            <summary>
            Layout: Grid at Middle, Title at Top, Legend at Bottom
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.QuickLayoutType.LayoutGridMiddleTitleBottomLegendTop">
            <summary>
            Layout: Grid at Middle, Title at Bottom, Legend at Top
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.QuickLayoutType.LayoutGridBottomTitleTopLegendMiddle">
            <summary>
            Layout: Grid at Bottom, Title at Top, Legend at Middle
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.QuickLayoutType.LayoutGridBottomTitleMiddleLegendTop">
            <summary>
            Layout: Grid at Bottom, Title at Middle, Legend at Top
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.QuickLayoutType.LayoutGridTopTitleMiddleLegendBottom">
            <summary>
            Layout: Grid at Top, Title at Middle, Legend at Bottom
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.QuickLayoutType.LayoutGridTopTitleBottomLegendMiddle">
            <summary>
            Layout: Grid at Top, Title at Bottom, Legend at Middle
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.TemplateFlags">
            <summary>
            This object contains the flags that control how templates are applied and
            how they are created.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TemplateFlags.ReadProperties(System.Xml.XmlNode)">
            <summary>
            The ReadProperties method can be used to read TemplateFlag properties from
            an XmlNode.  
            </summary>
            <param name="node">XmlNode that contains the properties of the object.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TemplateFlags.WriteProperties(System.Xml.XmlDocument,System.String)">
            <summary>
            The WriteProperties method can be used to write TemplateFlag object properties to
            an XmlElement.  Note that all properties are written whether they are default
            or not.
            </summary>
            <param name="doc">This paramenter is the XmlDocument context used to create the new element node.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
            <returns>This method will return an XmlElement containing the properties.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.TemplateFlags.SetAllIgnoreFlags(System.Boolean)">
            <summary>
            This method will set all the ignore flags to the boolean passed in as a parameter.
            NOTE: This method will not touch the ReconcileAxisBeforeReadingProperties flag.
            </summary>
            <param name="setting">boolean to set all the ignore flags to</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.ReconcileAxisBeforeReadingProperties">
            <summary>
            This flag can be set to true if it appears that some axis properties
            read in from the XML do not stick.  There are some axis properties that are
            reconciled and assigned based on the current chart type (e.g. IsGapAligned,
            BarOverlap, AxisMode, and AxisScale to name a few).
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreDefaults">
            <summary>
            This flag is only used when saving properties to XML.  If this flag is
            set to true then any property that is still the default value will NOT
            be saved to XML.  Use this flag to reduce the size of the XML file.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreChartSize">
            <summary>
            When set to true this property will ignore the chart size property when
            reading or writing the data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreChartProperties">
            <summary>
            When set to true this property will ignore all the chart level properties when
            reading or writing the data from/to XML.  These properties do not include the
            chart level properties handled by the IgnoreChartSize and IgnoreChartType flags.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreChartType">
            <summary>
            When set to true this property will ignore the chart type property when
            reading or writing the data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreSeriesDefaults">
            <summary>
            When set to true this property will ignore the chart series defaults property when
            reading or writing the data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreGrid">
            <summary>
            When set to true this property will ignore all the grid properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreGridSize">
            <summary>
            When set to true this property will ignore the size property of the
            grid when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreGridLocation">
            <summary>
            When set to true this property will ignore the location property of the
            grid when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreCage">
            <summary>
            When set to true this property will ignore the cage properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreXAxis">
            <summary>
            When set to true this property will ignore the X Axis properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreYAxis">
            <summary>
            When set to true this property will ignore the Y Axis properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreXPrimeAxis">
            <summary>
            When set to true this property will ignore the XPrime Axis properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreYPrimeAxis">
            <summary>
            When set to true this property will ignore the YPrime Axis properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.Ignore3DXAxis">
            <summary>
            When set to true this property will ignore the 3D X Axis properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.Ignore3DYAxis">
            <summary>
            When set to true this property will ignore the 3D Y Axis properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.Ignore3DZAxis">
            <summary>
            When set to true this property will ignore the 3D Z Axis properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnorePieAxis">
            <summary>
            When set to true this property will ignore the Pie Axis properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreAngularAxis">
            <summary>
            When set to true this property will ignore the Angular Axis properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreRadialAxis">
            <summary>
            When set to true this property will ignore the Radial Axis properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreRadarAxis">
            <summary>
            When set to true this property will ignore the Radar Axis properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreFunnelAxis">
            <summary>
            When set to true this property will ignore the Funnel Axis properties 
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreLegend">
            <summary>
            When set to true this property will ignore the legend properties
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreLegendSize">
            <summary>
            When set to true this property will ignore the size property of the
            legend when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreLegendLocation">
            <summary>
            When set to true this property will ignore the location property of the
            legend when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreChartTitle">
            <summary>
            When set to true this property will ignore the legend properties
            when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreChartTitleSize">
            <summary>
            When set to true this property will ignore the size property of the
            chart title when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreChartTitleLocation">
            <summary>
            When set to true this property will ignore the location property of the
            chart title when reading and writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreAnnotations">
            <summary>
            When set to true this property will ignore all the annotations attached to the chart.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.ClearAnnotations">
            <summary>
            When set to true this property will clear the annotations in the pre-existing chart.
            <remarks>
            <para>
            When set to true the chart will only contain the annotations from the template. 
            If IgnoreAnnotations is also true then no annotations will appear in the chart
            after loading the template.
            </para>
            <para>
            When set to false the annotations in the pre-existing chart will remain after
            the template is loaded. If IgnoreAnnotations is also false then the additional 
            annotations from the template will be added to the chart.
            </para>
            <para>
            Note that the ClearAnnotations flag is ignored when saving a template.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreSeriesDrawingProperties">
            <summary>
            When this flag is set to true the will not be witten to or read from the
            XML data.  When this flag is false the properties for each SeriesDrawing
            object currently in the chart will be written out to the XML data.  Note
            that the actual series data will NOT be written out.
            
            When this flag is false and the process is reading properties in from the
            XML data the SeriesDrawing properties will be applied as follows:
            
            1.  The SeriesDrawing properties are read in sequentially in the same order
            they were written to the XML data.
            
            2.  The properties for the first SeriesDrawing object in the XML data will be applied to the
            first SeriesDrawing object in the chart if it exists.
            
            3.  The properties for the second SeriesDrawing object in the XML data will be applied to the
            second SeriesDrawing object in the chart if it exists.
            
            4.  And so on as long as there are SeriesDrawing objects in the XML data and there are
            SeriesDrawing objects in the chart.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreSeriesName">
            <summary>
            SeriesDrawing objects have a property called SeriesName.  When writing and reading
            properties back in, it may not be desirable to read in and overwrite a SeriesName
            in an exiting chart SeriesDrawing object.  The default for this flag is true such
            that these names will be ignored.  Set this flag to false if you wish to write out
            and read in the SeriesName property.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreTrends">
            <summary>
            Trends objects can be attached to SeriesDrawing objects.  Setting this property
            to false will cause the SeriesDrawing objects to write out and read in 
            trend object data.  Note that the IgnoreSeriesDrawingProperties must be false
            otherwise SeriesDrawing objects will not be able to read and write trend data.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreQuickLayout">
             <summary>
             When set to true this property will ignore the Quick Layout
             information when reading and writing data from/to XML.
             </summary>
             <remarks>
             Quick layout data consists of relative size and location data for the 
             Grid, the Legend and the Chart Title.  This data is much more useful
             within a template versus the absolute size and location data for each
             of these objects.  When this data is read back in the objects will be sized
             and positioned based on the current chart size and the relative data being read back in.
            </remarks>
             <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.TemplateFlags.IgnoreAnnotationLayout">
             <summary>
             When set to true this property will ignore the Annotation Layout
             information when reading and writing data from/to XML.
             </summary>
             <remarks>
             Annotation layout data consists of relative size and location data for the 
             existing annotations.  This data is much more useful
             within a template versus the absolute size and location data for each
             annotation.  When this data is read back in the annotations will be sized
             and positioned based on the current chart size and the relative data being read back in.
            </remarks>
             <value>bool</value>
        </member>
        <member name="T:GraphicsServer.GSNet.SeriesData.ArrayDataProvider">
            <summary>
            ArrayDataProvider will allow binding an Array to a 
            <see cref="T:GraphicsServer.GSNet.SeriesData.Series"/>.
            </summary>
            <example>
            <code lang="CS" title="C# Example">
            Chart chart = this.gsNetWinChart1.Chart;
            
            // create an array of data
            double [] dataArray = new double[] {15, 25, 8, 32, 9, 21, 29, 33, 11, 5};
            
            // use an ArrayDataProvider to bind data to series
            ArrayDataProvider prov = new ArrayDataProvider(dataArray);
            
            // bind to Y
            Series ser = new Series();
            ser.BindComponent(SeriesComponent.Y, prov, string.Empty);
            
            // remove old data from chart
            chart.RemoveAllSeries();
            // add new (array) series to chart
            chart.AddSeries(ser);
            
            // refresh chart
            chart.RecalcLayout();
            </code>
            <code lang="VB" title="VB Example">
            Dim chart As Chart = Me.GsNetWinChart1.Chart
            
            ' create an array of data
            Dim dataArray() As Double = {15.0, 25.0, 8.0, 32.0, 9.0, 21.0, 29.0, 33.0, 11.0, 5.0}
            
            ' use an ArrayDataProvider to bind data to series
            Dim prov As ArrayDataProvider = New ArrayDataProvider(dataArray)
            
            ' bind to Y
            Dim ser As Series = New Series
            ser.BindComponent(SeriesComponent.Y, prov, String.Empty)
            
            ' remove old data from chart
            chart.RemoveAllSeries()
            ' add new (array) series to chart
            chart.AddSeries(ser)
            
            ' refresh chart
            chart.RecalcLayout()
            </code>
            </example>
        </member>
        <member name="T:GraphicsServer.GSNet.SeriesData.IDataProvider">
            <summary>
            This is a required data provider interface.  At this time there are no
            specific methods or properties to implement in this interface.  The purpose
            of this interface is to generically pass around a data provider reference
            regardless of the specific data provider type.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.SeriesData.IConnection">
            <summary>
            This is a required data provider interface.  This interface contains methods
            and properties that allow the data provider to connect to the encapsulated 
            source of data.  Each specific data provider may implement the properties and 
            methods to suit that data provider's purpose.  See the documentation for
            the specific data provider to understand how to use these properties and methods.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.IConnection.OpenConnection">
            <summary>
            Opens the connection to the data source within the
            data provider.  If the connection cannot be opened a DPConnectionException will be thrown.
            </summary>
            <exception cref="T:GraphicsServer.GSNet.SeriesData.DPConnectionException"/>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.IConnection.CloseConnection">
            <summary>
            Closes the data provider connection.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.IConnection.RefreshConnection">
            <summary>
            Use this method once the connection has been opened via the OpenConnection
            command.  This method will refresh the connection based on any of the 
            connection properties that have been modified.
            </summary>
            <exception cref="T:GraphicsServer.GSNet.SeriesData.DPConnectionException"/>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.IConnection.IsConnected">
            <summary>
            Call this method to see if the data provider is currently connected to it source
            and ready to return data.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.IConnection.DoesFieldSourceExist(System.Object)">
            <summary>
            Use this method to query whether the specified field source exists in an opened
            data provider.
            </summary>
            <param name="fieldSource">This object represents a specific source of data in the data provider.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.IConnection.IsNumberType(System.Object)">
            <summary>
            Returns true if the specified field source supports number type data.
            </summary>
            <param name="fieldSource">This object represents a specific source of data in the data provider.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.IConnection.ConnectionString">
            <summary>
            This property contains the connection string utilized by the data
            provider to successfully connect to a data source.  The general 
            thought is that all data providers will require a connection string
            in order to find the data source.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.IConnection.SelectString">
            <summary>
            This property contains the selection string utilized by a data source.
            This property may not be required by all data provides.  Database related
            data providers most likely require an SQL SELECT...FROM...WHERE type
            of clause.  A data provider accessing text files may not require
            this a select string.  See the specific data provider for full 
            requirements concerning use of this string and formatting issues.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.SeriesData.IDataRetrieve">
            <summary>
            This is a required data provider interface.  Implement this data provider interface to support the ability to retrieve
            data from the data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.IDataRetrieve.DataPointCount(System.Object)">
            <summary>
            Number of data points for the specified field source.  Note that
            for database related data providers the number of data points is typically the same
            for all field sources (i.e. the number of records in the database).
            </summary>
            <param name="fieldSource">This object represents a specific source of data in the data provider.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.IDataRetrieve.FindMinMaxValues(System.Object,System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            This method will walk all the values in the specified field source and return the
            minimum and maximum values for the datapoints that fall within the startDataPoint
            and endDataPoint range inclusively.  Note that all data points are specified as
            a 0-based index.
            
            If either startDataPoint or endDataPoint is less than zero then this method will find
            the min and max values across all the datapoints in the data provider.
            
            </summary>
            <param name="fieldSource">This object represents a specific source of data in the data provider.</param>
            <param name="startDataPoint">The first data point of the range.</param>
            <param name="endDataPoint">The last data point of the range.</param>
            <param name="minValue">The miniumn value in the field source is returned in this param.</param>
            <param name="maxValue">The maximumn value in the field source is returned in this param.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.IDataRetrieve.GetValue(System.Object,System.Int32)">
            <summary>
            This method returns a value for the specified field source at the specified data point.
            Note that the data is returned as a double.  Calling this method for a non number type
            of field source will return 0.  Calling this method for a data point that does not
            exist will also return a zero.  Note that the dataPoint is 0-based indexed.
            </summary>
            <param name="fieldSource">This object represents a specific source of data in the data provider.</param>
            <param name="dataPoint">The data point to return data for.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.IDataRetrieve.GetLabel(System.Object,System.Int32)">
            <summary>
            This method returns a value for the specified field source at the specified data point.
            Note that the data is returned as a string even if the field source contains numeric data.
            Calling this method for a data point that does not exist will return a null.  
            Note that the dataPoint is a 0-based index.
            </summary>
            <param name="fieldSource">This object represents a specific source of data in the data provider.</param>
            <param name="dataPoint">The data point to return data for.</param>
        </member>
        <member name="T:GraphicsServer.GSNet.SeriesData.IDataInsert">
            <summary>
            This is an optional data provider Interface.  Implement this interface if the data provider needs to support the ability
            to insert data into the data source.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.IDataInsert.SetValue(System.Object,System.Int32,System.Object)">
            <summary>
            Sets the specified value at the datapoint in the field source.  Note that since the value is an object it can be numeric or a string.
            Also note that the dataPoint is a 0-based index.
            </summary>
            <param name="fieldSource">This object represents a specific source of data in the data provider.</param>
            <param name="dataPoint">The data point to set data for.</param>
            <param name="newValue">The data to set in the data source.  Can be numeric or textual.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.#ctor(System.Array)">
            <summary>
            The ArrayDataProvider allows using Array's directly as
            chart data.
            </summary>
            <param name="array">A valid populated <see cref="T:System.Array"/></param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.#ctor">
            <summary>
            The ArrayDataProvider allows using Array's directly as
            chart data.
            </summary>
            <remarks>
            If calling the ArrayDataProvider constructor that has no parameters,
            then one must assign the ArrayDataProvider.DataArray property to a 
            valid populated array for the ArrayDataProvider to function properly.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.IsNumberType(System.Object)">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.IsNumericArray">
            <summary>
            Returns true if the DataArray property contains number type data.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.IsConnected">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.OpenConnection">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.DoesFieldSourceExist(System.Object)">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.CloseConnection">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.RefreshConnection">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.GetValue(System.Object,System.Int32)">
            <summary>
            Returns a value for the specified data point index.
            </summary>
            <param name="fieldSource">Pass String.Empty for the field source.</param>
            <param name="dataPoint">The 0-based index of the data point for which the method should return
            data.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.GetDataArrayValue(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.GetLabel(System.Object,System.Int32)">
            <summary>
            Returns a string if the data array is of type string.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.DataPointCount(System.Object)">
            <summary>
            This simply returns the number of elements in the DataArray.  The field source
            parameter is not used and can be passed a String.Empty.
            </summary>
            <param name="fieldSource">Pass String.Empty for the field source.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.FindMinMaxValues(System.Object,System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            This method will walk all the values in the DataArray and return the
            minimum and maximum values for the datapoints that fall within the startDataPoint
            and EndDataPoint range inclusively.  Note that data points are specified using
            a 0-based index.
            </summary>
            <remarks>
            If either startDataPoint or endDataPoint is less than zero, this method will find
            the min and max values across all the datapoints in the data provider.
            </remarks>
            <param name="fieldSource">Pass String.Empty for the field source.</param>
            <param name="startDataPoint">The first data point of the range.</param>
            <param name="endDataPoint">The last data point of the range.</param>
            <param name="minValue">The miniumn value in the field source is returned in this param.</param>
            <param name="maxValue">The maximumn value in the field source is returned in this param.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.SetValue(System.Object,System.Int32,System.Object)">
            <summary>
            This sets the data point value at a given index. The field source is not
            used and can be set to String.Empty.
            </summary>
            <param name="fieldSource">Pass String.Empty for the field source.</param>
            <param name="dataPoint">The 0-based index of the data point to assign data to.</param>
            <param name="newValue">The data value to assign.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.SetValue(System.Int32,System.Object)">
            <summary>
            This sets the data point value at a given index.
            </summary>
            <param name="dataPoint">The 0-based index of the data point to assign data to.</param>
            <param name="newValue">The data value to assign.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.SelectString">
            <summary>
            This property is not used by this provider.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.ConnectionString">
            <summary>
            This property is not used by this provider.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.DataArray">
            <summary>
            This array must be a <see cref="T:System.Double"/> data type,
            or another numeric data type, or a <see cref="T:System.DateTime"/> data 
            type, or a <see cref="T:System.String"/> data type, since these are the 
            data types recognized by Graphics Server .NET.
            </summary>
            <remarks>You can either assign the data array through this DataArray
            property or you can use the ArrayDataProvider's constructor.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.ArrayDataProvider.Item(System.Int32)">
            <summary>
            This <see cref="T:System.Double"/> indexer points to the same object as the DataArray property.
            This is useful if you want to access a data array element through an indexer.
            </summary>
            <remarks>
            This indexer is of type <see cref="T:System.Double"/>. So if you are assigning
            a value to a given element, the value must be of type System.Double. To convert,
            one can use <see cref="M:System.Convert.ToDouble(System.Object)"/>.
            </remarks>
        </member>
        <member name="T:GraphicsServer.GSNet.SeriesData.DPConnectionException">
            <summary>
            This exception is thrown when an attempt to connect to a data source
            fails.  A connect attempt may fail for various reasons.  The specified data
            source may not exist or the specified select string may be invalid.  The
            message in the exception should contain the reason for the failure.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.SeriesData.DataSetDataProvider">
            <summary>
            Supports a connection between a table from a dataset and the charting engine.
            </summary>
            <remarks>
                Note that a dataset object may contain more than one table. The data provider,
                however, can expose only one table at a time to the charting engine. Use the
                InitializeTable method to switch between tables. Once you switch to a different
                table, you must remove all the series that have been bound to the original table
                and create one or more new series to bind to the new table. 
                <para>To bind to more than one table at the same time within the dataset, simply
                create multiple DataSetDataProviders and place the same dataset into each data
                provider. Then initialize each data provider to a different table.</para>
            	<para>This data provider now supports writing data back into the dataset using the
                SetValue method.</para>
            </remarks>
            <example>
                The example below is a fragment from the master/detail application created in the
                walkthrough "Using the DataSet and DataView Data Providers." In the example, a
                dataset is populated with data from two tables in the Northwind database. One of
                these tables is selected by a dataset data provider, which is then bound to the Y
                component of a chart data series.
                <code lang="CS" title="C# Example">
            //Populate dataset with two tables
            this.dsSales1.Clear();
            this.daCategorySales.Fill(this.dsSales1); //table 0
            this.daProductSales.Fill(this.dsSales1);  //table 1
             
            this.chtMaster.Chart.ChartType = ChartType.Pie3D;
             
            //Send the dataset to a chart data provider
            DataSetDataProvider dp = new DataSetDataProvider(this.dsSales1);
             
            //Select the first table in the dataset
            dp.InitializeTable(0); 
             
            //Bind a field in the table to the Y component of a data series
            Series categories = new Series();
            categories.BindComponent(SeriesComponent.Y, dp, "CategorySales");
             
            //Remove any previously loaded series
            this.chtMaster.Chart.RemoveAllSeries();
             
            //Add the new data series to the chart
            int indexCategories = this.chtMaster.Chart.AddSeries(categories);
                </code>
            	<code lang="VB" title="VB Example">
            'Populate dataset with two tables
            Me.DsSales1.Clear()
            Me.daCategorySales.Fill(Me.DsSales1) 'table 0
            Me.daProductSales.Fill(Me.DsSales1)  'table 1
             
            Me.chtMaster.Chart.ChartType = ChartType.Pie3D
             
            'Send the dataset to a chart data provider
            Dim dp As DataSetDataProvider = New DataSetDataProvider(Me.DsSales1)
             
            'Select the first table in the dataset
            dp.InitializeTable(0)
             
            'Bind a field in the table to the Y component of a data series
            Dim categories As Series = New Series()
            categories.BindComponent(SeriesComponent.Y, dp, "CategorySales")
             
            'Remove any previously loaded series
            Me.chtMaster.Chart.RemoveAllSeries()
             
            'Add the new data series to the chart
            Dim indexCategories As Integer = Me.chtMaster.Chart.AddSeries(categories)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.#ctor(System.Data.DataSet)">
            <summary>
            Constructor
            </summary>
            <param name="ds">Pass in the fully configured and loaded DataSet.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.#ctor(System.Data.DataSet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ds">Pass in the fully configured and loaded DataSet.</param>
            <param name="tableName">Pass in the name of the table that will be accessed by this data provider.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.InitializeDataSet(System.Data.DataSet)">
            <summary>
            Use this method to set the dataset into the data provider.  After calling this
            method you must call InitializeTable() to specify which table in the dataset
            will be used to extract the data.
            </summary>
            <param name="ds">Pass in the full configured and loaded DataSet.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.InitializeTable(System.Int32)">
            <summary>
            Once the dataset has been passed into this data provider via the InitializeDataSet() 
            method the table within the dataset must be selected.  Pass in the zero based index
            of that table within the table collection.
            </summary>
            <param name="tableNumber">The zero-based index of the table to initialize in the data provider.</param>
            <exception cref="T:GraphicsServer.GSNet.SeriesData.DPConnectionException"/>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.InitializeTable(System.String)">
            <summary>
            Once the dataset has been passed into this data provider via the InitializeDataSet() 
            method the table within the dataset must be selected.  Pass in the name of that table 
            within the table collection.
            </summary>
            <param name="tableName">The name of the table to initialize in the data provider.</param>
            <exception cref="T:GraphicsServer.GSNet.SeriesData.DPConnectionException"/>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.OpenConnection">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.CloseConnection">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.RefreshConnection">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.IsConnected">
            <summary>
            This data provider is considered connected as long as a table
            object has been set.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.DoesFieldSourceExist(System.Object)">
            <summary>
            Use this method to query whether the specified field source exists in an opened
            data provider.
            </summary>
            <param name="fieldSource">The name of a OleDB data source field.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.DataPointCount(System.Object)">
            <summary>
            This simply returns the number of records in the database.  The field source
            parameter is not used and can be passed a null.
            </summary>
            <param name="fieldSource">The name of a OleDB data source field.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.IsNumberType(System.Object)">
            <summary>
            Returns true if the specified field source supports number type data.
            </summary>
            <param name="fieldSource">The name of a OleDB data source field.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.FindMinMaxValues(System.Object,System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            This method will walk all the values in the specified field source and return the
            minimum and maximum values for the datapoints that fall within the startDataPoint
            and EndDataPoint range inclusively.  Note that data points are specified using
            a 0-based index.
            </summary>
            <remarks>
            If either startDataPoint or endDataPoint is less than zero, this method will find
            the min and max values across all the datapoints in the data provider.
            </remarks>
            <param name="fieldSource">The name of a OleDB data source field.</param>
            <param name="startDataPoint">The first data point of the range.</param>
            <param name="endDataPoint">The last data point of the range.</param>
            <param name="minValue">The miniumn value in the field source is returned in this param.</param>
            <param name="maxValue">The maximumn value in the field source is returned in this param.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.GetValue(System.Object,System.Int32)">
            <summary>
            Returns a value for the specified field source at the specified data point.
            </summary>
            <remarks>
            Note that the data is returned as a double.  Calling this method for a non-numeric type
            of field source will return 0.  Calling this method for a data point that does not
            exist will also return 0.  
            </remarks>
            <param name="fieldSource">The name of a OleDB data source field.</param>
            <param name="dataPoint">The 0-based index of the data point for which the method should return
            data.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.GetLabel(System.Object,System.Int32)">
            <summary>
            Returns a value for the specified field source at the specified data point.
            </summary>
            <remarks>
            Note that the data is returned as a string even if the field source contains numeric data.
            Calling this method for a data point that does not exist will return a null.
            </remarks>
            <param name="fieldSource">The name of a OleDB data source field.</param>
            <param name="dataPoint">The 0-based index of the data point for which a label is requested.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.SetValue(System.Object,System.Int32,System.Object)">
            <summary>
            Sets the specified value for the specified datapoint.
            Note that because the value is an object it can be numeric or a string.
            </summary>
            <param name="fieldSource">he name of a OleDB data source field.</param>
            <param name="dataPoint">The 0-based indes of the data point for which to set data.</param>
            <param name="newValue">The data to set in the data source. Can be numeric or string.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.ConnectionString">
            <summary>
            This property is not used by this provider.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.SelectString">
            <summary>
            This property is not used currently by this provider.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.DataSetDataProvider.DataSet">
            <summary>
            Gets and sets the DataSet that resides in this data provider.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.SeriesData.DataViewDataProvider">
            <summary>Supports a connection between a DataView object and the charting engine.</summary>
            <remarks>
            Note that if you have multiple DataView objects, simply instantiate a
            DataViewDataProvider for each DataView.  You can then create and bind
            series to each of the data providers.
            </remarks>
            <example>
                The example below is a fragment from the master/detail application created in the
                walkthrough "Using the DataSet and DataView Data Providers." In the example, a
                dataview is formed by filtering on a particular product category in a data table.
                This view is then placed inside a chart data provider, which is bound to the Y
                component of a data series on the chart.
                <code lang="CS" title="C# Example">
            //Create a dataview using a table from the dataset
            DataView dv = new DataView(this.dsSales1.Product_Sales_for_1997);
             
            //Filter on the category name passed in the strCategory argument
            dv.RowFilter = "CategoryName = '" + strCategory + "'";
             
            //Place the dataview inside a chart data provider
            DataViewDataProvider dp = new DataViewDataProvider(dv);
             
            //Bind fields in the table to components of a data series
            Series products = new Series();
            products.BindComponent(SeriesComponent.Y, dp, "ProductSales");
            products.BindComponent(SeriesComponent.Label, dp, "ProductName");
             
            //Remove any previously loaded series
            this.chtDetail.Chart.RemoveAllSeries();
             
            //Add the new data series to the chart
            int indexProducts = this.chtDetail.Chart.AddSeries(products);
             
            //Label the X axis
            this.chtDetail.Chart.Grid.AxisX.LabelSeries = products;
                </code>
            	<code lang="VB" title="VB Example">
            'Create a dataview using a table from the dataset 
            Dim dv As DataView = New DataView(Me.DsSales1.Product_Sales_for_1997)
             
            'Filter on the category name passed in the strCategory argument
            dv.RowFilter = "CategoryName = '" + strCategory + "'"
             
            'Place the dataview inside a chart data provider
            Dim dp As DataViewDataProvider = New DataViewDataProvider(dv)
             
            'Bind fields in the table to components of a data series
            Dim products As Series = New Series()
            products.BindComponent(SeriesComponent.Y, dp, "ProductSales")
            products.BindComponent(SeriesComponent.Label, dp, "ProductName")
             
            'Remove any previously loaded series
            Me.chtDetail.Chart.RemoveAllSeries()
             
            'Add the new data series to the chart
            Dim indexProducts As Integer = Me.chtDetail.Chart.AddSeries(products)
             
            'Label the X axis
            Me.chtDetail.Chart.Grid.AxisX.LabelSeries = products
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.#ctor(System.Data.DataView)">
            <summary>
            Constructor - This method will call InitializeDataView(dv)
            </summary>
            <param name="dv">Pass in the fully configured and loaded DataView.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.InitializeDataView(System.Data.DataView)">
            <summary>
            Use this method to set the DataView into the data provider.
            </summary>
            <param name="dv">Pass in the full configured and loaded DataView.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.OpenConnection">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.CloseConnection">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.RefreshConnection">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.IsConnected">
            <summary>
            This data provider is considered connected as long as a DataView object
            has been initialized.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.DoesFieldSourceExist(System.Object)">
            <summary>
            Use this method to query whether the specified field source exists in an opened
            data provider.
            </summary>
            <param name="fieldSource">The name of a data source field.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.DataPointCount(System.Object)">
            <summary>
            Returns the number of records in the DataView.  The field source
            parameter is not used and can be passed a null.
            </summary>
            <param name="fieldSource">The name of a OleDB data source field.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.IsNumberType(System.Object)">
            <summary>
            Returns true if the specified field source supports number type data.
            </summary>
            <param name="fieldSource">The name of a OleDB data source field.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.FindMinMaxValues(System.Object,System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            This method will walk all the values in the specified field source and return the
            minimum and maximum values for the datapoints that fall within the startDataPoint
            and EndDataPoint range inclusively.  Note that all data points are specified using
            a 0-based index.
            </summary>
            <remarks>
            If either startDataPoint or endDataPoint is less than zero, this method will find
            the min and max values across all the datapoints in the data provider.
            </remarks>
            <param name="fieldSource">The name of a OleDB data source field.</param>
            <param name="startDataPoint">The first data point of the range.</param>
            <param name="endDataPoint">The last data point of the range.</param>
            <param name="minValue">The miniumn value in the field source is returned in this param.</param>
            <param name="maxValue">The maximumn value in the field source is returned in this param.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.GetValue(System.Object,System.Int32)">
            <summary>
            Returns a value for the specified field source at the specified data point.
            </summary>
            <remarks>
            Note that the data is returned as a double.  Calling this method for a non-numeric type
            of field source will return 0.  Calling this method for a data point that does not
            exist will also return 0. 
            </remarks>
            <param name="fieldSource">The name of a OleDB data source field.</param>
            <param name="dataPoint">The 0-based index of the data point for which to return data.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.GetLabel(System.Object,System.Int32)">
            <summary>
            Returns a value for the specified field source at the specified data point.
            </summary>
            <remarks>
            Note that the data is returned as a string even if the field source contains numeric data.
            Calling this method for a data point that does not exist will return a null.
            </remarks>
            <param name="fieldSource">The name of a OleDB data source field.</param>
            <param name="dataPoint">The 0-based index of the data point for which to return data.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.ConnectionString">
            <summary>
            This property is not used by this provider.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.SelectString">
            <summary>
            This property is not used currently by this provider.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.DataViewDataProvider.DataView">
            <summary>
            Gets and sets the DataView that resides in this data provider.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.SeriesData.MemoryDataProvider">
            <summary>
            This data provider is used by the series object when a component is assigned data
            manually via the SetValue method.  A user typically does not ever instantiate
            this object directly.  However, it can be used independently of the chart object 
            to buffer data if so desired.  
            </summary>
            <remarks>
            Note that this data provider does not support the concept of field sources. 
            It simply contains a memory buffer for data points.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.OpenConnection">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.CloseConnection">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.RefreshConnection">
            <summary>
            This method has no functionality for this data provider.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.IsConnected">
            <summary>
            This data provider is always connected.  This method will always return true.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.DoesFieldSourceExist(System.Object)">
            <summary>
            There are no field sources in this data provider.
            </summary>
            <param name="fieldSource">Field source concept not support by this data provider.  Pass null into this parameter.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.DataPointCount(System.Object)">
            <summary>
            Returns the count of the items in the memory data provider.
            </summary>
            <param name="fieldSource">Field source concept not support by this data provider.
             Pass null into this parameter.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.IsNumberType(System.Object)">
            <summary>
            This method is not implemented for this data provider.  The values passed into
            the memory buffer can be numeric or string. It is up to the user to keep track
            of how this buffer is being used.
            </summary>
            <param name="fieldSource">The field source concept is not support by this data provider. 
            Pass null into this parameter.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.FindMinMaxValues(System.Object,System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            This method will walk all the values in the buffer and return the
            minimum and maximum values for the datapoints that fall within the startDataPoint
            and EndDataPoint range inclusively.  Note that all data points are specified using
            a 0-based index.
            </summary>
            <remarks>
            If either startDataPoint and endDataPoint are less than zero, this method will find
            the min and max values across all the datapoints in the data provider.
            </remarks>
            <param name="fieldSource">Field source concept not support by this data provider.  Pass null into this parameter.</param>
            <param name="startDataPoint">The first data point of the range.</param>
            <param name="endDataPoint">The last data point of the range.</param>
            <param name="minValue">The miniumn value in the field source is returned in this param.</param>
            <param name="maxValue">The maximumn value in the field source is returned in this param.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.GetValue(System.Object,System.Int32)">
            <summary>
            Returns a value for the specified data point.
            </summary>
            <param name="fieldSource">The field source concept is not support by this data provider. 
            Pass null into this parameter.</param>
            <param name="dataPoint">The 0-based index of the data point for which to return data.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.GetLabel(System.Object,System.Int32)">
            <summary>
            Returns the data for the specified data point as a string.
            </summary>
            <param name="fieldSource">The field source concept is not support by this data provider. Pass null into this parameter.</param>
            <param name="dataPoint">The 0-based index of the data point for which to return data.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.SetValue(System.Object,System.Int32,System.Object)">
            <summary>
            Sets the specified value for the specified datapoint.
            Note that because the value is an object it can be numeric or a string.
            </summary>
            <param name="fieldSource">The field source concept is not support by this data provider. Pass null into this parameter.</param>
            <param name="dataPoint">The 0-based indes of the data point for which to set data.</param>
            <param name="newValue">The data to set in the data source. Can be numeric or string.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.ConnectionString">
            <summary>
            This property is not used by this provider.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.MemoryDataProvider.SelectString">
            <summary>
            This property is not used currently by this provider.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.SeriesData.OleDBDataProvider">
            <summary>
            Supports connections between OleDb data sources and the charting engine. Connecting
            to a data source requires both a ConnectionString and a SelectString.
            </summary>
            <remarks>
            This data provider uses the notion of a <em>field source,</em> which it defines
            as a database field. Field sources are passed in via a string and are specified in the
            SelectString property. For example, a SelectString defined as "SELECT JAN, FEB FROM
            SALES" contains two field sources, JAN and FEB.
            </remarks>
            <example>
                The code fragment below makes a connection to the Northwind database, selects two
                fields from a table, and uses one field to provide Y values for a pie chart, the
                other to provide category labels for the legend.
                <code lang="CS" title="C# Example">
            //Get data from an OLEDB Data Provider
            OleDBDataProvider dp = new OleDBDataProvider();
             
            /* Note: You will need to change the ConnectionString
             * to whatever is appropriate for your system. */
            dp.ConnectionString = "Provider=SQLOLEDB;Integrated Security=SSPI;Initial Catalog=Northwind;Data Source=(local)\\VSDotNet";
            dp.SelectString = "SELECT CategoryName, CategorySales FROM [Category Sales for 1997]";
            try
            {
                dp.OpenConnection();
            }
            catch (DPConnectionException ex)
            {
                MessageBox.Show(ex.Message); 
                return; 
            }
             
            //Bind fields of the database to components of a data series
            Series sales = new Series();
            sales.BindComponent(SeriesComponent.Y, dp, "CategorySales");
            sales.BindComponent(SeriesComponent.Label, dp, "CategoryName");
             
            Chart cht = this.chtCategories.Chart; 
             
            //Chart type
            cht.ChartType = ChartType.Pie3D;
             
            //Remove any previously loaded series
            cht.RemoveAllSeries();
             
            //Add the new data series to the chart
            int indexSales = cht.AddSeries(sales);
             
            //Add category labels
            cht.Grid.AxisPie.LabelSeries = sales; //Category labels show in a pie chart's legend
                </code>
            	<code lang="VB" title="VB Example">
            'Get  data from an OLEDB Data Provider
            Dim dp As OleDBDataProvider = New OleDBDataProvider()
             
            ' Note: You will need to change the ConnectionString
            ' to whatever is appropriate for your system. 
            dp.ConnectionString = "Provider=SQLOLEDB;Integrated Security=SSPI;Initial Catalog=Northwind;Data Source=(local)\VSDotNet"
            dp.SelectString = "SELECT CategoryName, CategorySales FROM [Category Sales for 1997]"
            Try
                dp.OpenConnection()
            Catch ex As DPConnectionException
                MessageBox.Show(ex.Message)
                Return
            End Try
             
            'Bind fields of the database to components of a data series
            Dim sales As New Series
            sales.BindComponent(SeriesComponent.Y, dp, "CategorySales")
            sales.BindComponent(SeriesComponent.Label, dp, "CategoryName")
             
            With Me.chtCategories.Chart
                'Chart type
                .ChartType = ChartType.Pie3D
             
                'Remove any previously loaded series
                .RemoveAllSeries()
             
                'Send data to chart
                Dim indexSales As Integer = .AddSeries(sales)
             
                'Add category labels
                .Grid.AxisPie.LabelSeries = sales 'Category labels show in a pie chart's legend
            End With
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.OpenConnection">
            <summary>
            Opens a connection to an OleDB data source using the specified connection string.
            </summary>
            <remarks>
            If the connection fails to open, a DataProviderException is thrown. 
            Refer to the message in that exception to understand why the connection failed.
            
            <para>Internally this data provider uses ADO.NET technology and a DataSet
            object. This means that this data provider implements the disconnected recordset
            concept.Once data is retrieved, the physical connnection to the OleDB data source 
            is closed.</para> 
            </remarks>
            <exception cref="T:GraphicsServer.GSNet.SeriesData.DPConnectionException"/>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.CloseConnection">
            <summary>
            Closes the data provider connection.
            </summary>
            <remarks>Note that this data provider implements a disconnected record set 
            concept so calling this method does not actually do anything.</remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.RefreshConnection">
            <summary>
            Refreshes the connection using any connection properties that have been modified.
            </summary>
            <remarks>
            Use this method once the connection has been opened via the OpenConnection
            command.  For example, you could change the SelectString property to change 
            the ordering of the datapoints and then call RefreshConnection to view the new 
            ordering.  Note, however, that if the data provider has been bound to series 
            objects, then you must be careful not to remove any of bound field sources from 
            the select string.
            </remarks>
            <exception cref="T:GraphicsServer.GSNet.SeriesData.DPConnectionException"/>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.IsConnected">
            <summary>
            Call this method to see if the data provider is currently connected to its source
            and ready to return data.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.DoesFieldSourceExist(System.Object)">
            <summary>
            Use this method to query whether the specified field source exists in an opened
            data provider.
            </summary>
            <param name="fieldSource">The name of a OleDB data source field.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.DataPointCount(System.Object)">
            <summary>
            Returns the number of records in the database.  The field source
            parameter is not used and can be passed a null.
            </summary>
            <param name="fieldSource">The name of a OleDB data source field.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.IsNumberType(System.Object)">
            <summary>
            Returns true if the specified field source supports numeric data.
            </summary>
            <param name="fieldSource">The name of a OleDB data source field.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.FindMinMaxValues(System.Object,System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            This method will walk all the values in the specified field source and return the
            minimum and maximum values for the datapoints that fall within the startDataPoint
            and EndDataPoint range inclusively.  Note that all data points are specified using
            a 0-based index.
            </summary>
            <remarks>
            If either startDataPoint or endDataPoint is less than zero, this method will find
            the min and max values across all the datapoints in the data provider.
            </remarks>
            <param name="fieldSource">The name of a OleDB data source field.</param>
            <param name="startDataPoint">The first data point of the range.</param>
            <param name="endDataPoint">The last data point of the range.</param>
            <param name="minValue">The miniumn value in the field source is returned in this param.</param>
            <param name="maxValue">The maximumn value in the field source is returned in this param.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.GetValue(System.Object,System.Int32)">
            <summary>
            Returns a value for the specified field source at the specified data point.
            </summary>
            <remarks>
            Note that the data is returned as a double.  Calling this method for a non-numeric type
            of field source will return 0.  Calling this method for a data point that does not
            exist will also return 0.
            </remarks>
            <param name="fieldSource">The name of a OleDB data source field.</param>
            <param name="dataPoint">The 0-based index of the data point for which to return data.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.GetLabel(System.Object,System.Int32)">
            <summary>
            Returns a value for the specified field source at the specified data point.
            </summary>
            <remarks>
            Note that the data is returned as a string even if the field source contains numeric data.
            Calling this method for a data point that does not exist will return a null.
            </remarks>
            <param name="fieldSource">The name of a OleDB data source field.</param>
            <param name="dataPoint">The 0-based index of the data point for which to return data.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.ConnectionString">
            <summary>
            This property contains any valid OleDb connection string.  See
            the OleDB references for proper connection string syntax.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.OleDBDataProvider.SelectString">
            <summary>
            This property contains the selection string used by an OleDB data source.
            See the OleDB references for proper select string syntax based on the chosen
            OleDB data source type.
            </summary>
            <value>string</value>
        </member>
        <member name="T:GraphicsServer.GSNet.Designer.ChartLayoutDesigner">
            <summary>
            A designer for the layout of a chart
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Designer.ChartPreviewDesigner">
            <summary>
            The base class for all designers that have a preview
            chart control
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Designer.BaseChartDesigner">
            <summary>
            The base class for all designers.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Designer.QuickLayoutPresets">
            <summary>
            A set of static methods for generating QuickLayoutData objects.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.Designer.ChartTypeDropDown.components">
            Required designer variable.
        </member>
        <member name="T:GraphicsServer.GSNet.Designer.ChartStyleDesigner">
            <summary>
            The	style designer for charts.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Designer.BaseWidgetDesigner">
            <summary>
            The base class for all designers.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Designer.WidgetLayoutDesigner">
            <summary>
            A designer for the layout of a widget
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Designer.WidgetPreviewDesigner">
            <summary>
            The base class for all designers that have a preview
            widget
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Designer.WidgetPreviewDesigner.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LiveGSButton">
            <summary>
            The LiveGSButton is the same control as the 
            Dart.PowerWEB.LiveControls.LiveButton control.
            </summary>
            <remarks>
            This can freely be used with the LiveGSNetWebChart and the
            LiveGSNetWebWidget for refreshing a chart or widget
            without a page refresh. No Dart license is required.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LiveGSButton.#ctor">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LiveGSDropDownList">
            <summary>
            The LiveGSDropDownList is the same control as the 
            Dart.PowerWEB.LiveControls.LiveDropDownList control.
            </summary>
            <remarks>
            This can freely be used with the LiveGSNetWebChart and the
            LiveGSNetWebWidget for refreshing a chart or widget
            without a page refresh. No Dart license is required.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LiveGSDropDownList.#ctor">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LiveGSTextBox">
            <summary>
            The LiveGSTextBox is the same control as the 
            Dart.PowerWEB.LiveControls.LiveTextBox control.
            </summary>
            <remarks>
            This can freely be used with the LiveGSNetWebChart and the
            LiveGSNetWebWidget for refreshing a chart or widget
            without a page refresh. No Dart license is required.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LiveGSTextBox.#ctor">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LiveGSTimer">
            <summary>
            The LiveGSTimer is the same control as the 
            Dart.PowerWEB.LiveControls.LiveTimer control.
            </summary>
            <remarks>
            This can freely be used with the LiveGSNetWebChart and the
            LiveGSNetWebWidget for refreshing a chart or widget
            without a page refresh. No Dart license is required.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LiveGSTimer.#ctor">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.SeriesData.Series">
            <summary>
            The Series object can be instantiated and used independently of the Chart object.
            The Series object is simply a data store consisting of one to many components. Each
            defined/bound component is an independent data container.
            </summary>
            <remarks>
                The SeriesComponent enumeration defines the components that can exist in a Series
                object. Note that these component types have specific names like X, Y, Open, and
                Polar. The concept is that various chart types require different data components.
                For example, a scatter chart requires X and Y data, while an Open-High-Low-Close
                chart requires data for the opening, high, low, and closing price. 
                <para>Because the Series object is independent of the Chart object, it can be added
                to more than one Chart object simultaneously. The Chart object uses the Series
                object as a read-only data source and therefore will not compromise any data within
                the Series.</para>
            	<para>When a Series object is added to a Chart, the Chart wraps the Series object
                inside an object called SeriesDrawing. The SeriesDrawing object then exposes
                drawing properties that can be modified for that Series within that specific Chart.
                Note once again that modifying SeriesDrawing object properties does not change any
                data within the Series nor does it affect SeriesDrawing properties of other Charts
                if that same Series is added to more than one Chart.</para>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.#ctor(System.String)">
            <summary>
            Constructor. The name parameter is used in the legend.
            </summary>
            <param name="name">The name of this series, which also appears in the legend.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.HasComponent(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Determines whether the specified component exists in the Series.
            </summary>
            <returns>Returns true if the specific component exists in the Series.</returns>
            <example>
            See the example for the <see cref="M:GraphicsServer.GSNet.SeriesData.Series.SetValue(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32,System.Object)">SetValue</see> method.
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.BindComponent(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Object,System.Object)">
            <summary>
            Binds a series component to a specific field source in a data provider.  
            </summary>
            <remarks>
            This method creates a component as specified by the component type and then binds
            that component to the field source of the specified data provider.  Note that 
            prior to calling this method, the data provider should be completely set up and
            connected to a data source.
            <para>
            If the specified Series Component already exists and is already bound, then that component
            is removed and a new component is created.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Indicates a data parameter is bad.  Refer to the
            message in the exception for detailed information.</exception>
            <example>
                The example below is a fragment from the master/detail application created in the
                walkthrough "Using the DataSet and DataView Data Providers." In the example, a
                dataset is populated with data from two tables in the Northwind database. One of
                these tables is selected by a dataset data provider, which is then bound to the Y
                component of a chart data series.
                <code lang="CS" title="C# Example">
            //Populate dataset with two tables
            this.dsSales1.Clear();
            this.daCategorySales.Fill(this.dsSales1); //table 0
            this.daProductSales.Fill(this.dsSales1);  //table 1
             
            this.chtMaster.Chart.ChartType = ChartType.Pie3D;
             
            //Place the dataset inside a chart data provider
            DataSetDataProvider dp = new DataSetDataProvider(this.dsSales1);
             
            //Select the first table in the dataset
            dp.InitializeTable(0); 
             
            //Bind a field in the table to the Y component of a data series
            Series categories = new Series();
            try
            {
                categories.BindComponent(SeriesComponent.Y, dp, "CategorySales");
            }
            catch (ArgumentException e)
            {
                MessageBox.Show(e.Message); 
                return; 
            }
             
            //Remove any previously loaded series
            this.chtMaster.Chart.RemoveAllSeries();
             
            //Add the new data series to the chart
            int indexCategories = this.chtMaster.Chart.AddSeries(categories);
                </code>
            	<code lang="VB" title="VB Example">
            'Populate dataset
            Me.DsSales1.Clear()
            Me.daCategorySales.Fill(Me.DsSales1) 'table 0
            Me.daProductSales.Fill(Me.DsSales1)  'table 1
             
            Me.chtMaster.Chart.ChartType = ChartType.Pie3D
             
            'Place the dataset inside a chart data provider
            Dim dp As DataSetDataProvider = New DataSetDataProvider(Me.DsSales1)
             
            'Select the first table in the dataset
            dp.InitializeTable(0)
             
            'Bind a field in the table to the Y component of a data series
            Dim categories As Series = New Series
            Try
                categories.BindComponent(SeriesComponent.Y, dp, "CategorySales")
            Catch e As ArgumentException
                MessageBox.Show(e.Message)
                Return
            End Try
             
            'Remove any previously loaded series
            Me.chtMaster.Chart.RemoveAllSeries()
             
            'Add the new data series to the chart
            Dim indexCategories As Integer = Me.chtMaster.Chart.AddSeries(categories)
                </code>
            </example>
            <param name="seriesCompType">Value from the <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/> enum.</param>
            <param name="dataProvider">Fully constructed Data Provider.</param>
            <param name="fieldSource">Name of a field in the Data Provider.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.DataPointCount(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Returns the count of data points for the specified component.
            </summary>
            <remarks>In general, if all components of a Series are bound to the same data provider, 
            then the data point count should be the same for all components.  If, however, each 
            component of a Series is bound to a different data provider, then there is a chance 
            the data point count is different for each component.  If the component does not 
            exist, then the count returned is 0.
            </remarks>
            <returns>The number of datapoints that exist for the specified component type.</returns>
            <example>
                The code fragment below determines how many data points are in the longest series
                on the chart. It does this by cycling through each SeriesDrawing object in the
                collection, retrieving its associated Series object, and getting the data point
                count of the series. 
                <code lang="CS" title="[C# Example]">
            Chart chart = this.gsNetWinChart1.Chart;
             
            // Find out how many data points are in the longest series
            int numPts = 0;
            int maxPts = 0;
            foreach(SeriesDrawing sd in chart.SeriesDrawingList)
            {
                numPts = sd.GetSeries().DataPointCount(SeriesComponent.Y);
                if (numPts &gt; maxPts)
                    maxPts = numPts;
            }
                </code>
            	<code lang="VB" title="[VB Example]">
            Dim chart As Chart = Me.GsNetWinChart1.Chart
             
            ' Find out how many data points are in the longest series
            Dim numPts As Integer = 0
            Dim maxPts As Integer = 0
            For Each sd As SeriesDrawing In chart.SeriesDrawingList
                numPts = sd.GetSeries().DataPointCount(SeriesComponent.Y)
                If (numPts &gt; maxPts) Then
                    maxPts = numPts
                End If
            Next
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.FindMinMaxValues(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            This method will walk the values in the specified component and return the
            minimum and maximum values for the start through end data points.  Note
            that all data points are specified using a 0-based index.
            </summary>
            <remarks>
            If either startDataPoint or endDataPoint is less than zero, then the min and max values are
            returned for all datapoints.
            </remarks>
            <exception cref="T:System.ArgumentException">Indicates a data parameter is bad.</exception>
            <param name="seriesCompType">Value from the <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/> enum.</param>
            <param name="startDataPoint">The first data point to display.</param>
            <param name="endDataPoint">The last data point to display.</param>
            <param name="minValue">The minimum value in the field source is returned in this param.</param>
            <param name="maxValue">The maximum value in the field source is returned in this param.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.GetValue(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32)">
            <summary>
            This method returns a value for the specified component at the specified data point.
            </summary>
            <remarks>
            Note that the data is returned as a double. Calling this method for a non-numeric type
            of field source will return 0.  Calling this method for a data point that does not
            exist also returns 0.  Calling this method for a component that does not exist
            returns the integer passed in as the dataPoint argument.
            </remarks>
            <exception cref="T:System.ArgumentException">Indicates a data parameter is bad.</exception>
            <param name="seriesCompType">Value from the <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/> enum.</param>
            <param name="dataPoint">The 0-based index of the data point for which to return data.</param>
            <returns>Returns the value associated to the data point.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.GetLabel(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32)">
            <summary>
            This method returns a value for the specified component at the specified data point.
            </summary>
            <remarks>
            Note that the data is returned as a string even if the field source contains numeric data.
            Calling this method for a data point that does not exist returns the integer passed in as the
            dataPoint argument.
            </remarks>
            <param name="seriesCompType">Value from the <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/> enum.</param>
            <param name="dataPoint">The data point to return data for.</param>
            <returns>Returns the value associated to the data point as a string.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.Randomize(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32)">
            <summary>
            This method hooks a randomized data provider to the specified component.
            </summary>
            <remarks>
            If the specified component already exists, then it is removed and a new component
            is created.
            <para>Hooking a component to this method causes the data points to regenerate each time the 
            grid area is repainted. The series draws differently each time the grid repaints because the 
            component has different data each time.
            </para>
            <para> This method does not work well with 3D charts; instead use the RandomizeComponent() 
            method.
            </para> 
            </remarks>
            <param name="seriesCompType">Value from the <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/> enum.</param>
            <param name="totalRandomPoints">The number of random datapoints for this component.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.IsRandomized(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Returns a boolean indicating whether the specified component
            is currently returning randomized data.
            </summary>
            <param name="seriesCompType">Value from the <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/> enum.</param>
            <returns>Returns true if this component is randomized.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.SetValue(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32,System.Object)">
            <summary>
            This method sets the specified value at the data point within the component.
            </summary>
            <remarks>
            If the component is bound to a data provider that does not support setting data,
            then an exception is thrown (i.e. OleDB bound components will throw an exception).
            <para>
            If the component is currently randomized, calling this method removes
            the randomized component, recreates the component, and binds it internally to a memory
            data provider.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Indicates a data parameter is bad</exception>
            <example>
                The example below creates a series of labels for the X axis of the chart. The value
                of the SeriesComponent.Label for each data point is set with the string
                representation of a year, incrementing by one year each data point. The resulting
                series (1990, 1991, 1992...) is then attached to the X axis. 
                <code lang="CS" title="[C# Example]">
            Chart chart = this.gsNetWinChart1.Chart;
             
            // Find out how many data points are in the longest series
            int numPts = 0;
            int maxPts = 0;
            foreach(SeriesDrawing sd in chart.SeriesDrawingList)
            {
                numPts = sd.GetSeries().DataPointCount(SeriesComponent.Y);
                if (numPts &gt; maxPts)
                    maxPts = numPts;
            }
             
            // Create a label series beginning with 1990,
            // incrementing by one year for each data point
            Series labels = new Series();
            DateTime firstYear = new DateTime(1990,1, 1);
            for (int i = 0; i &lt; maxPts; i++)
            {
                try
                {
                    labels.SetValue(SeriesComponent.Label, i, firstYear.AddYears(i).ToString("yyyy"));
                }
                catch (ArgumentException e)
                {
                    MessageBox.Show(e.Message);
                    break;
                }
            }
             
            // Scale the X axis and attach the labels
            AxisX axisX = chart.Grid.AxisX;
            axisX.AxisMode = AxisMode.Category;
            axisX.MajorTickCount = 0;
            axisX.MajorTickInterval = 1;
            if (labels.HasComponent(SeriesComponent.Label))
                axisX.LabelSeries = labels;
                </code>
            	<code lang="VB" title="[VB Example]">
            Dim chart As Chart = Me.GsNetWinChart1.Chart
             
            ' Find out how many data points are in the longest series
            Dim numPts As Integer = 0
            Dim maxPts As Integer = 0
            For Each sd As SeriesDrawing In chart.SeriesDrawingList
                numPts = sd.GetSeries().DataPointCount(SeriesComponent.Y)
                If (numPts &gt; maxPts) Then
                    maxPts = numPts
                End If
            Next
             
            ' Create a label series beginning with 1990,
            ' incrementing by one year each data point
            Dim labels As Series = New Series
            Dim firstYear As DateTime = New DateTime(1990, 1, 1)
            For i As Integer = 0 To maxPts - 1
                Try
                    labels.SetValue(SeriesComponent.Label, i, firstYear.AddYears(i).ToString("yyyy"))
                Catch e As ArgumentException
                    MessageBox.Show(e.Message)
                    Exit For
                End Try
            Next
             
            ' Scale the X axis and attach the labels
            Dim axisX As AxisX = chart.Grid.AxisX
            axisX.AxisMode = AxisMode.Category
            axisX.MajorTickCount = 0
            axisX.MajorTickInterval = 1
            If labels.HasComponent(SeriesComponent.Label) Then
                axisX.LabelSeries = labels
            End If
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.GetComponentFieldSource(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Returns the name of the field source within the specified component.
            </summary>
            <remarks>
            Null is returned if the component does not exist or i the data provider
            does not support field sources.
            </remarks>
            <param name="seriesCompType">Value from the <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/> enum</param>
            <returns>Returns the name of the field source.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.RemoveComponent(GraphicsServer.GSNet.SeriesData.SeriesComponent)">
            <summary>
            Removes the specified component from the series if it exists.
            </summary>
            <param name="seriesCompType">Value from the <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/> enum.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.RandomizeComponent(GraphicsServer.GSNet.SeriesData.SeriesComponent,System.Int32,System.Int32,System.Int32)">
            <summary>
            Randomizes the specified component.
            </summary>
            <remarks>This method differs from the Randomize method in that it creates random 
            values and then sets those random values into the specified component via the 
            SetValue() method. Therefore the random values are fixed for as long as the series 
            exists. In other words, the random values do not jump around each time the grid area 
            is repainted.
            </remarks>  
            <param name="comp">Value from the <see cref="T:GraphicsServer.GSNet.SeriesData.SeriesComponent"/> enum.</param>
            <param name="totalPoints">Total number of points to create.</param>
            <param name="minValue">min random value.</param>
            <param name="maxValue">max random value.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.SeriesData.Series.Copy">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.SeriesData.Series.SeriesName">
            <summary>
            Name of the series. This name is displayed in the Chart legend.
            </summary>
            <remarks>
            Note that once a series is added to a chart, the series name can be overriden
            via the SeriesName property exposed by the SeriesDrawing object.
            <para>
            The value of this property defaults to "Series Name".
            </para>
            </remarks>
            <value>string</value>
        </member>
        <member name="T:GraphicsServer.GSNet.SeriesData.SeriesComponent">
            <summary>
            A Series object can contain many components into which data can be set
            and from which it can be retrieved. This enumeration identifies these components.
            Note that a Series object may contain one, several, or all of them.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.X">
            <summary>
            The x-axis component.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.Y">
            <summary>
            The y-axis component.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.Z">
            <summary>
            The z-axis component.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.Angle">
            <summary>
            The anglular component of a polar coordinate (theta).
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.Radius">
            <summary>
            The radial component of a polar coordinate or radius value for a Bubble series.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.Open">
            <summary>
            The opening value over a given interval.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.High">
            <summary>
            The high value over a given interval.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.Low">
            <summary>
            The low value over a given interval.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.Close">
            <summary>
            The closing value over a given interval.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.SeriesData.SeriesComponent.Label">
            <summary>
            A string that can be used to label an axis.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.VS2005">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VS2005.IsASPNETFileSystemProject(System.Web.HttpContext)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VS2005.CreateASPNETFileSystemProjectSubFolder(System.Web.HttpContext,System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VS2005.IsExpressChartType(GraphicsServer.GSNet.Charting.ChartType)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.VS2005.IsExpressWidgetType(GraphicsServer.GSNet.Widgets.DeviceList)">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.GSNetWebChart">
            <summary>
            The GSNetWebChart object is a Web Control that encapsulates
            a Chart object. This Web Control is a native .NET server control.
            It can be placed on a web form to provide easy access to the Chart 
            object configuration properties.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetWebChart.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetWebChart.Dispose">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetWebChart.RegenDesignTimeHtml">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetWebChart.SaveToViewState(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Saves a subset of chart properties to a view state.
            </summary>
            <remarks>
                Chart properties are saved to the GSNetWebChart's ViewState based on flags in the
                <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/> parameter. The
                TemplateFlags class provides the means to save specific subsets of the chart
                properties. To save different sets of properties, simply call this method multiple
                times using a different name parameter with each call. 
                <para>When loading the properties back in from the ViewState, use the
                <see cref="M:GraphicsServer.GSNet.Charting.GSNetWebChart.LoadFromViewState(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)"/> method.
                Note that LoadFromViewState has two overrides. One override requires a TemplateFlags
                parameter and the other override does not. The easiest
                method to load properties is the override that does not
                require the TemplateFlags parameter.</para>
            </remarks>
            <example>
            	<para>The following example shows how to save SeriesDrawing properties and legend
                properties and then read them back in from the ViewState.</para>
            	<code lang="CS">
            // Save only the SeriesDrawing properties.
            flags.SetAllIgnoreFlags(true);
            flags.IgnoreSeriesDefaults = false;
            this.GSNetWebChart1.SaveToViewState("MySeriesDrawingProps", flags);
             
            // Save out the legend properties.
            flags.IgnoreSeriesDefaults = true;
            flags.IgnoreLegend = false;
            this.GSNetWebChart1.SaveToViewState("MyLegendProps", flags);
             
            // This code can be placed in a post back method to properties back in.
            this.GSNetWebChart1.LoadFromViewState("MySeriesDrawingProps");
            this.GSNetWebChart1.LoadFromViewState("MyLegendProps");
                </code>
            </example>
            <param name="name">The name specifies which state bag to save
            the chart properties under.
            </param>
            <param name="flags">The template flags specify which
            chart properties you want to save and which you want to ignore. For more
            information see <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.
            </param>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetWebChart.SaveToViewState(System.String)">
            <summary>
            Saves all the chart's properties to the GSNetWebChart's ViewState.
            </summary>
            <remarks>
            Internally this method allocates a TemplateFlags class and sets all the 
            ignore flags to false, which causes all properties to be saved.
            </remarks>
            <param name="name">The name specifies which state bag to save
            the chart properties under.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetWebChart.LoadFromViewState(System.String,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Loads specified chart properties from a previously saved ViewState. 
            </summary>
            <remarks>
            The name parameter must equal the name parameter used when the 
            properties were saved. Note that this method requires a 
            <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>
            object to specify which properties to load. If you would like to
            load all the properties saved for the specified name, then it is much
            easier to call the overload that does not require the TemplateFlags
            object.
            </remarks>
            <param name="name">The name specifies which state bag to load
            the properties under.</param>
            <param name="flags">The template flags specify which
            properties you want to load and which you want to ignore. For more
            information see <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetWebChart.LoadFromViewState(System.String)">
            <summary>
            Loads all chart properties from a previously saved ViewState.
            </summary>
            <remarks>
            The name parameter must equal the name parameter used when the properties were saved.
            Internally this method allocates a TemplateFlags class and sets all the 
            ignore flags to false which causes all properties that were saved out
            to be loaded.
            </remarks>
            <param name="name">The name specifies which state bag to load
            the properties under.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.BackColor">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.BorderColor">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.BorderWidth">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.Font">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.CssClass">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.ForeColor">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.Width">
            <summary>
            Specifies the width of the control.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.Height">
            <summary>
            Specifies the height of the control.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.AutoSizeChartObjects">
            <summary>
            DEPRECATED 
            This property and the corresponding functionality have been replaced with chart
            object Anchor properties. Chart object anchoring works in a way that is similar to anchoring
            of controls within forms. This property has been left for backward compatibility.
            </summary>
            <remarks>
            Note that if this property is true then anchoring will be disabled.
            <para>If this property is true, then in design time all the internal chart objects
            resize based on the new size of the control.</para>
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.ImageFormat">
            <summary>
            Bitmap image format.
            </summary>
            <value>ImageFormat</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.Chart">
            <summary>
            This property is the encapsulated Chart object. See the 
            <see cref="T:GraphicsServer.GSNet.Charting.Chart"/> object for 
            more information concerning the capabilities of this object.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Chart"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.LogDeletedFiles">
            <summary>
            Enables and disables logging of deleted image files.
            </summary>
            <value>bool</value>
            <remarks>
            Setting this property to true will log all deleted files. The log file
            will be created in the run-time image folder. The name of the file
            is GSNetDeletedFiles.log.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.RunTimeImagesFolderLocation">
            <summary>
            Sets and gets the relative location of the folder where temporary image files created
            by the control are stored.
            </summary>
            <remarks>
            Use the <see cref="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation"/> enumeration
            to specify the relative location for the run-time image folder. The name of this
            folder can be specified using the <see cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.RunTimeDir"/> property.
            <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation">RunTimeImagesFolderLocation Enumeration</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.RunTimeDir">RunTimeDir Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.RunTimeDir">
             <summary>
             Assigns the name of the run-time image folder where generated image files
             are stored and referenced by the client side generated html. Requires
             that RunTimeImagesFolderLocation is UnderDefaultWebSite or UnderWebApplication.
             </summary>
             <value>string</value>
             <remarks>
             The value of this property can be either a single directory name
             or a relative path plus directory name (for example, MyImages, images/.../MyImages).
             <para>
             The location of the directory is determined by setting of this property plus the 
             setting of the <see cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.RunTimeImagesFolderLocation"/> property. The RunTimeDir
             is only used when RunTimeImagesFolderLocation is UnderDefaultWebSite or UnderWebApplication.
            </para>
             <para>
             If the RunTimeDir property is left blank, the control
             checks the HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\RunTimeDir
             registry setting for a run-time image folder name.
             If that registry setting does not exist, the run-time image folder name
             defaults to GSNetImages.
             </para>
             <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
             </remarks>
             <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.RunTimeImagesFolderLocation">RunTimeImagesFolderLocation Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.FilesToDelete">
            <summary>
            Specifies the number of run-time image files to delete each time the control's
            directory cleanup routine executes.
            </summary>
            <value>int</value>
            <remarks>
            The control's directory cleanup routine runs each time the control loads.
            If this property is not set (i.e. a value of -1 means not set), then the 
            HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\FilesToDelete
            registry key is checked for a value. If that key does not exist, then
            the number of files to delete defaults to 20.
            <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.MinutesOld">MinutesOld Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.MinutesOld">
            <summary>
            Specifies the age criteria, in minutes, for deleting temporary image files
            created by the control.  
            </summary>
            <value>int</value>
            <remarks>
            If the MinutesOld property is not set (i.e. a value or -1 means not set), then the 
            HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\MinutesOld
            registry key is checked for a value. If that key does not exist, then
            the default setting is 30 minutes.
            <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.FilesToDelete">FilesToDelete Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.DeleteASPNetTempFiles">
            <summary>
            Deletes temporary files the web control creates from the 'ASPNET Temporary Files' folder.
            </summary>
            <value>bool</value>
            <remarks>
            <para>
            Setting this property to true will log delete all temporary files the web
            control creates in the 'Documents and Settings\MachineName\ASPNET\Local Settings\Temp' 
            folder. The policy for deleting these files will be defined by the FilesToDelete and MinutesOld
            properties.
            </para>
            <para>
            This property works in conjunction with the DeleteASPNetTempFileMode property. The
            DeleteASPNetTempFileMode property will determine whether to delete all files or just the ones
            created by the web control.
            </para>
            <para>
            A log file in the ASPNET Temporary Files directory will store the filenames 
            that the web control has created but not yet deleted.
            </para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.DeleteASPNetTempFileMode">
            <summary>
            Sets whether to delete all files or just the ones created by the web control.
            </summary>
            <value>DeleteASPNetTempFileMode</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.InDesignTime">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.RuntimeImageFileName">
            <summary>
            Gets the full path and file name of the run-time
            image file that was generated and referenced in the client side
            HTML page. 
            </summary>
            <value>string</value>
            <remarks>
            Note that this property will return an empty string
            if the control has not yet rendered.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.ImageFileMode">
            <summary>
            Determines how the temporary images are created when
            the Web page is executed.
            </summary>
            <remarks>The default setting is ImageFileMode.WriteToDisk. If your application does not
            have the security permissions needed for this mode, you can set ImageFileMode.ByteStream.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.ImageHardDiskFolder">
            <summary>
            Sets and gets a path to the physical folder on the machine
            where temporary images will be written.
            </summary>
            <remarks>
            This property is ignored unless the RunTimeImagesFolderLocation
            property is set to RunTimeImagesFolderLocation.UserDefined and the
            ImageVirtualDirectory property is set to the name of a virtual directory. 
            The virtual directory, through its Web site virtual path, must match up  
            with the ImageHardDiskFolder so that they are both pointing to the same
            folder on the machine. If both paths do not point to the same folder,
            images will not display when the Web page is downloaded to the client browser.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.RunTimeImagesFolderLocation">RunTimeImagesFolderLocation Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.ImageVirtualDirectory">ImageVirtualDirectory Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.ImageVirtualDirectory">
            <summary>
            Sets and gets the name of the virtual folder where temporary images 
            will be referenced from the Web page. 
            </summary>
            <remarks>
            This property is ignored unless the RunTimeImagesFolderLocation property
            is set to RunTimeImagesFolderLocation.UserDefined and the ImageHardDiskFolder
            property is set with a path to the physical folder. The virtual directory, through
            its Web site virtual path, must match up with the ImageHardDiskFolder
            so that they are both pointing to the same folder on the machine. If both paths do 
            not point to the same folder, images will not display when the Web page is downloaded 
            to the client browser.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.RunTimeImagesFolderLocation">RunTimeImagesFolderLocation Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.ImageHardDiskFolder">ImageHardDiskFolder Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.AnimatedGifEnabled">
            <summary>
            Enables and disables whether to use the AnimatedGif defined
            within the Chart.
            </summary>
            <value>bool</value>
            <remarks>
            <para>
            If this property is set to true, the AnimatedGif produced by the
            chart is displayed by the Web browser instead of the current chart image. 
            </para>
            <para>
            When false, the current chart image is displayed.</para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.ImageFilename">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWebChart.UniqueFilename">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.LiveGSNetWebChart">
            <summary>
            The LiveGSNetWebChart object is a Web Control that encapsulates
            a Chart object. This Web Control is a Live control, which can be updated
            using the other Live controls and the update doesn't require a page refresh.
            It can be placed on a web form to provide easy access to the Chart 
            object configuration properties.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.Dispose">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.RegenDesignTimeHtml">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.Width">
            <summary>
            Specifies the width of the control.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.Height">
            <summary>
            Specifies the height of the control.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.AutoSizeChartObjects">
            <summary>
            DEPRECATED 
            This property and the corresponding functionality have been replaced with chart
            object Anchor properties. Chart object anchoring works in a way that is similar to anchoring
            of controls within forms. This property has been left for backward compatibility.
            </summary>
            <remarks>
            Note that if this property is true then anchoring will be disabled.
            <para>If this property is true, then in design time all the internal chart objects
            resize based on the new size of the control.</para>
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.ImageFormat">
            <summary>
            Bitmap image format.
            </summary>
            <value>ImageFormat</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.Chart">
            <summary>
            This property is the encapsulated Chart object. See the 
            <see cref="T:GraphicsServer.GSNet.Charting.Chart"/> object for 
            more information concerning the capabilities of this object.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Chart"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.LogDeletedFiles">
            <summary>
            Enables and disables logging of deleted image files.
            </summary>
            <value>bool</value>
            <remarks>
            Setting this property to true will log all deleted files. The log file
            will be created in the run-time image folder. The name of the file
            is GSNetDeletedFiles.log.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.RunTimeImagesFolderLocation">
            <summary>
            Sets and gets the relative location of the folder where temporary image files created
            by the control are stored.
            </summary>
            <remarks>
            Use the <see cref="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation"/> enumeration
            to specify the relative location for the run-time image folder. The name of this
            folder can be specified using the <see cref="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.RunTimeDir"/> property.
            <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation">RunTimeImagesFolderLocation Enumeration</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.RunTimeDir">RunTimeDir Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.RunTimeDir">
             <summary>
             Assigns the name of the run-time image folder where generated image files
             are stored and referenced by the client side generated html. 
             </summary>
             <value>string</value>
             <remarks>
             The value of this property can be either a single directory name
             or a relative path plus directory name (for example, MyImages, images/.../MyImages).
             <para>
             The location of the directory is determined by setting of this property plus the 
             setting of the <see cref="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.RunTimeImagesFolderLocation"/> property.
            </para>
             <para>
             If the RunTimeDir property is left blank, the control
             checks the HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\RunTimeDir
             registry setting for a run-time image folder name.
             If that registry setting does not exist, the run-time image folder name
             defaults to GSNetImages.
             </para>
             <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
             </remarks>
             <seealso cref="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.RunTimeImagesFolderLocation">RunTimeImagesFolderLocation Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.FilesToDelete">
            <summary>
            Specifies the number of run-time image files to delete each time the control's
            directory cleanup routine executes.
            </summary>
            <value>int</value>
            <remarks>
            The control's directory cleanup routine runs each time the control loads.
            If this property is not set (i.e. a value of -1 means not set), then the 
            HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\FilesToDelete
            registry key is checked for a value. If that key does not exist, then
            the number of files to delete defaults to 20.
            <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.MinutesOld">MinutesOld Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.MinutesOld">
            <summary>
            Specifies the age criteria, in minutes, for deleting temporary image files
            created by the control.  
            </summary>
            <value>int</value>
            <remarks>
            If the MinutesOld property is not set (i.e. a value or -1 means not set), then the 
            HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\MinutesOld
            registry key is checked for a value. If that key does not exist, then
            the default setting is 30 minutes.
            <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.FilesToDelete">FilesToDelete Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.DeleteASPNetTempFiles">
            <summary>
            Deletes temporary files the web control creates from the 'ASPNET Temporary Files' folder.
            </summary>
            <value>bool</value>
            <remarks>
            <para>
            Setting this property to true will log delete all temporary files the web
            control creates in the 'ASPNET Temporary Files' folder. The policy for
            deleting these files will be defined by the FilesToDelete and MinutesOld
            properties.
            </para>
            <para>
            This property works in conjunction with the DeleteASPNetTempFileMode property. The
            DeleteASPNetTempFileMode property will determine whether to delete all files or just the ones
            created by the web control.
            </para>
            <para>
            A log file in the ASPNET Temporary Files directory will store the filenames 
            that the web control has created but not yet deleted.
            </para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.DeleteASPNetTempFileMode">
            <summary>
            Sets whether to delete all files or just the ones created by the web control.
            </summary>
            <value>DeleteASPNetTempFileMode</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.InDesignTime">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.RuntimeImageFileName">
            <summary>
            Gets the full path and file name of the run-time
            image file that was generated and referenced in the client side
            HTML page. 
            </summary>
            <value>string</value>
            <remarks>
            Note that this property will return an empty string
            if the control has not yet rendered.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.ImageFileMode">
            <summary>
            The ImageFileMode will determine how the image will get created when
            the web page is executed.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.ImageHardDiskFolder">
            <summary>
            The ImageHardDiskFolder assigns the physical folder on the machine
            where the images will be written to. Requires that the 
            RunTimeImagesFolderLocation is set to UserDefined.
            </summary>
            <remarks>
            When using the ImageHardDiskFolder property, then one must also
            set RunTimeImagesFolderLocation to UserDefined and assign the
            ImageVirtualDirectory. The ImageVirtualDirectory, through
            its website virtual path, must match up with the ImageHardDiskFolder
            so that they are both pointing to the same folder on the machine. It
            is the user's duty to verify both paths point to the same folder,
            otherwise one would presumably get a broken image when running the web page
            in a web browser.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.LiveGSNetWebChart.ImageVirtualDirectory">
            <summary>
            The ImageVirtualDirectory assigns the virtual folder where the images 
            will be referenced from the web page. Requires that the 
            RunTimeImagesFolderLocation is set to UserDefined.
            </summary>
            <remarks>
            When using the ImageVirtualDirectory property, then one must also
            set RunTimeImagesFolderLocation to UserDefined and assign the
            ImageHardDiskFolder. The ImageVirtualDirectory, through
            its website virtual path, must match up with the ImageHardDiskFolder
            so that they are both pointing to the same folder on the machine. It
            is the user's duty to verify both paths point to the same folder,
            otherwise one would presumably get a broken image when running the web page
            in a web browser.
            </remarks>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation">
            <summary>
            Values of this enumeration are used to specify the location of the run-time image
            folder on the Web server.
            </summary>
            <remarks>
            	<para>
            This enumeration is implemented by the
            <see cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.RunTimeImagesFolderLocation"/> property
            and the <see cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.RunTimeImagesFolderLocation"/> property.
            </para>
            	<para>
                The Web control generates image files that are referenced in the 
                server side generated HTML pages sent back to the user's client side browser.
                These generated image files are created in the run-time image folder.
                </para>
            	<para>The run-time image folder can be located in either one of two places:</para>
            	<list type="bullet">
            		<item>Under the default Web site (for example, <c>c:\inetpub\wwwroot\gsnetimages</c>).</item>
            		<item>Under the Web application's directory (for example, <c>c:\inetpub\wwwroot\myapp\gsnetimages</c>).</item>
            	</list>
            	<para>The actual name of the run-time image folder defaults to the name GSNetImages
                if not overridden. The name of this folder can be overridden in one of two ways.
                The <see cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.RunTimeDir"/> property can be used
                to specify a relative folder structure. Or the registry can be used to specify this
                relative folder by placing the folder name in the
                HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\RunTimeDir key. 
                Note that the RunTimeDir property takes precedence over the registry key.</para>
            	<para>If the setup on your server requires using virtual directories, set the RunTimeDir property
            	to RunTimeImagesFolderLocation.UserDefined and then set the control's ImageHardDiskFolder and 
            	ImageVirtualDirectory properties.</para>
            	<para>Note that in order for images to be successfully created in the run-time
                image folder, the image folder must exist and have security permissions such that the Web
                application can create and delete files in that folder.</para>
            	<para>You can avoid the need to create and delete files on the server by setting the control's
                ImageFileMode property to <see cref="T:GraphicsServer.GSNet.Charting.ImageFileMode">ImageFileMode.ByteStream</see>.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.RunTimeImagesFolderLocation">GSNetWebChart.RunTimeImagesFolderLocation Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.RunTimeImagesFolderLocation">GSNetWebWidget.RunTimeImagesFolderLocation Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.ImageHardDiskFolder">GSNetWebChart.ImageHardDiskFolder Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.ImageHardDiskFolder">GSNetWebWidget.ImageHardDiskFolder Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWebChart.ImageVirtualDirectory">GSNetWebChart.ImageVirtualDirectory Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.ImageVirtualDirectory">GSNetWebWidget.ImageVirtualDirectory Property</seealso>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation.UnderDefaultWebSite">
            <summary>
            Runtime image folder will reside under the IIS default web site.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation.UnderWebApplication">
            <summary>
            Runtime image folder will reside under the application directory.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation.UserDefined">
            <summary>
            User defined folder location requires that both the ImageHardDiskFolder and ImageVirtualDirectory
            are assigned by the user and that the physical and virtual paths link to the same folder.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.ImageFileMode">
            <summary>
            The ImageFileMode will determine how the image will get created when
            the web page is executed.
            </summary>
            <remarks>
            <para>
            Be aware that when writing the image file to the hard disk,
            the appropriate security permissions are needed in certain folders
            in order create the image file name and to write the file to disk.
            See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.
            </para>
            <para>
            When bytestreaming the image, no security permissions are needed
            for any folders. However one must be aware that the bytestream
            uses a querystring named "GSNetWebChartID" in order to bytestream
            the image. Thus do not create a querystring with this same name when
            implementing your web page.
            </para>
            </remarks>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ImageFileMode.WriteToDisk">
            <summary>
            The image file will be created on the hard disk.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.ImageFileMode.ByteStream">
            <summary>
            The image file will be byte-streamed to the web page.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.DeleteASPNetTempFileMode">
            <summary>
            Sets whether to delete all temporary files or just the ones created by the web control.
            </summary>
            <para>
            Be aware when setting to AllTempFiles, since other controls on the same
            web page might require their own temp files and their own creation and
            clean-up schemes.
            </para>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.DeleteASPNetTempFileMode.OnlyWebControlFiles">
            <summary>
            This will only delete the temp files created by the web control.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Charting.DeleteASPNetTempFileMode.AllTempFiles">
            <summary>
            This will delete all temp files in the folder, regardless of their creator.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.MeterZone">
            <summary>Represents a zone for a meter device.</summary>
            <example>
                The example below configures a meter device to simulate an RPM indicator with a red
                zone. 
                <code lang="CS" title="C#">
            // Create a meter device and configure it
            Meter meterRPM = new Meter("rpm");
            meterRPM.Location = new Point(5,5);
            meterRPM.Size = new Size(500, 400);
            meterRPM.StartAngle = 135;
            meterRPM.SweepAngle = 270;
            meterRPM.ScaleValueMax = 6000;
            meterRPM.ScaleLabelFormatMask = "#,."; // 6000 displays as 6
            meterRPM.MajorTicks = 7; // tick at 0 and every 1000
            meterRPM.MinorTicks = 9;
             
            // Create a meter zone and configure it
            MeterZone zoneRed = new MeterZone();
            zoneRed.Background.Color = Color.Red;
            zoneRed.ThicknessPercent = 8;
            zoneRed.ValueStart = 5000;
            zoneRed.ValueEnd = 6000;
             
            // Add the zone to the meter
            meterRPM.MeterZoneList.Add(zoneRed);
             
            // Create a needle and configure it
            MeterNeedle needleRPM = new MeterNeedle("rpm");
            needleRPM.Background.Color = Color.DarkSlateGray;
            needleRPM.BorderLabelName = "NeedleValue";
            needleRPM.LabelFormatMask = "#,##0 RPM";
            needleRPM.Value = 2500;
             
            // Add the needle to the meter
            meterRPM.NeedleList.Add(needleRPM);
             
            // Add the meter to the widget
            this.gsNetWinWidget1.Widget.DeviceList.Add(meterRPM);
                </code>
            	<code lang="VB" title="VB">
            ' Create a meter device and configure it
            Dim meterRPM As Meter = New Meter("rpm")
            meterRPM.Location = New Point(5, 5)
            meterRPM.Size = New Size(500, 400)
            meterRPM.StartAngle = 135
            meterRPM.SweepAngle = 270
            meterRPM.ScaleValueMax = 6000
            meterRPM.ScaleLabelFormatMask = "#,." ' 6000 displays as 6
            meterRPM.MajorTicks = 7 ' tick at 0 and every 1000
            meterRPM.MinorTicks = 9
             
            ' Create a meter zone and configure it
            Dim zoneRed As MeterZone = New MeterZone
            zoneRed.Background.Color = Color.Red
            zoneRed.ThicknessPercent = 8
            zoneRed.ValueStart = 5000
            zoneRed.ValueEnd = 6000
             
            ' Add the zone to the meter
            meterRPM.MeterZoneList.Add(zoneRed)
             
            ' Create a needle and configure it
            Dim needleRPM As MeterNeedle = New MeterNeedle("rpm")
            needleRPM.Background.Color = Color.DarkSlateGray
            needleRPM.BorderLabelName = "NeedleValue"
            needleRPM.LabelFormatMask = "#,##0 RPM"
            needleRPM.Value = 2500
             
            ' Add the needle to the meter
            meterRPM.NeedleList.Add(needleRPM)
             
            ' Add the meter to the widget
            Me.GsNetWinWidget1.Widget.DeviceList.Add(meterRPM)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZone.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZone.IsPointInZone(System.Drawing.Point,GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZone.Paint(System.Windows.Forms.PaintEventArgs,GraphicsServer.GSNet.Widgets.AngularScaleDevice)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZone.WriteImageMapInfo(System.Web.UI.HtmlTextWriter,System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZone.ToString">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterZone.ImageMapUrl">
            <summary>Sets and gets the URL to load when this object is clicked on.</summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterZone.ImageMapExtraString">
            <summary>Sets and gets an extra string to embed in the object's image map.</summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterZone.TooltipText">
            <summary>Sets and gets the text to display in the popup tooltip.</summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterZone.Name">
            <summary>Sets and gets the name of the MeterZone.</summary>
            <value>string</value>
            <remarks>
            The name is not displayed but can be used to uniquely identify a MeterZone. This
            name can then be used to find a MeterZone in the list.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterZone.IsVisible">
            <summary>
            Specifies whether the MeterZone is visible or not.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterZone.Outline">
            <summary>Gets the Line object that provides the outline for the MeterZone.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
            <remarks>
            This property exists to provide access to the properties of the underlying Line
            object.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterZone.OutlineEnabled">
            <summary>Determines whether an outline is drawn around the MeterZone.</summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterZone.Background">
            <summary>Gets the Background object that fills the MeterZone.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <remarks>
            This property exists to provide access to the properties of the underlying
            Background object.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterZone.ValueStart">
            <summary>Sets and gets the starting value of the zone.</summary>
            <value>double</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.MeterZone.ValueEnd">ValueEnd Property</seealso>
            <example>
                The following code fragment configures a meter zone that begins at 5000 on the
                scale and ends at 6000.
                <code lang="CS" title="C#">
            // Create a meter zone and configure it
            MeterZone zoneRed = new MeterZone();
            zoneRed.Background.Color = Color.Red;
            zoneRed.ThicknessPercent = 8;
            zoneRed.ValueStart = 5000;
            zoneRed.ValueEnd = 6000;
                </code>
            	<code lang="VB" title="VB">
            ' Create a meter zone and configure it
            Dim zoneRed As MeterZone = New MeterZone
            zoneRed.Background.Color = Color.Red
            zoneRed.ThicknessPercent = 8
            zoneRed.ValueStart = 5000
            zoneRed.ValueEnd = 6000
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterZone.ValueEnd">
            <summary>Sets and gets the ending value of the zone.</summary>
            <value>double</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.MeterZone.ValueStart">ValueStart Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterZone.ThicknessPercent">
            <summary>Sets and gets the zone's thickness.</summary>
            <value>double</value>
            <remarks>
            The zone thickness value is an integer representing a percentage of the meter's
            radius. A value of 100 percent means that the zone will paint from the scale to the
            center of the meter.
            </remarks>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.MeterZoneList">
            <summary>
            This class is simply a wrapper around the array list that contains the
            list of MeterZone objects.
            </summary>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Meter.MeterZoneList">MeterZoneList Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZoneList.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZoneList.#ctor(System.Collections.ICollection)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZoneList.Add(System.Object)">
            <summary>Adds a MeterZone object to the list.</summary>
            <returns>Index in the list of the added MeterZone.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.MeterZoneList.SetMeterZoneAt(System.Int32,GraphicsServer.GSNet.Widgets.MeterZone)">SetMeterZoneAt Method</seealso>
            <example>
            	<code lang="CS" title="C# Example">
            // Create a meter zone and configure it 
            MeterZone zoneRed = new MeterZone(); 
            zoneRed.Background.Color = Color.Red; 
            zoneRed.ThicknessPercent = 8; 
            zoneRed.ValueStart = 5000; 
            zoneRed.ValueEnd = 6000; 
              
            // Add the zone to the meter 
            meterRPM.MeterZoneList.Add(zoneRed);
                </code>
            	<code lang="VB" title="Visual Basic Example">
            ' Create a meter zone and configure it
            Dim zoneRed As MeterZone = New MeterZone
            zoneRed.Background.Color = Color.Red
            zoneRed.ThicknessPercent = 8
            zoneRed.ValueStart = 5000
            zoneRed.ValueEnd = 6000
             
            ' Add the zone to the meter
            meterRPM.MeterZoneList.Add(zoneRed)
                </code>
            </example>
            <param name="value">MeterZone to add.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZoneList.Remove(System.Object)">
            <summary>Removes a MeterZone from the collection.</summary>
            <remarks>The object passed in should be a MeterZone object.</remarks>
            <param name="value">The MeterZone object to remove from the 
            MeterZoneList.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZoneList.SetMeterZoneAt(System.Int32,GraphicsServer.GSNet.Widgets.MeterZone)">
            <summary>Inserts a MeterZone object at the specified index in the list.</summary>
            <returns>Index at which the MeterZone was set in the list.</returns>
            <remarks>
            If a MeterZone exists at that index, it will be replaced with the specified
            MeterZone. If the index does not exist in the list, then the MeterZone will be added to
            the end of the list.
            </remarks>
            <param name="index">zero based index.</param>
            <param name="meterZone">MeterZone object to set into the list.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZoneList.GetMeterZone(System.Int32)">
            <summary>Gets the MeterZone object at the specified index in the list.</summary>
            <returns>MeterZone object or null if index does not contains an object.</returns>
            <param name="index">zero based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZoneList.GetMeterZone(System.String)">
            <summary>
            Gets the MeterZone object that contains the specified string in its Name
            property.
            </summary>
            <remarks>
            This method searches the MeterZones in the list and returns the first one 
            that contains the specified name in its 
            <see cref="P:GraphicsServer.GSNet.Widgets.MeterZone.Name">Name</see> property.
            </remarks>
            <returns>MeterZone object or null if not found.</returns>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.MeterZone.Name">Name Property (GraphicsServer.GSNet.Widgets.MeterZone)</seealso>
            <param name="name">The name of the MeterZone to return.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZoneList.RemoveMeterZone(System.Int32)">
            <summary>Removes the MeterZone at the specified index.</summary>
            <param name="index">zero based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZoneList.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>Write all the MeterZone objects currently in the list out to XML.</summary>
            <returns>This method will return an XmlElement if properties where written. A null value will be returned if there were no properties to write.</returns>
            <param name="doc">This paramenter is the XmlDocument context used to create the new element node.</param>
            <param name="flags">Template flags to control template writing. See  <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZoneList.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Read all the MeterZone objects that are children of the passed in Xml Node.
            </summary>
            <param name="node">XmlNode that contains the MeterZoneList properties.</param>
            <param name="flags">Template flags to control template writing. See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterZoneList.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.ScaleOffsetDirection">
            <summary>
            The ScaleOffsetDirection enumeration is used to offset the center point of
            the arc for an angular device in order to provide better visual positioning
            in cases where the device scale is not a complete circle.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScaleOffsetDirection.Center">
            <summary>
            Works best for device scales that have a sweep angle
            greater than 180.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScaleOffsetDirection.Left">
            <summary>
            Works best for device scales that have a start angle of
            270 and a sweep angle of 180.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScaleOffsetDirection.Right">
            <summary>
            Works best for device scales that have a start angle of
            90 and a sweep angle of 180.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScaleOffsetDirection.Top">
            <summary>
            Works best for device scales that have a start angle of
            0 and a sweep angle of 180.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScaleOffsetDirection.Bottom">
            <summary>
            Works best for device scales that have a start angle of
            180 and a sweep angle of 180.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScaleOffsetDirection.TopLeft">
            <summary>
            Works best for device scales that have a start angle of
            0 and a sweep angle of 90.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScaleOffsetDirection.TopRight">
            <summary>
            Works best for device scales that have a start angle of
            90 and a sweep angle of 90.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScaleOffsetDirection.BottomLeft">
            <summary>
            Works best for device scales that have a start angle of
            270 and a sweep angle of 90.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScaleOffsetDirection.BottomRight">
            <summary>
            Works best for device scales that have a start angle of
            180 and a sweep angle of 90.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.AngularScaleDevice">
            <base>GraphicsServer.GSNet.Widgets.ScaleDeviceBase</base>
            <summary>
            This is the base class for all angular scale devices.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.ScaleDeviceBase">
            <summary>This is the base class for any device that has a scale.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.DeviceBase">
            <summary>This is the base class for all device objects.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceBase.GetDeviceType">
            <summary>
            Gets the object's device type. 
            </summary>
            <remarks>
            This abstract method must be 
            implemented by any derived device object. If the device is an external
            custom device, then return the Custom device type enum.
            </remarks>
            <returns><see cref="T:GraphicsServer.GSNet.Widgets.DeviceType"/></returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceBase.GetScaleValue(System.Drawing.PointF)">
            <summary>
            Gets the scale value based on the supplied point. 
            </summary>
            <remarks>
            The supplied point must be relative to the upper-left corner
            of the device, which is (0,0).
            </remarks>
            <param name="devicePoint"></param>
            <returns></returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceBase.Paint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceBase.IsPointInObject(System.Drawing.Point,GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceBase.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceBase.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">
            <summary>Reads object properties from an XmlNode.</summary>
            <param name="node">XmlNode that contains the properties of the object.</param>
            <param name="flags">Template flags to control template reading.  See <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceBase.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags,System.String)">
            <summary>Writes object properties to an XmlElement.</summary>
            <returns>This method will return an XmlElement if properties where written. A null value will be returned if there were no properties to write.</returns>
            <param name="doc">This paramenter is the XmlDocument context used to create the new element node.</param>
            <param name="flags">Template flags to control template writing.  See <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.DeviceBase.TooltipText">
            <summary>
            Indicates the text to display in the popup tooltip.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.DeviceBase.DeviceName">
            <summary>Sets or gets a user-assigned device name.</summary>
            <value>string</value>
            <remarks>
            Multiple devices can be displayed in a widget. The DeviceName property is useful
            for quickly finding a particular device in the DeviceList.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.DeviceList.GetDevice(System.String)">GetDevice Method</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.DeviceBase.MarginLeft">
            <summary>
            Sets and gets the left margin inside the device.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.DeviceBase.MarginRight">
            <summary>
            Sets and gets the right margin inside the device.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.DeviceBase.MarginTop">
            <summary>
            Sets and gets the top margin inside the device.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.DeviceBase.MarginBottom">
            <summary>
            Sets and gets the bottom margin inside the device.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.DeviceBase.BorderLabelList">
            <summary>
            Gets the WidgetBorderLabelList object that contains the WidgetBorderLabel objects currently
            attached to the device. 
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.WidgetBorderLabelList"/></value>
            <remarks>
            This property exists to provide access to the properties
            and methods of the underlying WidgetBorderLabelList object.
            See the <see cref="T:GraphicsServer.GSNet.Widgets.WidgetBorderLabelList"/> class
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.WidgetBorderLabelList">WidgetBorderLabelList Class</seealso>
            <example>
                The following code fragment creates a WidgetBorderLabel object and adds it to the
                a meter device's border label list. 
                <code lang="CS" title="C# Example">
            //Create and configure a meter device
            Meter meterWind = new Meter("Wind");
            .
            .
            .
            //Create a border label and add it to the meter's border label collection
            WidgetBorderLabel labelTitle = new WidgetBorderLabel();
            labelTitle.Text = meterWind.DeviceName;
            labelTitle.RelativeLocation = RelativeLocation.BottomMiddle;
            int indexLabelTitle = meterWind.BorderLabelList.Add(labelTitle);
                </code>
            	<code lang="VB" title="VB Example">
            'Create and configure a meter device
            Dim meterWind As Meter = New Meter("Wind")
            .
            .
            .
            'Create a border label and add it to the meter's border label collection
            Dim labelTitle As WidgetBorderLabel = New WidgetBorderLabel
            labelTitle.Text = meterWind.DeviceName
            labelTitle.RelativeLocation = RelativeLocation.BottomMiddle
            Dim indexLabelTitle As Integer = meterWind.BorderLabelList.Add(labelTitle)
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.DeviceBase.AutoSize">
            <summary>
            Controls whether the device automatically resizes itself to best fit within the
            available area.
            </summary>
            <value>bool</value>
            <remarks>
            The default setting is false. When AutoSize is set to true, the device ignores
            the settings for the MarginLeft, MarginRight, MarginTop, and MarginBottom properties
            and recalculates smaller margins that still allow room for the device and its labels.
            This feature is especially useful for small devices.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.#ctor(System.String)">
            <summary>
            Constructs an instance of this type and sets the string argument in the
            DeviceName property.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.GetScaleLabel(System.Double)">
            <summary>Retrieves the scale label for the specified value.</summary>
            <remarks>The returned value should be formatted and ready to draw on the device.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.ScaleLabelGenerator">
            <summary>
            Sets and gets an instance of a user-defined class that will generate 
            axis labels for the visible tick marks. 
            </summary>
            <remarks>
            This property can be used to implement a label generator of your own design. 
            The object assigned to the property must support the <see cref="T:GraphicsServer.GSNet.Charting.IAxisLabelGenerator"/> 
            interface. If this object is present, then the axis label generator will get 
            first try at creating a label. 
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.IAxisLabelGenerator"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.ScaleLabelProperties">
            <summary>
            	Gets the TextPainter object that controls how axis labels are drawn. This
                property provides access to the properties of the underlying TextPainter
                object.
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.TextPainter"/> object for 
            specific property information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TextPainter"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TextPainter">TextPainter Class</seealso>
            <example>
                The following code fragment sets ScaleLabelProperties of a meter device.
                <code lang="CS" title="C# Example">
            //Create a meter device and configure it 
            Meter meterClock = new Meter("clock");
            ...
            meterClock.ScaleLabelProperties.Color = Color.MidnightBlue;
            meterClock.ScaleLabelProperties.Font = new Font("Tahoma", 9, FontStyle.Bold);
            meterClock.ScaleLabelProperties.TextRenderingMode = System.Drawing.Text.TextRenderingHint.SystemDefault;
                </code>
            	<code lang="VB" title="VB Example">
            'Create a meter device and configure it 
            Dim meterClock As Meter = New Meter("clock")
            ...
            meterClock.ScaleLabelProperties.Color = Color.MidnightBlue
            meterClock.ScaleLabelProperties.Font = New Font("Tahoma", 9, FontStyle.Bold)
            meterClock.ScaleLabelProperties.TextRenderingMode = System.Drawing.Text.TextRenderingHint.SystemDefault
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.ScaleLabelOffset">
            <summary>Sets and gets the offset for scale labels from the scale.</summary>
            <value>int</value>
            <remarks>
            This value is an integer. There is no real upper limit to this value, but if it
            is large enough the labels will paint outside the gauge area and hence not be
            visible.
            </remarks>
            <example>
                The following code fragment sets the ScaleLabelOffset property for a meter
                device so that the labels draw inside the scale's arc.
                <code lang="CS" title="C#">
            //Create a meter device and configure it 
            Meter meterClock = new Meter("clock");
            ...
            meterClock.ScaleLabelOffset = -30;
                </code>
            	<code lang="VB" title="VB">
            'Create a meter device and configure it 
            Dim meterClock As Meter = New Meter("clock")
            ...
            meterClock.ScaleLabelOffset = -30
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.ScaleLabelFormatMask">
            <summary>Sets and gets the mask for formatting scale labels.</summary>
            <value>string</value>
            <remarks>
            This property accepts any valid .NET format string that is accepted by the
            ToString() method. See the .NET documentation for more information.
            </remarks>
            <example>
            	<code lang="CS" title="C#">
            //Create a meter device and configure it 
            Meter meterClock = new Meter("clock");
            ...
            meterClock.ScaleLabelFormatMask = "#0";
                </code>
            	<code lang="VB" title="VB">
            'Create a meter device and configure it 
            Dim meterClock As Meter = New Meter("clock")
            ...
            meterClock.ScaleLabelFormatMask = "#0"
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.ScaleLabelsOn">
            <summary>Indicates whether scale labels are turned on.</summary>
            <value>bool</value>
            <remarks>The default setting is true (on).</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.ScaleValueMin">
            <summary>Sets and gets the minumum scale value.</summary>
            <value>double</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.ScaleValueMax">ScaleValueMax Property</seealso>
            <remarks>The default value is zero.</remarks>
            <example>
                This example creates a meter device with a scale that ranges from -5 to +5.
                <code lang="CS" title="C# Example">
            // Create a meter device
            Meter meterOhms = new Meter("Ohms");
            meterOhms.Location = new Point(5, 5);
            meterOhms.Size = new Size(600, 400);
             
            // Set up the scale
            meterOhms.StartAngle = 200;
            meterOhms.SweepAngle = 140;
            meterOhms.ScaleOffsetDirection = ScaleOffsetDirection.Bottom;
            meterOhms.ScaleValueMax = 5;
            meterOhms.ScaleValueMin = -5;
            meterOhms.ScaleLabelFormatMask = "#0";
            meterOhms.MajorTicks = 11;
            meterOhms.MinorTicks = 9;
                </code>
            	<code lang="VB" title="Visual Basic Example">
            ' Create a meter device
            Dim meterOhms As Meter = New Meter("Ohms")
            meterOhms.Location = New Point(5, 5)
            meterOhms.Size = New Size(600, 400)
             
            ' Set up the scale
            meterOhms.StartAngle = 200
            meterOhms.SweepAngle = 140
            meterOhms.ScaleOffsetDirection = ScaleOffsetDirection.Bottom
            meterOhms.ScaleValueMax = 5
            meterOhms.ScaleValueMin = -5
            meterOhms.ScaleLabelFormatMask = "#0"
            meterOhms.MajorTicks = 11
            meterOhms.MinorTicks = 9
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.ScaleValueMax">
            <summary>Sets and gets the maximum scale value.</summary>
            <value>double</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.ScaleValueMin">ScaleValueMin Property</seealso>
            <example>
            	<code lang="CS" title="C#">
            //Create a meter device and configure it 
            Meter meterClock = new Meter("clock");
            ...
            meterClock.ScaleValueMax = 12;
            meterClock.ScaleValueMin = 0;
                </code>
            	<code lang="VB" title="VB">
            'Create a meter device and configure it 
            Dim meterClock As Meter = New Meter("clock")
            ...
            meterClock.ScaleValueMax = 12
            meterClock.ScaleValueMin = 0
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.MajorTicks">
            <summary>Sets and gets the total number of major ticks to display.</summary>
            <value>int</value>
            <remarks>This value must be greater than one for tick marks to display.</remarks>
            <example>
            	<code lang="CS" title="C#">
            //Create a meter device and configure it 
            Meter meterClock = new Meter("clock");
            ...
            meterClock.MajorTicks = 13;
            meterClock.MinorTicks = 4;
                </code>
            	<code lang="VB" title="VB">
            'Create a meter device and configure it 
            Dim meterClock As Meter = New Meter("clock")
            ...
            meterClock.MajorTicks = 13
            meterClock.MinorTicks = 4
                </code>
            </example>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.MinorTicks">MinorTicks Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.MinorTicks">
            <summary>
            Sets and gets the number of minor ticks to display between each major
            tick.
            </summary>
            <value>int</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.MajorTicks">MajorTicks Property</seealso>
            <example>
                This example creates a scale with a tick mark at every tenth.
                <code lang="CS" title="C# Example">
            meterOhms.ScaleValueMax = 5;
            meterOhms.ScaleValueMin = -5;
            meterOhms.MajorTicks = 11;
            meterOhms.MinorTicks = 9;
                </code>
            	<code lang="VB" title="Visual Basic Example">
            meterOhms.ScaleValueMax = 5
            meterOhms.ScaleValueMin = -5
            meterOhms.MajorTicks = 11
            meterOhms.MinorTicks = 9
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.TickSize">
            <summary>Sets and gets the size of the tick marks.</summary>
            <value>int</value>
            <remarks>
            The minor ticks marks will always be half the size of the major tick
            marks.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.TickDrawStyle">
            <summary>
            Determines where the tick marks draw with respect to the scale.  
            </summary>
            <remarks>
            Tick marks can draw through, above, or below the scale.  
            See the <see cref="T:GraphicsServer.GSNet.Charting.TickDrawStyle"/> enumeration
            for more information.</remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TickDrawStyle"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TickDrawStyle">TickDrawStyle Enumeration</seealso>
            <example>
            	<code lang="CS" title="C#">
            meterOhms.TickDrawStyle = TickDrawStyle.ThroughAxis;
                </code>
            	<code lang="VB" title="VB">
            meterOhms.TickDrawStyle = TickDrawStyle.ThroughAxis
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.TickLineProperties">
            <summary>
            Gets the Line object that draws tick marks for the scale.
            </summary>
            <remarks>
            This property exists to provide access to the properties of the underlying Line object.
            See the <see cref="T:GraphicsServer.GSNet.Charting.Line"/> class for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.TickScaleLineOn">
            <summary>Determines whether the tick scale line is visible.</summary>
            <value>bool</value>
            <remarks>
            The tick scale line is a line that draws from one end of the scale to the other.
            If you turn the line off by setting this property to false, tick marks will still draw
            as long as you have set MajorTicks to a value greater than zero.
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.AngularScaleDevice.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.AngularScaleDevice.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.AngularScaleDevice.AutoReSize">
            Derived classes must implement the AutoReSize method so that the
            device will be best fit into the rectangle its contained within.
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.AngularScaleDevice.GetScaleValue(System.Drawing.PointF)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.AngularScaleDevice.ReverseScale">
            <summary>Determines whether scale values draw in the reverse direction.</summary>
            <value>bool</value>
            <remarks>If this value is true the scale values will be reversed.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.AngularScaleDevice.StartAngle">
            <summary>
            Sets and gets the start angle for the scale. 
            </summary>
            <remarks>
            Valid values can range from 0 to 360. Angles are measured in
            a clockwise direction with 0 degrees at three o'clock.
            </remarks>
            <value>int</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.AngularScaleDevice.SweepAngle">SweepAngle Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.AngularScaleDevice.SweepAngle">
            <summary>
            Sets and gets the span of the scale.  
            </summary>
            <remarks>
            Valid values can range from 0 to 360. Angles are measured in a 
            clockwise direction with 0 degrees at three o'clock.
            <para>
            The scale will start at the specified 
            <see cref="P:GraphicsServer.GSNet.Widgets.AngularScaleDevice.StartAngle"/>
            and extend the number of degrees specified by this property.
            </para>
            </remarks>
            <value>int</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.AngularScaleDevice.StartAngle">StartAngle Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.AngularScaleDevice.ScaleOffsetDirection">
            <summary>
            Sets and gets the relative location of the scale.
            </summary>
            <value><see cref="P:GraphicsServer.GSNet.Widgets.AngularScaleDevice.ScaleOffsetDirection"/></value>
            <remarks>
            The setting for this property determines where the center point of the scale's
            arc is located. When set to ScaleOffsetDirection.Center, the center point of the
            arc is in the center of the device's drawing area. When set to ScaleOffsetDirection.TopLeft,
            the center point of the arc is the top left corner of the device's drawing area.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.AngularScaleDevice.ScaleOffsetDirection">ScaleOffsetDirection Enumeration</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.Meter">
            <summary>
            Represents a meter device.
            </summary>
            <remarks>
            A meter device has an angular scale, which can span from a partial arc all 
            the way to a full circle. Like gauges, meters can have multiple needles, 
            and you can set the width and color of each needle. Meters can also have zones, 
            which can be defined to span a value range on the meter. There can be multiple 
            zones defined for a meter, each with a different range, color and depth.
            </remarks>
            <example>
            The following code fragment creates a meter device, configures it to simulate
            a clock face, and adds it to the widget's device list.
            	<code lang="CS" title="C# Example">
            using GraphicsServer.GSNet.Widgets;
            using GraphicsServer.GSNet.Charting;
            ...
            //Create and configure the meter
            Meter meterClock = new Meter("clock");
            meterClock.Location = new Point(0, 0);
            meterClock.Size = new Size(700, 400);
            meterClock.MajorTicks = 13;
            meterClock.MinorTicks = 4;
            meterClock.ScaleLabelFormatMask = "#0";
            meterClock.ScaleLabelOffset = -30;
            meterClock.ScaleValueMax = 12;
            meterClock.StartAngle = 270;
            meterClock.SweepAngle = 360;
             
            //Add the meter to the widget's device collection
            int indexClock = this.gsNetWinWidget1.Widget.DeviceList.Add(meterClock);
                </code>
            	<code lang="VB" title="VB Example">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.Widgets
            ...
            'Create a meter device and configure it 
            Dim meterClock As Meter = New Meter("clock")
            meterClock.Location = New Point(0, 0)
            meterClock.Size = New Size(700, 400)
            meterClock.MajorTicks = 13
            meterClock.MinorTicks = 4
            meterClock.ScaleLabelFormatMask = "#0"
            meterClock.ScaleLabelOffset = -30
            meterClock.ScaleValueMax = 12
            meterClock.StartAngle = 270
            meterClock.SweepAngle = 360
             
            'Add the meter to the widget's device collection
            Dim indexClock As Integer = Me.GsNetWinWidget1.Widget.DeviceList.Add(meterClock)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Meter.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Meter.#ctor(System.String)">
            <summary>
            Constructs an instance of this type and sets the string in the DeviceName
            property.
            </summary>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.DeviceBase.DeviceName">DeviceName Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Meter.GetDeviceType">
            <summary>
            Returns the object's device type.
            </summary>
            <returns><see cref="T:GraphicsServer.GSNet.Widgets.DeviceType"/></returns>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.DeviceType">DeviceType Enumeration</seealso>
            <example>
                This example iterates through the widget's device list, looking for a meter device.
                If it finds one, it does something useful to it. 
                <code lang="CS" title="C# Example">
            foreach (DeviceBase device in this.gsNetWinWidget1.Widget.DeviceList)
            {
                // Get the meter device 
                if (device.GetDeviceType() == DeviceType.Meter)
                {
                    Meter m = (Meter) device;
                    
                    // Do something useful
                }
            }
                </code>
            	<code lang="VB" title="Visual Basic Example">
            For Each device As DeviceBase In Me.GsNetWinWidget1.Widget.DeviceList
                ' Get the meter device
                If (device.GetDeviceType = DeviceType.Meter) Then
             
                    Dim m As Meter = CType(device, Meter)
                    
                    ' Do something useful
             
                End If
            Next
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Meter.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Meter.MeterZoneList">
            <value><see cref="T:GraphicsServer.GSNet.Widgets.MeterZoneList"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.MeterZone">MeterZone Class</seealso>
            <summary>
            Gets the MeterZoneList object that maintains the collection of meter zones
            associated with this meter.
            </summary>
            <remarks>
            This property exists to provide access to the properties and methods of the
            underlying MeterZoneList object. See the <see cref="T:GraphicsServer.GSNet.Widgets.MeterZoneList"/> class
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.MeterZoneList">MeterZoneList Class</seealso>
            <example>
                The example below adds a single zone to a meter device. 
                <code lang="CS" title="C#">
            // Create a meter zone and configure it
            MeterZone zoneRed = new MeterZone();
            zoneRed.Background.Color = Color.Red;
            zoneRed.ThicknessPercent = 8;
            zoneRed.ValueStart = 5000;
            zoneRed.ValueEnd = 6000;
             
            // Add the zone to the meter
            meterRPM.MeterZoneList.Add(zoneRed);
                </code>
            	<code lang="VB" title="VB">
            ' Create a meter zone and configure it
            Dim zoneRed As MeterZone = New MeterZone
            zoneRed.Background.Color = Color.Red
            zoneRed.ThicknessPercent = 8
            zoneRed.ValueStart = 5000
            zoneRed.ValueEnd = 6000
             
            ' Add the zone to the meter
            meterRPM.MeterZoneList.Add(zoneRed)
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Meter.NeedleList">
            <summary>
            Gets the MeterNeedleList object that maintains the collection of needles associated
            with this meter.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.MeterNeedleList"/></value>
            <remarks>
            This property exists to provide access to the properties and methods of the
            underlying MeterNeedleList object. See the <see cref="T:GraphicsServer.GSNet.Widgets.MeterNeedleList"/>
            class for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.MeterNeedle">MeterNeedle Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.MeterNeedleList">MeterNeedleList Class</seealso>
            <example>
                The following code fragment creates two needles to serve as hands on a meter
                device configured to represent a clock. (Code for creating the meter device has
                been omitted.)
                <code lang="CS" title="C# Example">
            //Create a needle to show the hour
            MeterNeedle needleHour = new MeterNeedle("hour");
            needleHour.Background.Color = Color.Black;
            needleHour.Length = 75;
            needleHour.WidthAtBase = 6;
            needleHour.Value = 4;
             
            //Create a needle to show the minute
            MeterNeedle needleMinute = new MeterNeedle("minute");
            needleMinute.Background.Color = Color.Beige;
            needleMinute.Length = 100;
            needleMinute.WidthAtBase = 4;
            needleMinute.Value = 30/5;
             
            //Add the needles to the meter device
            Meter meterClock = (Meter) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("clock");
            meterClock.NeedleList.Add(needleHour);
            meterClock.NeedleList.Add(needleMinute);
                </code>
            	<code lang="VB" title="VB Example">
            'Create a needle to show the hour
            Dim needleHour As MeterNeedle = New MeterNeedle("hour")
            needleHour.Background.Color = Color.Black
            needleHour.Length = 75
            needleHour.WidthAtBase = 6
            needleHour.Value = 4
             
            'Create a needle to show the minute
            Dim needleMinute As MeterNeedle = New MeterNeedle("minute")
            needleMinute.Background.Color = Color.Beige
            needleMinute.Length = 100
            needleMinute.WidthAtBase = 4
            needleMinute.Value = 30 \ 5
             
            'Add the needles to the meter device
            Dim meterClock As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("clock"), Meter)
            meterClock.NeedleList.Add(needleHour)
            meterClock.NeedleList.Add(needleMinute)
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Meter.BorderOutline">
            <summary>
            Gets the BorderOutline object that provides border and edge effects surrounding the meter scale.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.BorderOutline"/></value>
            <example>
                The example below adds a border outline with a gradient drop shadow when the user
                clicks a button.
                <code lang="CS" title="[CS Example]">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.Widgets;
             
            private void btnOutline_Click(object sender, System.EventArgs e)
            {
                // get reference to meter
                Meter meter1 = this.gsNetWinWidget1.Widget.DeviceList[0] as Meter;
             
                /* 
                 * Note: If ScaleLabelsOn = false or LabelOffset &lt;= 0 
                 *       then outline will exactly fit the meter circle.
                 * 
                 *       Otherwise if ScaleLabelsOn = true and LabelOffset &gt; 0 
                 *       then outline will surround labels.
                 */
                meter1.ScaleLabelsOn = true;
                meter1.ScaleLabelOffset = 5; 
             
                // add outline around meter
                meter1.BorderOutline.BorderType = BorderType.Simple;
                meter1.BorderOutline.SimpleColor = Color.Blue;
                meter1.BorderOutline.EdgeEffectType = EdgeEffectType.DropShadow;
                meter1.BorderOutline.DropShadowColor = Color.LightSkyBlue;
                meter1.BorderOutline.Padding = 10; // space between labels and outline
                meter1.BorderOutline.ShadowDistance = 10;
                        
                // refresh widget
                this.gsNetWinWidget1.Invalidate();
            }
                </code>
            	<code lang="VB" title="[VB Example]">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.Widgets
             
            Private Sub btnOutline_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnOutline.Click
                ' get reference to meter
                Dim meter1 As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList(0), Meter)
             
                ' Note: If ScaleLabelsOn = false or LabelOffset &lt;= 0 
                '       then outline will exactly fit the meter circle.
                ' 
                '       Otherwise if ScaleLabelsOn = true and LabelOffset &gt; 0 
                '       then outline will surround labels.
                '
                meter1.ScaleLabelsOn = True
                meter1.ScaleLabelOffset = 5
             
                ' add outline around meter
                meter1.BorderOutline.BorderType = BorderType.Simple
                meter1.BorderOutline.SimpleColor = Color.Blue
                meter1.BorderOutline.EdgeEffectType = EdgeEffectType.DropShadow
                meter1.BorderOutline.DropShadowColor = Color.LightSkyBlue
                meter1.BorderOutline.Padding = 10 ' space between labels and outline
                meter1.BorderOutline.ShadowDistance = 10
             
                ' refresh widget
                Me.GsNetWinWidget1.Invalidate()
            End Sub
                </code>
            </example>
            <remarks>
            If labels for the meter scale are turned off or displayed on the inner side of
            the scale, then the outline will exactly fit the meter circle. Otherwise, the outline
            will surround the labels as well as the meter circle.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.BorderOutline">BorderOutline Class</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.MeterNeedleType">
            <summary>Enumerates the types of meter needles supported.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.MeterNeedleType.Default">
            <summary>
            The needle has a half-circle at the base, and extends to a point at the end.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.MeterNeedleType.PinWithCap">
            <summary>
            The needle is pin-shaped and has a circle, or cap, at the base.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.MeterNeedleType.PinWithBaseCapEndCap">
            <summary>
            The needle is pin-shaped and has a circle, or cap, at the base and also at the end.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.EndCapLocation">
            <summary>Enumerates the location, or position, of the end cap
            when MeterNeedleType is PinWithBaseCapEndCap.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.EndCapLocation.InsideScale">
            <summary>
            The end cap in contained within the meter scale.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.EndCapLocation.OnScale">
            <summary>
            The end cap is half within the meter scale and half outside the meter
            scale.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.EndCapLocation.OutsideScale">
            <summary>
            The end cap is outside the meter scale.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.MeterNeedle">
            <summary>Represents a needle for a meter device.</summary>
            <example>
                The following code fragment creates two needles to serve as hands on a meter
                device configured to represent a clock. (Code for creating the meter device has
                been omitted.)
                <code lang="CS" title="C# Example">
            //Create a needle to show the hour
            MeterNeedle needleHour = new MeterNeedle("hour");
            needleHour.Background.Color = Color.Black;
            needleHour.Length = 75;
            needleHour.WidthAtBase = 6;
            needleHour.Value = 4;
             
            //Create a needle to show the minute
            MeterNeedle needleMinute = new MeterNeedle("minute");
            needleMinute.Background.Color = Color.Beige;
            needleMinute.Length = 100;
            needleMinute.WidthAtBase = 4;
            needleMinute.Value = 30/5;
             
            //Add the needles to the meter device
            Meter meterClock = (Meter) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("clock");
            meterClock.NeedleList.Add(needleHour);
            meterClock.NeedleList.Add(needleMinute);
                </code>
            	<code lang="VB" title="VB Example">
            'Create a needle to show the hour
            Dim needleHour As MeterNeedle = New MeterNeedle("hour")
            needleHour.Background.Color = Color.Black
            needleHour.Length = 75
            needleHour.WidthAtBase = 6
            needleHour.Value = 4
             
            'Create a needle to show the minute
            Dim needleMinute As MeterNeedle = New MeterNeedle("minute")
            needleMinute.Background.Color = Color.Beige
            needleMinute.Length = 100
            needleMinute.WidthAtBase = 4
            needleMinute.Value = 30 \ 5
             
            'Add the needles to the meter device
            Dim meterClock As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("clock"), Meter)
            meterClock.NeedleList.Add(needleHour)
            meterClock.NeedleList.Add(needleMinute)
                </code>
            </example>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Meter">Meter Class</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.NeedleBase">
            <summary>This is the base class for all device needle classes.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleBase.IsPointInNeedle(System.Drawing.Point,GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleBase.Paint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleBase.WriteImageMapInfo(System.Web.UI.HtmlTextWriter,System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.ImageMapUrl">
            <summary>
            Indicates the URL to load when this object is clicked on.
            </summary>
            <value>string</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.NeedleBase.ImageMapExtraString">ImageMapExtraString Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.ImageMapExtraString">
            <summary>Specifies an extra string to embed in the object's image map.</summary>
            <value>string</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.NeedleBase.ImageMapUrl">ImageMapUrl Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.TooltipText">
            <summary>
            Indicates the text to display in the popup tooltip.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.NeedleOffset">
            <summary>Sets or gets the offset of the point of the needle from the scale.</summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.Value">
            <summary>Sets and gets the value of the needle.</summary>
            <value>double</value>
            <example>
                The following code fragment sets the needle value for each of four meter
                devices.
                <code lang="CS" title="C# Example">
            // Calculate values
            double Ohms = .2;
            double Volts = 8.4;
            double Amps = Volts/Ohms;
            double Watts = Volts * Amps;
             
            // Get the devices
            Meter meterOhms = (Meter) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("Ohms");
            Meter meterVolts = (Meter) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("Volts");
            Meter meterAmps = (Meter) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("Amps");
            Meter meterWatts = (Meter) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("Watts");
             
            // Get the first needle in each device's list, and set its value
            meterOhms.NeedleList.GetNeedle(0).Value = Ohms;
            meterVolts.NeedleList.GetNeedle(0).Value = Volts;
            meterAmps.NeedleList.GetNeedle(0).Value = Amps;
            meterWatts.NeedleList.GetNeedle(0).Value = Watts;
                </code>
            	<code lang="VB" title="VB Example">
            ' Calculate values
            Dim Ohms As Double = 0.2
            Dim Volts As Double = 8.4
            Dim Amps As Double = Volts / Ohms
            Dim Watts As Double = Volts * Amps
             
            ' Get the devices
            Dim meterOhms As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("Ohms"), Meter)
            Dim meterVolts As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("Volts"), Meter)
            Dim meterAmps As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("Amps"), Meter)
            Dim meterWatts As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("Watts"), Meter)
             
            ' Get the first needle in each device's list, and set its value
            meterOhms.NeedleList.GetNeedle(0).Value = Ohms
            meterVolts.NeedleList.GetNeedle(0).Value = Volts
            meterAmps.NeedleList.GetNeedle(0).Value = Amps
            meterWatts.NeedleList.GetNeedle(0).Value = Watts
                </code>
            </example>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.NeedleList">NeedleList Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.DeviceList">DeviceList Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.NeedleName">
            <summary>Sets and gets a user-defined needle name.</summary>
            <value>string</value>
            <remarks>
            This name is useful for quickly finding a particular needle object if there is a
            list of needles.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.IsVisible">
            <summary>
            Specifies whether the needle is visible or not.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.Background">
            <summary>Gets the Background object that fills the needle.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
            <remarks>
            This property exists to provide access to the properties of the underlying
            Background object.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.Outline">
            <summary>Gets the Line object that provides the outline for the needle.</summary>
            <remarks>
            This property exists to provide access to the properties of the underlying Line object.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.OutlineEnabled">
            <summary>Enables and disables drawing of an outline around the needle.</summary>
            <value>bool</value>
            <remarks>Set to true to draw an outline.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.LabelOn">
            <summary>Enables and disables display of the needle value label.</summary>
            <value>bool</value>
            <remarks>
            	<para>Set to true to show the value of the needle in a label. You can specify a
                format mask using the LabelFormatMask property.</para>
            	<para>If you simply want to show the name of the needle, set the NeedleNameOn
                property instead.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.NeedleBase.LabelFormatMask">LabelFormatMask Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.NeedleBase.NeedleNameOn">NeedleNameOn Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.NeedleNameOn">
            <value>bool</value>
            <remarks>
            Set to true to display the text of the NeedleName property in the needle's label.
            If you want to display the needle's value, use the LabelOn property instead.
            </remarks>
            <summary>Enables and disables display of the needle name in a label.</summary>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.NeedleBase.NeedleName">NeedleName Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.NeedleBase.LabelOn">LabelOn Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.LabelOffset">
            <summary>Sets and gets the offset of the needle label from the needle.</summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.LabelProperties">
            <summary>Gets the TextPainter object that provides the label for the needle.
            </summary>
            <remarks>
            This property exists to provide access to the properties of the underlyingTextPainter object. 
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TextPainter">TextPainter Class</seealso>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TextPainter"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.NeedleBase.LabelFormatMask">
            <summary>Sets and gets the mask for formatting needle labels.</summary>
            <value>string</value>
            <remarks>
            This property accepts any valid .NET format string that is accepted by the
            ToString() method. See the .NET documentation for more information. If this property is
            not set, the label uses the scale's format mask.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.ScaleDeviceBase.ScaleLabelFormatMask">ScaleLabelFormatMask Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedle.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedle.#ctor(System.String)">
            <summary>
            Constructs an instance of this type and sets the string argument in the
            NeedleName property.
            </summary>
            <example>
            	<code lang="CS" title="C# Example">
            // Create a meter needle
            MeterNeedle needleOhms = new MeterNeedle("Ohms");
                </code>
            	<code lang="VB" title="Visual Basic Example">
            ' Create a meter needle
            Dim needleOhms As MeterNeedle = New MeterNeedle("Ohms")
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedle.IsPointInNeedle(System.Drawing.Point,GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedle.WriteImageMapInfo(System.Web.UI.HtmlTextWriter,System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.Length">
            <summary>
            Sets and gets the length of the needle.  
            </summary>
            <remarks>
            This value is a percentage of the length from the center point 
            to the scale.  For example, a value of 100 draws the needle to 
            the scale. A value of 50 draws the needle half way to the scale.
            </remarks>
            <value>double</value>
            <example>
            	<code lang="CS" title="C# Example">
            //Create a needle to show the hour 
            MeterNeedle needleHour = new MeterNeedle("hour"); 
            needleHour.Background.Color = Color.Black; 
            needleHour.Length = 75; 
            needleHour.WidthAtBase = 6; 
            needleHour.Value = 4;
                </code>
            	<code lang="VB" title="Visual Basic Example">
            'Create a needle to show the hour
            Dim needleHour As MeterNeedle = New MeterNeedle("hour")
            needleHour.Background.Color = Color.Black
            needleHour.Length = 75
            needleHour.WidthAtBase = 6
            needleHour.Value = 4
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.WidthAtBase">
            <summary>This property sets and gets the width of the needle at the base.</summary>
            <value>int</value>
            <remarks>
            This value is a percentage of the length from the center point to the
            scale.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.WidthAtEnd">
            <summary>This property sets and gets the width of the needle cap at the end of the needle.</summary>
            <value>int</value>
            <remarks>
            <para>
            This value is a percentage of the radius from the center point to the
            edge of the scale.
            </para>
            <para>
            The WidthAtEnd only applies when the MeterNeedleType is PinWithBaseCapEndCap.
            </para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.BorderLabelName">
            <summary>
            The name of the BorderLabel in the device's BorderLabelList that will
            display the value of this needle.
            </summary>
            <value>string</value>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.WidgetBorderLabel">WidgetBorderLabel Class</seealso>
            <example>
                The code fragment below creates a border label to display a needle's value.
                <code lang="CS" title="C# Example">
            // Create a WidgetBorderLabel to display the needle value
            WidgetBorderLabel labelValue = new WidgetBorderLabel();
            labelValue.Name = "NeedleValue";
            labelValue.OffsetTopBottom = 10;
            labelValue.RelativeLocation = RelativeLocation.BottomMiddle;
            // Add the label to the meter
            meterOhms.BorderLabelList.Add(labelValue);
             
            // Create a meter needle
            MeterNeedle needleOhms = new MeterNeedle("Ohms");
            needleOhms.Background.Color = Color.Red;
            needleOhms.Outline.Color = Color.Red;
            needleOhms.BorderLabelName = "NeedleValue";
            needleOhms.LabelFormatMask = "#0.0 Ohms";
            needleOhms.Length = 105;
            needleOhms.WidthAtBase = 1;
            // Add the needle to the meter
            meterOhms.NeedleList.Add(needleOhms);
                </code>
            	<code lang="VB" title="Visual Basic Example">
            ' Create a WidgetBorderLabel to display the needle value
            Dim labelValue As WidgetBorderLabel = New WidgetBorderLabel
            labelValue.Name = "NeedleValue"
            labelValue.OffsetTopBottom = 10
            labelValue.RelativeLocation = RelativeLocation.BottomMiddle
            ' Add the label to the meter
            meterOhms.BorderLabelList.Add(labelValue)
             
            ' Create a meter needle
            Dim needleOhms As MeterNeedle = New MeterNeedle("Ohms")
            needleOhms.Background.Color = Color.Red
            needleOhms.Outline.Color = Color.Red
            needleOhms.BorderLabelName = "NeedleValue"
            needleOhms.LabelFormatMask = "#0.0 Ohms"
            needleOhms.Length = 105
            needleOhms.WidthAtBase = 1
            ' Add the needle to the meter
            meterOhms.NeedleList.Add(needleOhms)
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.PinWidth">
            <summary>
            Sets and gets the width of the pin portion of the needle when the MeterNeedleType
            is PinWithCap or PinWithBaseCapEndCap.
            </summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.MeterNeedleType">
            <summary>Controls the appearance of the meter needle.</summary>
            <value>MeterNeedleType</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.MeterNeedle.MeterNeedleType">MeterNeedleType Enumeration</seealso>
            <example>
                The example below changes the needle type when a button is clicked.
                <code lang="CS" title="[CS Example]">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.Widgets;
             
            private void button1_Click(object sender, System.EventArgs e)
            {
                // get reference to meter
                Meter meter1 = this.gsNetWinWidget1.Widget.DeviceList[0] as Meter;
             
                // get reference to needle 1
                MeterNeedle needle1 = meter1.NeedleList[0] as MeterNeedle;
                        
                // change to needle with base cap and end cap
                needle1.MeterNeedleType = MeterNeedleType.PinWithBaseCapEndCap;
             
                // modify base cap
                needle1.BaseCapBackground.BackgroundType = BackgroundType.Simple;
                needle1.BaseCapBackground.Color = Color.White;
                needle1.WidthAtBase = 10;
             
                // modify end cap
                needle1.EndCapBackground.BackgroundType = BackgroundType.Simple;
                needle1.EndCapBackground.Color = Color.White;
                needle1.EndCapBackground.Transparency = 50; // semi transparent
                needle1.EndCapLocation = EndCapLocation.OnScale; // centered on edge of scale
                needle1.WidthAtEnd = 7;
                        
                // refresh widget
                this.gsNetWinWidget1.Invalidate();
            }
                </code>
            	<code lang="VB" title="[VB Example]">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.Widgets
             
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
                ' get reference to meter
                Dim meter1 As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList(0), Meter)
             
                ' get reference to needle 1
                Dim needle1 As MeterNeedle = CType(meter1.NeedleList(0), MeterNeedle)
             
                ' change to needle with base cap and end cap
                needle1.MeterNeedleType = MeterNeedleType.PinWithBaseCapEndCap
             
                ' modify base cap
                needle1.BaseCapBackground.BackgroundType = BackgroundType.Simple
                needle1.BaseCapBackground.Color = Color.White
                needle1.WidthAtBase = 10
             
                ' modify end cap
                needle1.EndCapBackground.BackgroundType = BackgroundType.Simple
                needle1.EndCapBackground.Color = Color.White
                needle1.EndCapBackground.Transparency = 50 ' semi transparent
                needle1.EndCapLocation = EndCapLocation.OnScale ' centered on edge of scale
                needle1.WidthAtEnd = 7
             
                ' refresh widget
                Me.GsNetWinWidget1.Invalidate()
            End Sub
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.EndCapLocation">
            <summary>
            Controls the position of the end cap when MeterNeedleType is
            PinWithBaseCapEndCap.
            </summary>
            <value>EndCapLocation</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.MeterNeedle.EndCapLocation">EndCapLocation Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.BaseCapBackground">
            <summary>Gets the Background object that fills the base cap.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
            <remarks>
            This property exists to provide access to the properties of the underlying
            Background object.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.BaseCapOutline">
            <summary>Gets the Line object that provides the outline for the needle's base cap.</summary>
            <remarks>
            This property exists to provide access to the properties of the underlying Line object.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.EndCapBackground">
            <summary>Gets the Background object that fills the end cap.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
            <remarks>
            This property exists to provide access to the properties of the underlying
            Background object.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.EndCapOutline">
            <summary>Gets the Line object that provides the outline for the needle's end cap.</summary>
            <remarks>
            This property exists to provide access to the properties of the underlying Line object.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Line">Line Class</seealso>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.BaseCapOutlineEnabled">
            <summary>Enables and disables drawing of an outline around the needle's base cap.</summary>
            <value>bool</value>
            <remarks>Set to true to draw an outline.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.EndCapOutlineEnabled">
            <summary>Enables and disables drawing of an outline around the needle's end cap.</summary>
            <value>bool</value>
            <remarks>Set to true to draw an outline.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.AngularScaleDevice">
            <summary>
            Sets a reference to the device on which this needle will draw.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.AngularScaleDevice"/></value>
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.NeedleNameOn">
            <summary>Enables and disables display of the needle name in a label.</summary>
            <value>bool</value>
            <remarks>
            Set to true to display the text of the NeedleName property in the needle's label.
            If you want to display the needle's value, use the LabelOn property instead.
            </remarks>
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.NeedleOffset">
            <summary>Sets or gets the offset of the point of the needle from the scale.</summary>
            <value>int</value>
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.LabelOn">
            <summary>Enables and disables display of the needle value label.</summary>
            <value>bool</value>
            <remarks>
            	<para>Set to true to show the value of the needle in a label. You can specify a
                format mask using the LabelFormatMask property.</para>
            	<para>If you simply want to show the name of the needle, set the NeedleNameOn
                property instead.</para>
            </remarks>
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.LabelProperties">
            <summary>Gets the TextPainter object that provides the label for the needle.
            </summary>
            <remarks>
            This property exists to provide access to the properties of the underlyingTextPainter object. 
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.TextPainter"/></value>
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.MeterNeedle.LabelOffset">
            <summary>Sets and gets the offset of the needle label from the needle.</summary>
            <value>int</value>
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.MeterNeedleList">
            <summary>
            This class is simply a wrapper around the array list that contains the list of
            MeterNeedle objects associated with an angular scale device such as a Meter
            object.
            </summary>
            <remarks>
            Typically, you do not access a MeterNeedleList object directly. Instead, you
            should access it through a Meter object's NeedleList property.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Meter.NeedleList">NeedleList Property</seealso>
            <example>
                The fragment below creates a MeterNeedle object and adds it to a Meter object's
                needle collection. 
                <code lang="CS" title="C# Example">
            // Create a meter needle
            MeterNeedle needleOhms = new MeterNeedle("Ohms");
            needleOhms.Background.Color = Color.Red;
            needleOhms.Outline.Color = Color.Red;
            needleOhms.BorderLabelName = "NeedleValue";
            needleOhms.LabelFormatMask = "#0.0 Ohms";
            needleOhms.Length = 105;
            needleOhms.WidthAtBase = 1;
            // Add the needle to the meter
            meterOhms.NeedleList.Add(needleOhms);
                </code>
            	<code lang="VB" title="Visual Basic Example">
            ' Create a meter needle
            Dim needleOhms As MeterNeedle = New MeterNeedle("Ohms")
            needleOhms.Background.Color = Color.Red
            needleOhms.Outline.Color = Color.Red
            needleOhms.BorderLabelName = "NeedleValue"
            needleOhms.LabelFormatMask = "#0.0 Ohms"
            needleOhms.Length = 105
            needleOhms.WidthAtBase = 1
            ' Add the needle to the meter
            meterOhms.NeedleList.Add(needleOhms)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.#ctor(System.Collections.ICollection)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.Add(System.Object)">
            <summary>
            Adds a MeterNeedle object to the list.
            </summary>
            <remarks>
            This method is overridden for connecting the needle object to internal
            structures. Call this method to add a new MeterNeedle object to the list.
            </remarks>
            <returns>Index in the list of the added needle.</returns>
            <example>
                The following code fragment creates two needles to serve as hands on a meter
                device configured to represent a clock, and adds the needles to the device's needle
                list. (code for creating the meter device has been omitted.) 
                <code lang="CS" title="C# Example">
            //Create a needle to show the hour
            MeterNeedle needleHour = new MeterNeedle("hour");
            needleHour.Background.Color = Color.Black;
            needleHour.Length = 75;
            needleHour.WidthAtBase = 6;
            needleHour.Value = 4;
             
            //Create a needle to show the minute
            MeterNeedle needleMinute = new MeterNeedle("minute");
            needleMinute.Background.Color = Color.Beige;
            needleMinute.Length = 100;
            needleMinute.WidthAtBase = 4;
            needleMinute.Value = 30/5;
             
            //Add the needles to the meter device
            Meter meterClock = (Meter) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("clock");
            meterClock.NeedleList.Add(needleHour);
            meterClock.NeedleList.Add(needleMinute);
                </code>
            	<code lang="VB" title="VB Example">
            'Create a needle to show the hour
            Dim needleHour As MeterNeedle = New MeterNeedle("hour")
            needleHour.Background.Color = Color.Black
            needleHour.Length = 75
            needleHour.WidthAtBase = 6
            needleHour.Value = 4
             
            'Create a needle to show the minute
            Dim needleMinute As MeterNeedle = New MeterNeedle("minute")
            needleMinute.Background.Color = Color.Beige
            needleMinute.Length = 100
            needleMinute.WidthAtBase = 4
            needleMinute.Value = 30 \ 5
             
            'Add the needles to the meter device
            Dim meterClock As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("clock"), Meter)
            meterClock.NeedleList.Add(needleHour)
            meterClock.NeedleList.Add(needleMinute)
                </code>
            </example>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.MeterNeedle">MeterNeedle Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.Remove(System.Object)">
            <summary>Removes a meter needle from the collection.</summary>
            <remarks>The object passed in should be type MeterNeedle.</remarks>
            <param name="value">The MeterNeedle object to remove from the 
            MeterNeedleList.</param>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.RemoveNeedle(System.Int32)">RemoveNeedle Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.SetNeedleAt(System.Int32,GraphicsServer.GSNet.Widgets.MeterNeedle)">
            <summary>Insert a MeterNeedle object at the specified index in the needle list.</summary>
            <remarks>If a meter needle exists at that index, it is replaced with the specified needle.
            If the index does not exist in the list, the needle is added to the end of the list.
            </remarks>
            <returns>Index at which the MeterNeedle was set in the list.</returns>
            <param name="index">Zero-based index.</param>
            <param name="needle">MeterNeedle object to set into the list.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.GetNeedle(System.Int32)">
            <summary>Get the MeterNeedle object at the specified index in the list.</summary>
            <returns>MeterNeedle object or null if index does not contains an object.</returns>
            <example>
                The following code fragment gets the first needle in the list for each of four
                devices, and then sets its value. 
                <code lang="CS" title="C# Example">
            // Calculate values
            double Ohms = .2;
            double Volts = 8.4;
            double Amps = Volts/Ohms;
            double Watts = Volts * Amps;
             
            // Get the devices
            Meter meterOhms = (Meter) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("Ohms");
            Meter meterVolts = (Meter) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("Volts");
            Meter meterAmps = (Meter) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("Amps");
            Meter meterWatts = (Meter) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("Watts");
             
            // Get the first needle in each device's list, and set its value
            meterOhms.NeedleList.GetNeedle(0).Value = Ohms;
            meterVolts.NeedleList.GetNeedle(0).Value = Volts;
            meterAmps.NeedleList.GetNeedle(0).Value = Amps;
            meterWatts.NeedleList.GetNeedle(0).Value = Watts;
                </code>
            	<code lang="VB" title="VB Example">
            ' Calculate values
            Dim Ohms As Double = 0.2
            Dim Volts As Double = 8.4
            Dim Amps As Double = Volts / Ohms
            Dim Watts As Double = Volts * Amps
             
            ' Get the devices
            Dim meterOhms As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("Ohms"), Meter)
            Dim meterVolts As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("Volts"), Meter)
            Dim meterAmps As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("Amps"), Meter)
            Dim meterWatts As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("Watts"), Meter)
             
            ' Get the first needle in each device's list, and set its value
            meterOhms.NeedleList.GetNeedle(0).Value = Ohms
            meterVolts.NeedleList.GetNeedle(0).Value = Volts
            meterAmps.NeedleList.GetNeedle(0).Value = Amps
            meterWatts.NeedleList.GetNeedle(0).Value = Watts
                </code>
            </example>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.GetNeedle(System.String)">GetNeedle(string) Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.GetNeedle(System.String)">
            <summary> 
            Get the MeterNeedle object that matches the specified name. 
            </summary>
            <remarks>
            This method searches the list and returns the first Needle object that contains the
            specified string in its <see cref="P:GraphicsServer.GSNet.Widgets.NeedleBase.NeedleName"/> property.
            </remarks>
            <param name="name">The name of the Needle to return.</param>
            <returns>MeterNeedle object or null if not found.</returns>
            <example>
                The code fragment below fetches a needle associated with a meter device and
                sets its value. 
                <code lang="CS" title="C#">
            // Get the wind speed meter
            Meter m = (Meter) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("WindSpeed");
            // Get the needle and set a new value
            m.NeedleList.GetNeedle("Knots").Value = seattleWind;
                </code>
            	<code lang="VB" title="VB">
            ' Get the wind speed meter
            Dim m As Meter = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("WindSpeed"), Meter)
            ' Get the needle and set a new value
            m.NeedleList.GetNeedle("Knots").Value = seattleWind
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.RemoveNeedle(System.Int32)">
            <summary>Remove the MeterNeedle object at the specified index in the list.</summary>
            <param name="index">Zero-based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>Write all the needle objects currently in the list out to XML.</summary>
            <returns>
            This method returns an XmlElement if properties were written. A null value is
            returned if there were no properties to write.
            </returns>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Class</seealso>
            <param name="doc">The XmlDocument context used to create the new element node.</param>
            <param name="flags">Template flags to control template writing. See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Read in properties of all needle objects that are children of the passed in Xml
            Node.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Class</seealso>
            <param name="node">XmlNode that contains the MeterNeedleList properties.</param>
            <param name="flags">Template flags to control template writing. See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.MeterNeedleList.WriteImageMapInfo(System.Web.UI.HtmlTextWriter,System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.FillBelowNeedleMax">
            <summary>
            This fill condition sets a range of scale values for a gauge or slider device.
            When the largest of the needle values falls within or above the range, the 
            conditional object fills the area from the lower end of the range to either the 
            upper end of the range or the maximum needle value, whichever is less. 
            </summary>
            <example>
                The example below creates three fill conditions for a slider used to track the
                progress of a fund drive. One condition is triggered when the needle hits 70% of
                the goal, another when it reaches 80%, and the third when it reaches 90%. In each
                case the slider background fill is set to a darker shade of gold.
                <code lang="CS" title="[CS Example]">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.Widgets;
             
            private void gsNetWinWidget1_Load(object sender, System.EventArgs e)
            {
                // get a reference to the device
                Slider slider1 = this.gsNetWinWidget1.Widget.DeviceList.GetDevice("FundRaiser") as Slider;
             
                // create a fill condition for value 90-100% of goal
                double max = slider1.ScaleValueMax;
                double min = max * .9;
                FillBelowNeedleMax cndAbove90 = new FillBelowNeedleMax(slider1, min, max);
                cndAbove90.Name = "Above90";  // Can be used to retrieve the object later
                cndAbove90.BackgroundFill.BackgroundType = BackgroundType.Simple;
                cndAbove90.BackgroundFill.Color = Color.FromArgb(204,153,51);
             
                // create a fill condition for value 80-90% of goal
                max = min;
                min = slider1.ScaleValueMax * .8;
                FillBelowNeedleMax cndAbove80 = new FillBelowNeedleMax(slider1, min, max);
                cndAbove80.Name = "Above80";
                cndAbove80.BackgroundFill.BackgroundType = BackgroundType.Simple;
                cndAbove80.BackgroundFill.Color = Color.FromArgb(222,175,66);
             
                // create a fill condition for value 70-80% of goal
                max = min;
                min = slider1.ScaleValueMax * .7;
                FillBelowNeedleMax cndAbove70 = new FillBelowNeedleMax(slider1, min, max);
                cndAbove70.Name = "Above70";
                cndAbove70.BackgroundFill.BackgroundType = BackgroundType.Simple;
                cndAbove70.BackgroundFill.Color = Color.FromArgb(226,184,88);
             
                // add conditions to the device
                slider1.AddFillCondition(cndAbove90);
                slider1.AddFillCondition(cndAbove80);
                slider1.AddFillCondition(cndAbove70);
             
                // set the needle value
                slider1.Needle.Value = 1523800;
             
                // refresh widget
                this.gsNetWinWidget1.Invalidate();   
            }
                </code>
            	<code lang="VB" title="[VB Example]">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.Widgets
             
            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
             
                ' get a reference to the device
                Dim slider1 As Slider = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("FundRaiser"), Slider)
             
                ' create a fill condition for value 90-100% of goal
                Dim max As Double = slider1.ScaleValueMax
                Dim min As Double = max * 0.9
                Dim cndAbove90 As FillBelowNeedleMax = New FillBelowNeedleMax(slider1, min, max)
                cndAbove90.Name = "Above90"  ' Can be used to retrieve the object later
                cndAbove90.BackgroundFill.BackgroundType = BackgroundType.Simple
                cndAbove90.BackgroundFill.Color = Color.FromArgb(204, 153, 51)
             
                ' create a fill condition for value 80-90% of goal
                max = min
                min = slider1.ScaleValueMax * 0.8
                Dim cndAbove80 As FillBelowNeedleMax = New FillBelowNeedleMax(slider1, min, max)
                cndAbove80.Name = "Above80"
                cndAbove80.BackgroundFill.BackgroundType = BackgroundType.Simple
                cndAbove80.BackgroundFill.Color = Color.FromArgb(222, 175, 66)
             
                ' create a fill condition for value 70-80% of goal
                max = min
                min = slider1.ScaleValueMax * 0.7
                Dim cndAbove70 As FillBelowNeedleMax = New FillBelowNeedleMax(slider1, min, max)
                cndAbove70.Name = "Above70"
                cndAbove70.BackgroundFill.BackgroundType = BackgroundType.Simple
                cndAbove70.BackgroundFill.Color = Color.FromArgb(226, 184, 88)
             
                ' add condition to the device
                slider1.AddFillCondition(cndAbove90)
                slider1.AddFillCondition(cndAbove80)
                slider1.AddFillCondition(cndAbove70)
             
                ' set the needle value
                slider1.Needle.Value = 1523800
             
                ' refresh widget
                Me.GsNetWinWidget1.Invalidate()
             
            End Sub
                </code>
            </example>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Gauge">Gauge Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Slider">Slider Class</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.FillMinMax">
            <base>GraphicsServer.GSNet.Widgets.FillConditionBase</base>
            <summary>
            This fill condition will fill between user-assigned minimum and 
            maximum scale values. 
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.FillConditionBase">
            <summary>
            This base class implements the <see cref="T:GraphicsServer.GSNet.Widgets.IFillCondition"/>
            interface and provides a quick and easy means of creating custom filled region
            condition objects.
            </summary>
            <remarks>
            To use a fill condition object, you must instantiate the object, set the
            object's criteria, and then associate the fill condition object with
            a <see cref="T:GraphicsServer.GSNet.Widgets.LinearScaleDevice"/> object.
            <para>A fill condition object can be associated with a LinearScaleDevice (Gauge, Slider, Thermometer) class by calling the
            <see cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.AddFillCondition(GraphicsServer.GSNet.Widgets.IFillCondition)"/> method. The LinearScaleDevice
            class also provides other methods such as <see cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.RemoveFillCondition(System.Int32)"/>, 
            <see cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.RemoveAllFillConditions"/> 
            and <see cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.GetFillCondition(System.Int32)"/>.
            </para>
            </remarks>
            <example>
            See the example for the LinearScaleDevice class's <see cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.AddFillCondition(GraphicsServer.GSNet.Widgets.IFillCondition)">AddFillCondition</see> method.
            </example>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.AddFillCondition(GraphicsServer.GSNet.Widgets.IFillCondition)">AddFillCondition Method</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.IFillCondition">
            <summary>
            IFillCondition interface contains properties and methods for
            supporting the conditional fill concept for Gauges, Sliders and Thermometers.
            Developers can build custom fill condition classes by implementing this 
            interface. 
            </summary>
            <remarks>
            Note that a base class exists in the library that already implements this
            interface. (See <see cref="T:GraphicsServer.GSNet.Widgets.FillConditionBase"/>.)
            This class can be used as a base class when creating custom fill
            condition classes versus directly implementing the IFillCondition interface.
            <para>For additional information regarding the use of fill condition objects see
            the <see cref="T:GraphicsServer.GSNet.Widgets.FillConditionBase"/> class.</para>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.IFillCondition.IsVisible">
            <summary>Determines whether or not the fill will be visible.</summary>
            <remarks>
            One can perform checks against the LinearScaleDevice, or their derived classes 
            Gauge, Slider or Thermometer, and determine whether or not to show the
            fill.
            </remarks>
            <returns>True if the fill will be visible, false if the fill will not show.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.IFillCondition.MinValue">
            <summary>
            Sets the minimum scale value that the fill will begin at.
            </summary>
            <returns>The minimum scale value that the fill will begin at.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.IFillCondition.MaxValue">
            <summary>
            Sets the maximum scale value that the fill will end at.
            </summary>
            <returns>The maximum scale value that the fill will end at.</returns>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.IFillCondition.Name">
            <summary>
            This property is the name of the fill condition. 
            </summary>
            <remarks>
            Although it is not necessary to name fill conditions, names may be useful
            for searching and finding specific fill condition objects later.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.IFillCondition.BackgroundFill">
            <summary>
            Gets or sets the <see cref="T:GraphicsServer.GSNet.Charting.Background">Background</see>
            object used to paint a filled in region when its value(s) meet the criteria of the fill condition.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillConditionBase.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillConditionBase.IsVisible">
            <summary>Determines whether or not the fill will be visible for this device.</summary>
            <remarks>
            One can perform checks against the LinearScaleDevice, or their derived classes 
            Gauge, Slider or Thermometer, and determine whether or not to show the
            fill.
            </remarks>
            <returns>True if the fill will be visible, false if the fill will not show.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillConditionBase.MinValue">
            <summary>
            Sets the minimum scale value that the fill will begin at.
            </summary>
            <returns>The minimum scale value that the fill will begin at.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillConditionBase.MaxValue">
            <summary>
            Sets the maximum scale value that the fill will end at.
            </summary>
            <returns>The maximum scale value that the fill will end at.</returns>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.FillConditionBase.Name">
            <summary>Gets and sets the name of the fill condition.</summary>
            <remarks>
            It may be useful to name instances of fill conditions to easily search and find a
            specific FillCondition object later.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.FillConditionBase.BackgroundFill">
            <summary>
            Gets or sets the <see cref="T:GraphicsServer.GSNet.Charting.Background">Background</see>
            object used to paint a filled in region when its value(s) meet the criteria of the fill condition.
            </summary>
            <summary>
            Provides access to the Background object contained in the protected
            propBackground property. Note that developers can override this property if
            desired.
            </summary>
            <remarks>
            This property provides access to the Background object contained in the protected
            propBackground property. Developers can override this property if desired.
            <para>Note that the Background object here is used only to fill in the region specified, 
            not to fill the entire Gauge, Slider or Thermometer.</para>
            </remarks>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillMinMax.#ctor(GraphicsServer.GSNet.Widgets.LinearScaleDevice)">
            <summary>
            Constructor.
            </summary>
            <param name="linearScaleDevice">The device that will get the fill.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillMinMax.#ctor(GraphicsServer.GSNet.Widgets.LinearScaleDevice,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="linearScaleDevice">The device that will get the fill.</param>
            <param name="min">The minimum value of the fill, where the fill will begin.</param>
            <param name="max">The maximum value of the fill, where the fill will end.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillMinMax.IsVisible">
            <summary>Determines whether or not the fill will be visible for this device.</summary>
            <remarks>
            One can perform checks against the LinearScaleDevice, or their derived classes 
            Gauge, Slider or Thermometer, and determine whether or not to show the
            fill.
            </remarks>
            <returns>True if the fill will be visible, false if the fill will not show.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillMinMax.MinValue">
            <summary>
            Sets the minimum scale value that the fill will begin at.
            </summary>
            <returns>The minimum scale value that the fill will begin at.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillMinMax.MaxValue">
            <summary>
            Sets the maximum scale value that the fill will end at.
            </summary>
            <returns>The maximum scale value that the fill will end at.</returns>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.FillMinMax.Min">
            <summary>
            The minumum value of the fill. This defines the beginning of the fill.
            </summary>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.FillMinMax.Max">
            <summary>
            The maximum value of the fill. This defines the end of the fill.
            </summary>
            <value>double</value>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillBelowNeedleMax.#ctor(GraphicsServer.GSNet.Widgets.LinearScaleDevice)">
            <summary>
            Constructor.
            </summary>
            <param name="linearScaledevice">The device that will get the fill.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillBelowNeedleMax.#ctor(GraphicsServer.GSNet.Widgets.LinearScaleDevice,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="linearScaledevice">The device that will get the fill.</param>
            <param name="min">The minimum value of the fill, where the fill will begin.</param>
            <param name="max">The maximum value of the fill, where the fill will end.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillBelowNeedleMax.IsVisible">
            <summary>Determines whether or not the fill will be visible for this device.</summary>
            <returns>True if the fill will be visible, false if the fill will not show.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillBelowNeedleMax.MaxValue">
            <summary>
            Sets the maximum scale value that the fill will end at.
            </summary>
            <remarks>
            This fill will not extend beyond the maximum needle value for the
            Gauge or Slider.
            </remarks>
            <returns>The maximum scale value that the fill will end at.</returns>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.FillBelowThermometerMax">
            <summary>
            This fill condition sets a range of scale values for a thermometer device.
            When the current thermometer value falls within or above the range, the conditional object fills 
            the area from the lower end of the range to either the upper end of the range or the current
            thermometer value, whichever is less. 
            </summary>
            <example>
                The following example sets a condition that establishes a range between 55 and 80
                on thermometer device's scale. The code then sets the needle value at 65. As a
                result, the condition is triggered and the area between the bottom of the range,
                55, and the needle value, 65, is painted green.
                <code lang="CS" title="[CS Example]">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.Widgets;
             
            private void gsNetWinWidget1_Load(object sender, System.EventArgs e)
            {
                // get a reference to the device
                Thermometer thermometer1 = this.gsNetWinWidget1.Widget.DeviceList.GetDevice("temperature") as Thermometer;
             
                // create a condition
                FillBelowThermometerMax cndMild = new FillBelowThermometerMax(thermometer1, 55, 80);
                cndMild.BackgroundFill.BackgroundType = BackgroundType.Simple;
                cndMild.BackgroundFill.Color = Color.Green;
             
                // add the condition
                thermometer1.AddFillCondition(cndMild);
             
                // set the value
                thermometer1.Value = 65;
             
                // refresh widget
                this.gsNetWinWidget1.Invalidate();   
            }
                </code>
            	<code lang="VB" title="[VB Example]">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.Widgets
             
            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
             
                ' get a reference to the device
                Dim thermometer1 As Thermometer = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("temperature"), Thermometer)
             
                ' create a condition
                Dim cndMild As FillBelowThermometerMax = New FillBelowThermometerMax(thermometer1, 55, 80)
                cndMild.BackgroundFill.BackgroundType = BackgroundType.Simple
                cndMild.BackgroundFill.Color = Color.Green
             
                ' add the condition
                thermometer1.AddFillCondition(cndMild)
             
                ' set the value
                thermometer1.Value = 65
             
                ' refresh widget
                Me.GsNetWinWidget1.Invalidate()
             
            End Sub
                </code>
            </example>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Thermometer">Thermometer Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillBelowThermometerMax.#ctor(GraphicsServer.GSNet.Widgets.LinearScaleDevice)">
            <summary>
            Constructs an instance of this type.
            </summary>
            <param name="linearScaledevice">The device that will get the fill.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillBelowThermometerMax.#ctor(GraphicsServer.GSNet.Widgets.LinearScaleDevice,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="linearScaledevice">The device that will get the fill.</param>
            <param name="min">The minimum value of the fill, where the fill will begin.</param>
            <param name="max">The maximum value of the fill, where the fill will end.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillBelowThermometerMax.IsVisible">
            <summary>Determines whether or not the fill will be visible for this device.</summary>
            <returns>True if the fill will be visible, false if the fill will not show.</returns>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.FillBelowThermometerMax.MaxValue">
            <summary>
            Sets the maximum scale value that the fill will end at.
            </summary>
            <remarks>
            This fill will not extend beyond the Thermometer's main filled in region.
            </remarks>
            <returns>The maximum scale value that the fill will end at.</returns>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.Gauge">
            <summary>
            Represents a gauge device.
            </summary>
            <remarks>
            A gauge device contains a linear scale that can be positioned horizontally 
            or vertically. Gauges can have multiple needles, and each needle can 
            be a different size, shape and style. Optional needle labels can display 
            the current value. 
            </remarks>
            <example>
                The code fragment below creates a gauge with one needle. 
                <code lang="CS" title="C#">
            using GraphicsServer.GSNet.Widgets;
            using GraphicsServer.GSNet.Charting;
            ...
            // Create a gauge and configure it
            Gauge gaugeRain = new Gauge("Rainfall");
            gaugeRain.Location = new Point(50, 35);
            gaugeRain.Size = new Size(600, 400);
            gaugeRain.ScaleBorder.BorderType = GraphicsServer.GSNet.Charting.BorderType.Simple;
            gaugeRain.ScalePosition = ScalePosition.Right;
            gaugeRain.ScaleValueMax = 1;
            gaugeRain.MajorTicks = 6;
            gaugeRain.MinorTicks = 9;
            gaugeRain.TickSize = 20;
            gaugeRain.ScaleLabelFormatMask = ".0";
             
            // Create a needle and configure it
            LinearNeedle needleLevel = new LinearNeedle("Level");
            needleLevel.NeedleType = NeedleType.Bar;
            needleLevel.Height = 2;
            needleLevel.Width = 60;
            needleLevel.LabelFormatMask = ".00";
            needleLevel.LabelOffset = 4;
            needleLevel.NeedleOffset = -8;
            needleLevel.Value = .35;
             
            // Add the needle to the gauge
            gaugeRain.NeedleList.Add(needleLevel);
             
            // Add the gauge to the widget
            this.gsNetWinWidget1.Widget.DeviceList.Add(gaugeRain);
                </code>
            	<code lang="VB" title="VB">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.Widgets
            ...
            ' Create a gauge and configure it
            Dim gaugeRain As Gauge = New Gauge("Rainfall")
            gaugeRain.Location = New Point(50, 35)
            gaugeRain.Size = New Size(600, 400)
            gaugeRain.ScaleBorder.BorderType = GraphicsServer.GSNet.Charting.BorderType.Simple
            gaugeRain.ScalePosition = ScalePosition.Right
            gaugeRain.ScaleValueMax = 1
            gaugeRain.MajorTicks = 6
            gaugeRain.MinorTicks = 9
            gaugeRain.TickSize = 20
            gaugeRain.ScaleLabelFormatMask = ".0"
             
            ' Create a needle and configure it
            Dim needleLevel As LinearNeedle = New LinearNeedle("Level")
            needleLevel.NeedleType = NeedleType.Bar
            needleLevel.Height = 2
            needleLevel.Width = 60
            needleLevel.LabelFormatMask = ".00"
            needleLevel.LabelOffset = 4
            needleLevel.NeedleOffset = -8
            needleLevel.Value = 0.35
             
            ' Add the needle to the gauge
            gaugeRain.NeedleList.Add(needleLevel)
             
            ' Add the gauge to the widget
            Me.GsNetWinWidget1.Widget.DeviceList.Add(gaugeRain)
                </code>
            </example>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.LinearScaleDevice">
            <summary>This is the base class for devices with a linear scale.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.OriginalReSizing">
            <summary>
            The original v2.5 method of resizing linear scale devices
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.AutoReSize">
            Derived classes must implement the AutoReSize method so that the
            device will be best fit into the rectangle its contained within.
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.GetScaleValue(System.Drawing.PointF)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.TransformValueToScreenPoint(System.Double)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.AddFillCondition(GraphicsServer.GSNet.Widgets.IFillCondition)">
            <summary>Adds a fill condition object to a Gauge, Slider or Thermometer object.</summary>
            <remarks>
            A given Gauge, Slider or Thermometer object can have many associated fill condition
            objects.
            </remarks>
            <returns>An index into the fill condition list for the added fill condition object.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.RemoveFillCondition(System.Int32)">RemoveFillCondition Method</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.IFillCondition">IFillCondition Interface</seealso>
            <example>
                The example below creates three fill conditions for a slider used to track the
                progress of a fund drive. One condition is triggered when the needle hits 70% of
                the goal, another when it reaches 80%, and the third when it reaches 90%. In each
                case the slider background fill is set to a darker shade of gold.
                <code lang="CS" title="[CS Example]">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.Widgets;
             
            private void gsNetWinWidget1_Load(object sender, System.EventArgs e)
            {
                // get a reference to the device
                Slider slider1 = this.gsNetWinWidget1.Widget.DeviceList.GetDevice("FundRaiser") as Slider;
             
                // create a fill condition for value 90-100% of goal
                double max = slider1.ScaleValueMax;
                double min = max * .9;
                FillBelowNeedleMax cndAbove90 = new FillBelowNeedleMax(slider1, min, max);
                cndAbove90.Name = "Above90";  // Can be used to retrieve the object later
                cndAbove90.BackgroundFill.BackgroundType = BackgroundType.Simple;
                cndAbove90.BackgroundFill.Color = Color.FromArgb(204,153,51);
             
                // create a fill condition for value 80-90% of goal
                max = min;
                min = slider1.ScaleValueMax * .8;
                FillBelowNeedleMax cndAbove80 = new FillBelowNeedleMax(slider1, min, max);
                cndAbove80.Name = "Above80";
                cndAbove80.BackgroundFill.BackgroundType = BackgroundType.Simple;
                cndAbove80.BackgroundFill.Color = Color.FromArgb(222,175,66);
             
                // create a fill condition for value 70-80% of goal
                max = min;
                min = slider1.ScaleValueMax * .7;
                FillBelowNeedleMax cndAbove70 = new FillBelowNeedleMax(slider1, min, max);
                cndAbove70.Name = "Above70";
                cndAbove70.BackgroundFill.BackgroundType = BackgroundType.Simple;
                cndAbove70.BackgroundFill.Color = Color.FromArgb(226,184,88);
             
                // add conditions to the device
                slider1.AddFillCondition(cndAbove90);
                slider1.AddFillCondition(cndAbove80);
                slider1.AddFillCondition(cndAbove70);
             
                // set the needle value
                slider1.Needle.Value = 1523800;
             
                // refresh widget
                this.gsNetWinWidget1.Invalidate();   
            }
                </code>
            	<code lang="VB" title="[VB Example]">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.Widgets
             
            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
             
                ' get a reference to the device
                Dim slider1 As Slider = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("FundRaiser"), Slider)
             
                ' create a fill condition for value 90-100% of goal
                Dim max As Double = slider1.ScaleValueMax
                Dim min As Double = max * 0.9
                Dim cndAbove90 As FillBelowNeedleMax = New FillBelowNeedleMax(slider1, min, max)
                cndAbove90.Name = "Above90"  ' Can be used to retrieve the object later
                cndAbove90.BackgroundFill.BackgroundType = BackgroundType.Simple
                cndAbove90.BackgroundFill.Color = Color.FromArgb(204, 153, 51)
             
                ' create a fill condition for value 80-90% of goal
                max = min
                min = slider1.ScaleValueMax * 0.8
                Dim cndAbove80 As FillBelowNeedleMax = New FillBelowNeedleMax(slider1, min, max)
                cndAbove80.Name = "Above80"
                cndAbove80.BackgroundFill.BackgroundType = BackgroundType.Simple
                cndAbove80.BackgroundFill.Color = Color.FromArgb(222, 175, 66)
             
                ' create a fill condition for value 70-80% of goal
                max = min
                min = slider1.ScaleValueMax * 0.7
                Dim cndAbove70 As FillBelowNeedleMax = New FillBelowNeedleMax(slider1, min, max)
                cndAbove70.Name = "Above70"
                cndAbove70.BackgroundFill.BackgroundType = BackgroundType.Simple
                cndAbove70.BackgroundFill.Color = Color.FromArgb(226, 184, 88)
             
                ' add condition to the device
                slider1.AddFillCondition(cndAbove90)
                slider1.AddFillCondition(cndAbove80)
                slider1.AddFillCondition(cndAbove70)
             
                ' set the needle value
                slider1.Needle.Value = 1523800
             
                ' refresh widget
                Me.GsNetWinWidget1.Invalidate()
             
            End Sub
                </code>
            </example>
            <param name="fillCondition">Any object that implements the <see cref="T:GraphicsServer.GSNet.Widgets.IFillCondition"/> interface.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.RemoveFillCondition(System.Int32)">
            <summary>
            Removes the fill condition object from the Gauge, Slider or Thermometer object.  
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.RemoveAllFillConditions">RemoveAllFillConditions Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.AddFillCondition(GraphicsServer.GSNet.Widgets.IFillCondition)">AddFillCondition Method</seealso>
            <param name="index">Index of fill condition object to remove.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.RemoveAllFillConditions">
            <summary>
            Removes all fill condition objects added by AddFillCondition().
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.AddFillCondition(GraphicsServer.GSNet.Widgets.IFillCondition)">AddFillCondition Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.RemoveFillCondition(System.Int32)">RemoveFillCondition Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.GetFillCondition(System.Int32)">
            <summary>
            Retrieves the fill condition object at the specified index.
            </summary>
            <param name="index">Index of fill condition object in the list.</param>
            <returns><see cref="T:GraphicsServer.GSNet.Widgets.IFillCondition"/> </returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.AddFillCondition(GraphicsServer.GSNet.Widgets.IFillCondition)">AddFillCondition Method</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.IFillCondition">IFillCondition Interface</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.GetFillConditionCount">
            <summary>
            Retrieves the number of fill conditions associated with the Gauge, Slider or Thermometer.
            </summary>
            <returns>The number of fill conditions associated with the Gauge, Slider or Thermometer.</returns>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LinearScaleDevice.ScalePosition">
            <summary>Determines the location of the scale.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.ScalePosition"/></value>
            <remarks>
            If this property is set to Left or Right, the scale will be vertical. If this
            value is set to Top or Bottom, the scale will be horizontal.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.LinearScaleDevice.ScalePosition">ScalePosition Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LinearScaleDevice.ScaleThickness">
            <summary>Sets and gets the thickness of the scale.</summary>
            <value>int</value>
            <remarks>
            If the gauge is vertical, then this thickness represents the width. If the gauge
            is horizontal, then this thickness represents the height.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.LinearScaleDevice.ScalePosition">ScalePosition Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LinearScaleDevice.ReverseScale">
            <summary>Determines whether scale values draw in the reverse direction.</summary>
            <value>bool</value>
            <remarks>If this value is true the scale values will be reversed.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LinearScaleDevice.FillConditionCount">
            <summary>
            Gets the number of fill condition objects currently attached to this Gauge, Slider or Themometer object.
            </summary>
            <value>int</value>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.LinearScaleDevice.AddFillCondition(GraphicsServer.GSNet.Widgets.IFillCondition)">AddFillCondition Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Gauge.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Gauge.#ctor(System.String)">
            <summary>
            Constructs an instance of this type and sets the string in the DeviceName
            property.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Gauge.GetDeviceType">
            <summary>
            Returns the object's device type.
            </summary>
            <returns><see cref="T:GraphicsServer.GSNet.Widgets.DeviceType"/></returns>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.DeviceType">DeviceType Enumeration</seealso>
            <example>
                This example iterates through the widget's device list, looking for a gauge device.
                If it finds one, it does something useful to it. 
                <code lang="CS" title="C# Example">
            foreach (DeviceBase device in this.gsNetWinWidget1.Widget.DeviceList)
            {
                // Get the gauge device 
                if (device.GetDeviceType() == DeviceType.Gauge)
                {
                    Gauge g = (Gauge) device;
                    
                    // Do something useful
                }
            }
                </code>
            	<code lang="VB" title="Visual Basic Example">
            For Each device As DeviceBase In Me.GsNetWinWidget1.Widget.DeviceList
                ' Get the gauge device
                If (device.GetDeviceType = DeviceType.Gauge) Then
             
                    Dim g As Gauge = CType(device, Gauge)
                    
                    ' Do something useful
             
                End If
            Next
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Gauge.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Gauge.ScaleBorder">
            <summary>Gets the Border object that provides a border for the scale area.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Border"/></value>
            <remarks>
            This property exists to provide access to the properties of the underlying Border
            object. See the <see cref="T:GraphicsServer.GSNet.Charting.Border"/> class
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Border">Border Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Gauge.ScaleBackground">
            <summary>Gets the Background object that provides the background for the scale.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <remarks>
            This property exists to provide access to the properties of the underlying Background
            object. See the <see cref="T:GraphicsServer.GSNet.Charting.Background"/> class for more
            information
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Gauge.NeedleList">
            <summary>
            Gets the NeedleList object that maintains the collection of LinearNeedle objects
            associated with this device.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.NeedleList"/></value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Gauge.NeedleList">NeedleList Class</seealso>
            <example>
                The code fragment below fetches a gauge from the widget's device list, fetches
                a needle from the gauge's needle list, and sets the needle's value. 
                <code lang="CS" title="C#">
            // Get the rain gauge
            Gauge g = (Gauge) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("Rainfall");
            // Get the needle and set a new value
            g.NeedleList.GetNeedle("Level").Value = seattleRain;
                </code>
            	<code lang="VB" title="VB">
            ' Get the rain gauge
            Dim g As Gauge = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("Rainfall"), Gauge)
            ' Get the needle and set a new value
            g.NeedleList.GetNeedle("Level").Value = seattleRain
                </code>
            </example>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.NeedleType">
            <summary>Enumerates the types of needles supported.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.NeedleType.Arrow">
            <summary>
            The needle is triangular, like an arrowhead.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.NeedleType.Bar">
            <summary>
            The needle is rectagonal.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.NeedleType.Notch">
            <summary>
            The needle is a polygon formed by placing a triangle on one side of a rectangle.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.NeedlePosition">
            <summary>
            Specifies the relative location of the needle with
            respect to the scale.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.NeedlePosition.Inside">
            <summary>
            Needle is inside the scale.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.NeedlePosition.Outside">
            <summary>
            Needle is outside the scale.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.NeedleLocation">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.LinearNeedle">
            <base>GraphicsServer.GSNet.Widgets.NeedleBase</base>
            <summary>
            Supports needles for a linear scale device.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearNeedle.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearNeedle.#ctor(System.String)">
            <summary>
            Constructs an instance of this type and sets the string argument in the
            NeedleName property.
            </summary>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.NeedleBase.NeedleName">NeedleName Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearNeedle.IsPointInNeedle(System.Drawing.Point,GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearNeedle.DetermineNeedlePoint(GraphicsServer.GSNet.Widgets.NeedleLocation)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearNeedle.DetermineNeedleLocation">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LinearNeedle.WriteImageMapInfo(System.Web.UI.HtmlTextWriter,System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LinearNeedle.NeedlePosition">
            <summary>Sets and gets the position of the needle with respect to the scale.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.NeedlePosition"/></value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.LinearNeedle.NeedlePosition">NeedlePosition Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LinearNeedle.NeedleType">
            <summary>Determines the appearance of the needle.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.NeedleType"/></value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.LinearNeedle.NeedleType">NeedleType Enumeration</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LinearNeedle.Width">
            <summary>Sets and gets needle width.</summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LinearNeedle.Height">
            <summary>Sets and gets needle height.</summary>
            <value>int</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LinearNeedle.LinearScaleDevice">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.ScalePosition">
            <summary>
            The ScalePosition enumeration is used to specify the location of the scale.
            If the position is Left or Right, the scale will be vertical. If the
            position is Top or Bottom, the scale will be horizontal.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScalePosition.Left">
            <summary>
            Scale is on the left side.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScalePosition.Right">
            <summary>
            Scale is on the right side.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScalePosition.Top">
            <summary>
            Scale is on the top.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.ScalePosition.Bottom">
            <summary>
            Scale is on the bottom.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.NeedleList">
            <summary>
            This class is simply a wrapper around the array list that contains the collection
            of Needle objects associated with a linear scale device such as a Gauge object.
            </summary>
            <remarks>
            Typically, you do not access a NeedleList object directly. Instead, you should
            access it through a Gauge object's NeedleList property.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Gauge.NeedleList">NeedleList Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleList.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleList.#ctor(System.Collections.ICollection)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleList.Add(System.Object)">
            <returns>Index in the list of the added device.</returns>
            <summary>Adds a new Needle object to the collection.</summary>
            <example>
                The code fragment below creates a needle and adds it to the collection
                associated with a gauge. 
                <code lang="CS" title="C#">
            // Create a needle and configure it
            LinearNeedle needleLevel = new LinearNeedle("Level");
            needleLevel.NeedleType = NeedleType.Bar;
            needleLevel.Height = 2;
            needleLevel.Width = 60;
            needleLevel.LabelFormatMask = ".00";
            needleLevel.LabelOffset = 4;
            needleLevel.NeedleOffset = -8;
            needleLevel.Value = .35;
             
            // Add the needle to the gauge
            gaugeRain.NeedleList.Add(needleLevel);
                </code>
            	<code lang="VB" title="VB">
            ' Create a needle and configure it
            Dim needleLevel As LinearNeedle = New LinearNeedle("Level")
            needleLevel.NeedleType = NeedleType.Bar
            needleLevel.Height = 2
            needleLevel.Width = 60
            needleLevel.LabelFormatMask = ".00"
            needleLevel.LabelOffset = 4
            needleLevel.NeedleOffset = -8
            needleLevel.Value = 0.35
             
            ' Add the needle to the gauge
            gaugeRain.NeedleList.Add(needleLevel)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleList.Remove(System.Object)">
            <summary>Removes a Needle object from the collection.</summary>
            <remarks>The object passed in should be type LinearNeedle.</remarks>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.NeedleList.RemoveNeedle(System.Int32)">RemoveNeedle Method</seealso>
            <param name="value">The Needle object to remove from the 
            NeedleList.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleList.SetNeedleAt(System.Int32,GraphicsServer.GSNet.Widgets.LinearNeedle)">
            <summary>Adds a Needle object to the list at the specified index.</summary>
            <remarks>
            If an object exists at that index, it is replaced with the specified object. If
            the index does not exist in the list, the object is added to the end of the
            list.
            </remarks>
            <returns>Index at which the Needle was set in the list.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.NeedleList.RemoveNeedle(System.Int32)">RemoveNeedle Method</seealso>
            <param name="index">zero based index.</param>
            <param name="needle">Needle object to set into the list.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleList.GetNeedle(System.Int32)">
            <summary>Gets the Needle object at the specified index.</summary>
            <returns>Needle object or null if index does not contains an object.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.NeedleList.GetNeedle(System.Int32)">GetNeedle(string) Method</seealso>
            <param name="index">Zero-based index.</param>
            <example>
                The following code fragment gets the first needle in the list for each of three
                devices, and then sets its value. 
                <code lang="CS" title="C# Example">
            // Get the devices
            Gauge gaugeRainfall = (Gauge) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("Rainfall");
            Gauge gaugeRelativeHumidity = (Gauge) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("RelativeHumidity");
            Gauge gaugePressure = (Gauge) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("Pressure");
             
            // Get the first needle in each device's list and set its value
            gaugeRainfall.NeedleList.GetNeedle(0).Value = .27;
            gaugeRelativeHumidity.NeedleList.GetNeedle(0).Value = 2;
            gaugePressure.NeedleList.GetNeedle(0).Value = 30.21;
                </code>
            	<code lang="VB" title="VB Example">
            ' Get the devices
            Dim gaugeRainfall As Gauge = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("Rainfall"), Gauge)
            Dim gaugeRelativeHumidity As Gauge = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("RelativeHumidity"), Gauge)
            Dim gaugePressure As Gauge = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("Pressure"), Gauge)
             
            ' Get the first needle in each device's list and set its value
            gaugeRainfall.NeedleList.GetNeedle(0).Value = .27
            gaugeRelativeHumidity.NeedleList.GetNeedle(0).Value = 2
            gaugePressure.NeedleList.GetNeedle(0).Value = 30.21
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleList.GetNeedle(System.String)">
            <summary> 
            Retrieves a Needle object with the specified name. 
            </summary>
            <remarks>
            This method searches the list and returns the first Needle object that contains the specified
            name in its <see cref="P:GraphicsServer.GSNet.Widgets.NeedleBase.NeedleName"/> property.
            </remarks>
            <returns>Needle object or null if not found.</returns>
            <example>
                The code fragment below fetches a needle associated with a gauge device and
                sets its value. 
                <code lang="CS" title="C#">
            // Get the rain gauge
            Gauge g = (Gauge) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("Rainfall");
            // Get the needle and set a new value
            g.NeedleList.GetNeedle("Level").Value = seattleRain;
                </code>
            	<code lang="VB" title="VB">
            ' Get the rain gauge
            Dim g As Gauge = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("Rainfall"), Gauge)
            ' Get the needle and set a new value
            g.NeedleList.GetNeedle("Level").Value = seattleRain
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleList.RemoveNeedle(System.Int32)">
            <summary>Removes the Needle object at the specified index.</summary>
            <param name="index">Zero-based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleList.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>
            Write properties of all the needle objects currently in the list out to
            XML.
            </summary>
            <returns>
            This method returns an XmlElement if properties were written. A null value is
            returned if there were no properties to write.
            </returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.NeedleList.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">ReadProperties Method</seealso>
            <param name="doc">This paramenter is the XmlDocument context used to create the new element node.</param>
            <param name="flags">Template flags to control template writing. See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleList.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Reads properties of all Needle objects that are children of the passed in Xml
            Node.
            </summary>
            <param name="node">XmlNode that contains the needleList properties.</param>
            <param name="flags">Template flags to control template writing. See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.NeedleList.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">WriteProperties Method</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Charting.TemplateFlags">TemplateFlags Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.NeedleList.WriteImageMapInfo(System.Web.UI.HtmlTextWriter,System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.Slider">
            <summary>
            Represents a slider device.
            </summary>
            <remarks>
            A slider is similar to a gauge in that it has a linear scale that can be
            positioned horizontally or vertically. Unlike a gauge, however, a slider can have only
            one needle. A feature that the slider shares with the thermometer device is that an
            optional background fill can color the slider area up to the needle's value.
            </remarks>
            <example>
                The code fragment below creates a slider and adds it to the widget's device
                list. 
                <code lang="CS" title="C#">
            using GraphicsServer.GSNet.Widgets;
            using GraphicsServer.GSNet.Charting;
            ...
            // Create a slider device and configure it
            Slider sliderNoise = new Slider("Noise");
            sliderNoise.Location = new Point(50, 35);
            sliderNoise.Size = new Size(600,400);
            sliderNoise.SliderBackground.Color = SystemColors.ControlLight;
            sliderNoise.SliderWidth = 25;
            sliderNoise.ScalePosition = ScalePosition.Bottom;
            sliderNoise.ScaleValueMax = 130;
            sliderNoise.ScaleValueMin = 30;
            sliderNoise.MajorTicks = 11;
            sliderNoise.MinorTicks = 9;
            sliderNoise.ScaleLabelsOn = false;
            sliderNoise.TickScaleLineOn = false;
             
            // Configure the needle
            sliderNoise.Needle.Height = 12;
            sliderNoise.Needle.Background.BackgroundType = BackgroundType.Gradient;
            sliderNoise.Needle.Background.GradientStartColor = SystemColors.ControlLightLight;
            sliderNoise.Needle.Background.GradientEndColor = SystemColors.ControlDarkDark;
            sliderNoise.Needle.Background.GradientStyle = GradientType.VerticalMiddleOut;
            sliderNoise.Needle.LabelFormatMask = "#0 dB";
            sliderNoise.NeedleFillEnabled = true;
            sliderNoise.NeedleFill.Color = Color.Crimson;
            sliderNoise.Needle.Value = 58;
             
            // Add the device to the widget
            this.gsNetWinWidget1.Widget.DeviceList.Add(sliderNoise);
                </code>
            	<code lang="VB" title="VB">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.Widgets
            ...
            ' Create a slider device and configure it
            Dim sliderNoise As Slider = New Slider("Noise")
            sliderNoise.Location = New Point(50, 35)
            sliderNoise.Size = New Size(600, 400)
            sliderNoise.SliderBackground.Color = SystemColors.ControlLight
            sliderNoise.SliderWidth = 25
            sliderNoise.ScalePosition = ScalePosition.Bottom
            sliderNoise.ScaleValueMax = 130
            sliderNoise.ScaleValueMin = 30
            sliderNoise.MajorTicks = 11
            sliderNoise.MinorTicks = 9
            sliderNoise.ScaleLabelsOn = False
            sliderNoise.TickScaleLineOn = False
             
            ' Configure the needle
            sliderNoise.Needle.Height = 12
            sliderNoise.Needle.Background.BackgroundType = BackgroundType.Gradient
            sliderNoise.Needle.Background.GradientStartColor = SystemColors.ControlLightLight
            sliderNoise.Needle.Background.GradientEndColor = SystemColors.ControlDarkDark
            sliderNoise.Needle.Background.GradientStyle = GradientType.VerticalMiddleOut
            sliderNoise.Needle.LabelFormatMask = "#0 dB"
            sliderNoise.NeedleFillEnabled = True
            sliderNoise.NeedleFill.Color = Color.Crimson
            sliderNoise.Needle.Value = 58
             
            ' Add the device to the widget
            Me.GsNetWinWidget1.Widget.DeviceList.Add(sliderNoise)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Slider.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Slider.#ctor(System.String)">
            <summary>
            Constructs an instance of this type and sets the string in the DeviceName
            property.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Slider.GetDeviceType">
            <summary>
            Returns the object's device type.
            </summary>
            <returns><see cref="T:GraphicsServer.GSNet.Widgets.DeviceType"/></returns>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.DeviceType">DeviceType Enumeration</seealso>
            <example>
                This example iterates through the widget's device list, looking for a slider device.
                If it finds one, it does something useful to it. 
                <code lang="CS" title="C# Example">
            foreach (DeviceBase device in this.gsNetWinWidget1.Widget.DeviceList)
            {
                // Get the slider device 
                if (device.GetDeviceType() == DeviceType.Slider)
                {
                    Slider s = (Slider) device;
                    
                    // Do something useful
                }
            }
                </code>
            	<code lang="VB" title="Visual Basic Example">
            For Each device As DeviceBase In Me.GsNetWinWidget1.Widget.DeviceList
                ' Get the slider device
                If (device.GetDeviceType = DeviceType.Slider) Then
             
                    Dim s As Slider = CType(device, Slider)
                    
                    ' Do something useful
             
                End If
            Next
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Slider.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Slider.SliderBackground">
            <summary>Gets the Background object that provides the background for the slider.</summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <remarks>
            This property exists to provide access to the properties of the underlying Background
            object. See the <see cref="T:GraphicsServer.GSNet.Charting.Background"/> class for more
            information
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
            <example>
            	<code lang="CS" title="C# Example">
            sliderNoise.SliderBackground.Color = SystemColors.ControlLight;
                </code>
            	<code lang="VB" title="Visual Basic Example">
            sliderNoise.SliderBackground.Color = SystemColors.ControlLight
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Slider.NeedleFill">
            <summary>Gets the Background object that fills the slider area up to the needle value.
            </summary>
            <remarks>
            The <see cref="P:GraphicsServer.GSNet.Widgets.Slider.NeedleFillEnabled"/> property 
            must be set to true for the fill to be visible.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Slider.NeedleFillEnabled">NeedleFillEnabled Property</seealso>
            <example>
            	<code lang="CS" title="C# Example">
            sliderNoise.NeedleFillEnabled = true; 
            sliderNoise.NeedleFill.Color = Color.Crimson;
                </code>
            	<code lang="VB" title="Visual Basic Example">
            sliderNoise.NeedleFillEnabled = True
            sliderNoise.NeedleFill.Color = Color.Crimson
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Slider.NeedleFillEnabled">
            <summary>
            Enables and disables filling the slider up to the needle value.  
            </summary>
            <remarks>
            If true the slider area is filled using the Background object set in the
            <see cref="P:GraphicsServer.GSNet.Widgets.Slider.NeedleFill"/> property.
            </remarks>
            <value>bool</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Slider.NeedleFill">NeedleFill Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Slider.Needle">
            <summary>
            Gets the SliderNeedle object that provides the slider's needle.
            </summary>
            <remarks>
            This property exists to provide access to the properties and methods of the underlying
            SliderNeedle object. See the <see cref="T:GraphicsServer.GSNet.Widgets.SliderNeedle"/> class
            for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.SliderNeedle"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.SliderNeedle">SliderNeedle Class</seealso>
            <example>
            	<code lang="CS" title="C# Example">
            // Configure the needle 
            sliderNoise.Needle.Height = 12; 
            sliderNoise.Needle.Background.BackgroundType = BackgroundType.Gradient; 
            sliderNoise.Needle.Background.GradientStartColor = SystemColors.ControlLightLight; 
            sliderNoise.Needle.Background.GradientEndColor = SystemColors.ControlDarkDark; 
            sliderNoise.Needle.Background.GradientStyle = GradientType.VerticalMiddleOut; 
            sliderNoise.Needle.LabelFormatMask = "#0 dB"; 
            sliderNoise.NeedleFillEnabled = true; 
            sliderNoise.NeedleFill.Color = Color.Crimson; 
            sliderNoise.Needle.Value = 58;
                </code>
            	<code lang="VB" title="Visual Basic Example">
            ' Configure the needle
            sliderNoise.Needle.Height = 12
            sliderNoise.Needle.Background.BackgroundType = BackgroundType.Gradient
            sliderNoise.Needle.Background.GradientStartColor = SystemColors.ControlLightLight
            sliderNoise.Needle.Background.GradientEndColor = SystemColors.ControlDarkDark
            sliderNoise.Needle.Background.GradientStyle = GradientType.VerticalMiddleOut
            sliderNoise.Needle.LabelFormatMask = "#0 dB"
            sliderNoise.NeedleFillEnabled = True
            sliderNoise.NeedleFill.Color = Color.Crimson
            sliderNoise.Needle.Value = 58
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Slider.SliderWidth">
            <summary>
            Sets and gets the slider's width.
            </summary>
            <value>int</value>
            <example>
            	<code lang="CS" title="C# Example">
            sliderNoise.SliderWidth = 25;
                </code>
            	<code lang="VB" title="Visual Basic Example">
            sliderNoise.SliderWidth = 25
                </code>
            </example>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.SliderNeedle">
            <base>GraphicsServer.GSNet.Widgets.LinearNeedle</base>
            <summary>
            Represents a needle for a slider device.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.SliderNeedle.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.SliderNeedle.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.Thermometer">
            <summary>
            Represents a thermometer device.
            </summary>
            <remarks>
            A thermometer device is exactly like the slider device except that it does not
            have a needle. Instead, the thermometer uses the fill color to flood the scale up to
            the value. A WidgetBorderLabel object can be configured to display the thermometer's
            value.
            </remarks>
            <example>
                The code fragment below creates a thermometer with a border label configured to
                display the value.
                <code lang="CS" title="C#">
            using GraphicsServer.GSNet.Widgets;
            using GraphicsServer.GSNet.Charting;
            ...
            // Create and configure a thermometer device
            Thermometer thermCurrentTemp = new Thermometer("CurrentTemp");
            thermCurrentTemp.Location = new Point(50, 35);
            thermCurrentTemp.Size = new Size(600, 400);
            thermCurrentTemp.ThermometerBackground.Color = SystemColors.ControlLight;
            thermCurrentTemp.ThermometerFill.Color = Color.Red;
            thermCurrentTemp.ThermometerWidth = 14;
            // Set up the scale
            thermCurrentTemp.ScaleThickness = 50;
            thermCurrentTemp.TickSize = 12;
            thermCurrentTemp.ScaleValueMax = 120;
            thermCurrentTemp.MajorTicks = 13;
            thermCurrentTemp.MinorTicks = 4;
            thermCurrentTemp.ScaleLabelFormatMask = "#0";
            // Set the value
            thermCurrentTemp.Value = 57;
             
            // Create a border label and add it to the thermometer
            WidgetBorderLabel labelValue = new WidgetBorderLabel();
            labelValue.Name = "Value";
            labelValue.OffsetLeftRight = 0;
            labelValue.OffsetTopBottom = 10;
            labelValue.RelativeLocation = RelativeLocation.BottomMiddle;
            labelValue.Text = "57° Fahrenheit";
            thermCurrentTemp.BorderLabelList.Add(labelValue);
             
            // Connect the border label to the device value
            thermCurrentTemp.BorderLabelName = "Value";
            thermCurrentTemp.LabelFormatMask = "#0° Fahrenheit";
             
            // Add the device to the widget's list
            this.gsNetWinWidget1.Widget.DeviceList.Add(thermCurrentTemp);
                </code>
            	<code lang="VB" title="VB">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.Widgets
            ...
            ' Create and configure a thermometer device
            Dim thermCurrentTemp As Thermometer = New Thermometer("CurrentTemp")
            thermCurrentTemp.Location = New Point(50, 35)
            thermCurrentTemp.Size = New Size(600, 400)
            thermCurrentTemp.ThermometerBackground.Color = SystemColors.ControlLight
            thermCurrentTemp.ThermometerFill.Color = Color.Red
            thermCurrentTemp.ThermometerWidth = 14
            ' Set up the scale
            thermCurrentTemp.ScaleThickness = 50
            thermCurrentTemp.TickSize = 12
            thermCurrentTemp.ScaleValueMax = 120
            thermCurrentTemp.MajorTicks = 13
            thermCurrentTemp.MinorTicks = 4
            thermCurrentTemp.ScaleLabelFormatMask = "#0"
            ' Set the value
            thermCurrentTemp.Value = 57
             
            ' Create a border label and add it to the thermometer
            Dim labelValue As WidgetBorderLabel = New WidgetBorderLabel
            labelValue.Name = "Value"
            labelValue.OffsetLeftRight = 0
            labelValue.OffsetTopBottom = 10
            labelValue.RelativeLocation = RelativeLocation.BottomMiddle
            labelValue.Text = "57° Fahrenheit"
            thermCurrentTemp.BorderLabelList.Add(labelValue)
             
            ' Connect the border label to the device value
            thermCurrentTemp.BorderLabelName = "Value"
            thermCurrentTemp.LabelFormatMask = "#0° Fahrenheit"
             
            ' Add the device to the widget's list
            Me.GsNetWinWidget1.Widget.DeviceList.Add(thermCurrentTemp)
                </code>
            </example>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.WidgetBorderLabel">WidgetBorderLabel Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Thermometer.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Thermometer.#ctor(System.String)">
            <summary>
            Constructs an instance of this type and sets the string in the DeviceName
            property.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Thermometer.GetDeviceType">
            <summary>
            Returns the object's device type.
            </summary>
            <returns><see cref="T:GraphicsServer.GSNet.Widgets.DeviceType"/></returns>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.DeviceType">DeviceType Enumeration</seealso>
            <example>
                This example iterates through the widget's device list, looking for a thermometer device.
                If it finds one, it does something useful to it. 
                <code lang="CS" title="C# Example">
            foreach (DeviceBase device in this.gsNetWinWidget1.Widget.DeviceList)
            {
                // Get the thermometer device 
                if (device.GetDeviceType() == DeviceType.Thermometer)
                {
                    Thermometer t = (Thermometer) device;
                    
                    // Do something useful
                }
            }
                </code>
            	<code lang="VB" title="Visual Basic Example">
            For Each device As DeviceBase In Me.GsNetWinWidget1.Widget.DeviceList
                ' Get the thermometer device
                If (device.GetDeviceType = DeviceType.Thermometer) Then
             
                    Dim t As Thermometer = CType(device, Thermometer)
                    
                    ' Do something useful
             
                End If
            Next
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Thermometer.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Thermometer.ThermometerBackground">
            <summary>
            Gets the Background object that provides the background for the
            thermometer.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Thermometer.ThermometerFill">ThermometerFill Property</seealso>
            <remarks>
            This property controls the background for the unfilled portion of the
            thermometer. See the ThermometerFill property for information about the filled portion.
            See the Background class for information on background properties.
            </remarks>
            <example>
                The following code fragment sets the colors of the filled and unfilled portions
                of a thermometer.
                <code lang="CS" title="C#">
            thermCurrentTemp.ThermometerBackground.Color = SystemColors.ControlLight;
            thermCurrentTemp.ThermometerFill.Color = Color.Red;
                </code>
            	<code lang="VB" title="VB">
            thermCurrentTemp.ThermometerBackground.Color = SystemColors.ControlLight
            thermCurrentTemp.ThermometerFill.Color = Color.Red
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Thermometer.ThermometerFill">
            <summary>
            Gets the background object used to fill the thermometer up to the the current
            value.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Thermometer.ThermometerBackground">ThermometerBackground Property</seealso>
            <example>
            See the example for the ThemometerBackground property.
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Thermometer.Value">
            <summary>Sets and gets the value of the thermometer.</summary>
            <value>double</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Thermometer.ThermometerWidth">
            <summary>Sets and gets the thermometer's width.</summary>
            <value>int</value>
            <remarks>
            This is the width of the thermometer drawing itself, not the width of the
            device's drawing area.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Thermometer.ThermometerOffset">
            <value>int</value>
            <remarks>
            This value is the offset of the thermometer from the scale. A negative value will
            move the thermometer into the scale.
            </remarks>
            <summary>Sets and gets the offset from the scale.</summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Thermometer.BorderLabelName">
            <summary>
            Sets and gets the name of the WidgetBorderLabel that should display the
            thermometer's value.
            </summary>
            <value>string</value>
            <remarks>
            The Thermometer object searches the BorderLabelList for a WidgetBorderLabel
            object whose Name property matches the specified string. If found, it converts the
            thermometer value to a string, applies the format mask from the LabelFormatMask
            property, and sets the result in the border label's Text property.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.WidgetBorderLabel">WidgetBorderLabel Class</seealso>
            <example>
            	<code lang="CS" title="C#">
            // Create a border label and add it to the thermometer
            WidgetBorderLabel labelValue = new WidgetBorderLabel();
            labelValue.Name = "Value";
            labelValue.OffsetLeftRight = 0;
            labelValue.OffsetTopBottom = 10;
            labelValue.RelativeLocation = RelativeLocation.BottomMiddle;
            labelValue.Text = "57° Fahrenheit";
            thermCurrentTemp.BorderLabelList.Add(labelValue);
             
            // Connect the border label to the device value
            thermCurrentTemp.BorderLabelName = "Value";
            thermCurrentTemp.LabelFormatMask = "#0° Fahrenheit";
                </code>
            	<code lang="VB" title="VB">
            ' Create a border label and add it to the thermometer
            Dim labelValue As WidgetBorderLabel = New WidgetBorderLabel
            labelValue.Name = "Value"
            labelValue.OffsetLeftRight = 0
            labelValue.OffsetTopBottom = 10
            labelValue.RelativeLocation = RelativeLocation.BottomMiddle
            labelValue.Text = "57° Fahrenheit"
            thermCurrentTemp.BorderLabelList.Add(labelValue)
             
            ' Connect the border label to the device value
            thermCurrentTemp.BorderLabelName = "Value"
            thermCurrentTemp.LabelFormatMask = "#0° Fahrenheit"
             
            ' Add the device to the widget's list
            Me.GsNetWinWidget1.Widget.DeviceList.Add(thermCurrentTemp)
                </code>
            </example>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Thermometer.LabelFormatMask">LabelFormatMask Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Thermometer.LabelFormatMask">
            <summary>Sets and gets the mask for formatting the value label.</summary>
            <value>string</value>
            <remarks>
            This property accepts any valid .NET format string that is accepted by the
            ToString() method. See the .NET documentation for more information. If this property is
            not set the label will use the scale's format mask.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Thermometer.BorderLabelName">BorderLabelName Property</seealso>
            <example>
            See the example for the BorderLabelName property.
            </example>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.BulbType">
            <summary>
            The BulbType enum specifies the appearance of the bulb.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.BulbType.Circle">
            <summary>
            
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.Bulb">
            <base>GraphicsServer.GSNet.Charting.PropertyObject</base>
            <summary>
            Bulb class paints a bulb in a StopLight device.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.ImageMapUrl">
            <summary>
            Indicates the URL to load when this object is clicked on.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.ImageMapExtraString">
            <summary>
            Specifies an extra string to embed in the visual object's image map entry.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.TooltipText">
            <summary>
            Indicates the text to display in the popup tooltip.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.BulbName">
            <summary>
            A user assigned Bulb name.  This name is useful for quickly finding a 
            Bulb object if there is a list of Bulbs.
            </summary>
            <value>string</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.BulbType">
            <summary>
            This value determines the appearance of the Bulb.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.BulbType"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.IsActive">
            <summary>
            This value determines whether the bulb is on or off.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.IsVisible">
            <summary>
            This value determines whether the bulb is on or off.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.ActiveFill">
            <summary>
            This is the Background fill the bulb's active state.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.ActiveOutline">
            <summary>
            This is the Outline bulb's active state.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.InactiveFill">
            <summary>
            This is the Background fill the bulb's inactive state.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.InactiveOutline">
            <summary>
            This is the Outline bulb's Inactive state.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Line"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.ActiveOutlineEnabled">
            <summary>
            Gets and sets the whether the active outline is enabled.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.InactiveOutlineEnabled">
            <summary>
            Gets and sets the whether the inactive outline is enabled.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Bulb.StopLight">
            <summary>
            Sets a reference to the device on which this bulb will draw.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.StopLight"/></value>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.BulbList">
            <summary>
            This class is simply a wrapper around the array list that contains the
            list of bulb objects.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.BulbList.#ctor">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.BulbList.#ctor(System.Collections.ICollection)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.BulbList.Add(System.Object)">
            <summary>Adds a Bulb object to the collection.</summary>
            <returns>Index in the list of the added device.</returns>
            <remarks>
            Bulbs display in index order. In a vertical stoplight,
            the first bulb in the list displays at the top of the
            device. In a horizontal stoplight, the first bulb displays
            at the left of the device.
            </remarks>
            <param name="value">Device to add.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.BulbList.Remove(System.Object)">
            <summary>Removes a Bulb object from the collection.</summary>
            <returns>The object passed in should be type Bulb.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.BulbList.RemoveBulb(System.Int32)">RemoveBulb Method</seealso>
            <param name="value">The Bulb object to remove from the 
            BulbList.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.BulbList.SetBulbAt(System.Int32,GraphicsServer.GSNet.Widgets.Bulb)">
            <summary>Add the Bulb object to the list at the specified index.</summary>
            <remarks>
            If a Bulb exists at that index, it is replaced with the specified Bulb.
            If the index does not exist in the list, the Bulb is added to the end of the list.
            </remarks>
            <returns>Index at which the Bulb was set in the list.</returns>
            <param name="index">Zero-based index.</param>
            <param name="bulb">Bulb object to set into the list.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.BulbList.GetBulb(System.Int32)">
            <summary>Retrieve the Bulb object at the specified index.</summary>
            <returns>Bulb object or null if index does not contains an object.</returns>
            <param name="index">zero based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.BulbList.GetBulb(System.String)">
            <summary>
            Retrieve the Bulb object that matches the specified name. 
            </summary>
            <remarks>
            This method searches the list and return the first object 
            whose BulbName property contains the specified string.
            </remarks>
            <returns>Bulb object or null if not found.</returns>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Bulb.BulbName">BulbName Property (GraphicsServer.GSNet.Widgets.Bulb)</seealso>
            <param name="name">The name of the Bulb to return.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.BulbList.RemoveBulb(System.Int32)">
            <summary>Remove the Bulb object at the specified index.</summary>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.BulbList.Remove(System.Object)">Remove Method</seealso>
            <param name="index">zero based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.BulbList.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Charting.TemplateFlags,System.String)">
            <summary>Write properties of all Bulb objects currently in the list out to XML.</summary>
            <returns>This method will return an XmlElement if properties where written. A null value will be returned if there were no properties to write.</returns>
            <param name="doc">This paramenter is the XmlDocument context used to create the new element node.</param>
            <param name="flags">Template flags to control template writing. See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.BulbList.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Charting.TemplateFlags)">
            <summary>
            Read in properties of all the Bulb objects that are children of the passed in Xml
            Node.
            </summary>
            <param name="node">XmlNode that contains the BulbList properties.</param>
            <param name="flags">Template flags to control template writing. See <see cref="T:GraphicsServer.GSNet.Charting.TemplateFlags"/>.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.BulbList.WriteImageMapInfo(System.Web.UI.HtmlTextWriter,System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.StopLightMode">
            <summary>
            The StopLightMode enumeration specifies the mode of the StopLight Device.
            This enumeration controls the behavior of the 
            <see cref="M:GraphicsServer.GSNet.Widgets.StopLight.SetBulbActive(GraphicsServer.GSNet.Widgets.Bulb)"/> method.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.StopLight.SetBulbActive(GraphicsServer.GSNet.Widgets.Bulb)">SetBulbActive(int) Method</seealso>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.StopLightMode.LED">
            <summary>
            When a bulb is turned on, all bulbs below it in the bulb list are also
            turned on and all bulbs above it are turned off.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.StopLightMode.MultiBulb">
            <summary>
            More than one bulb can be on at once.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.StopLightMode.SingleBulb">
            <summary>
            Only one bulb at a time can be on.
            When a bulb is turned on, any other bulb that might be on is turned off.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.StopLight">
            <summary>Represents a stoplight device.</summary>
            <remarks>
            	<para>A stoplight is an all-purpose bulb device. It can have 1 to <em>n</em> bulbs,
                each with an active color and a inactive color.</para>
            	<para>The device has three modes: MultiBulb, SingleBulb, and LED. In MultiBulb
                mode, any number of bulbs can be on at once. Turning on a particular bulb has no
                effect on the state of other bulbs in the device. In SingleBulb mode, only one bulb
                can be on at a time. When you turn a bulb on, all other bulbs are turned off. In
                LED mode, when you turn a bulb on, all bulbs below it in the bulb list are also
                turned on and all bulbs above it are turned off.</para>
            </remarks>
            <example>
                The example below creates a three-bulb stoplight with all bulbs initially inactive.
                
                <code lang="CS" title="C# Example">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.Widgets;
            ...
            // Create a stoplight device and configure it.
            StopLight trafficLight = new StopLight("TrafficLight");
            trafficLight.Location = new Point(80, 10);
            trafficLight.Size = new Size(200, 400);
            trafficLight.Background.Color = Color.DarkGray;
            trafficLight.BulbSpacing = 5;
            trafficLight.StopLightMode = StopLightMode.SingleBulb;
             
            // Make a "stop" bulb
            Bulb bulbStop = new Bulb("Stop");
            bulbStop.ActiveFill.BackgroundType = BackgroundType.Gradient;
            bulbStop.ActiveFill.GradientStyle = GradientType.ThreeDBubble;
            bulbStop.ActiveFill.GradientEndColor = Color.Red;
            bulbStop.ActiveFill.GradientStartColor = Color.LightCoral;
            bulbStop.ActiveOutline.Color = Color.Red;
             
            // Make a "caution" bulb
            Bulb bulbCaution = new Bulb("Caution");
            bulbCaution.ActiveFill.BackgroundType = BackgroundType.Gradient;
            bulbCaution.ActiveFill.GradientStyle = GradientType.ThreeDBubble;
            bulbCaution.ActiveFill.GradientEndColor = Color.Yellow;
            bulbCaution.ActiveFill.GradientStartColor = Color.LightYellow;
            bulbCaution.ActiveOutline.Color = Color.Yellow;
             
            // Make a "go" bulb
            Bulb bulbGo = new Bulb("Go");
            bulbGo.ActiveFill.BackgroundType = BackgroundType.Gradient;
            bulbGo.ActiveFill.GradientStyle = GradientType.ThreeDBubble;
            bulbGo.ActiveFill.GradientEndColor = Color.Lime;
            bulbGo.ActiveFill.GradientStartColor = Color.LightGreen;
            bulbGo.ActiveOutline.Color = Color.Lime;
             
            // Add bulbs to the stoplight
            /* 
             * Note: Bulbs display in index order. Normally, this is top-down 
             * in a vertical stoplight, left-right in a horizontal stoplight. 
             * You can reverse this order by setting the ReverseBulbOrder property.
             */
            trafficLight.BulbList.Add(bulbStop);
            trafficLight.BulbList.Add(bulbCaution);
            trafficLight.BulbList.Add(bulbGo);
             
            // Set properties all bulbs share
            foreach (Bulb bulb in trafficLight.BulbList)
            {
                bulb.IsActive = false;
                bulb.BulbType = BulbType.Circle;
                bulb.InactiveFill.BackgroundType = BackgroundType.Gradient;
                bulb.InactiveFill.GradientStyle = GradientType.ThreeDBubble;
                bulb.InactiveFill.GradientEndColor = SystemColors.ControlDarkDark;
                bulb.InactiveFill.GradientStartColor = SystemColors.ControlLight;
                bulb.InactiveOutline.Color = SystemColors.InactiveBorder;
            }
            // Add the device to the widget
            this.gsNetWinWidget1.Widget.DeviceList.Add(trafficLight);
                </code>
            	<code lang="VB" title="Visual Basic Example">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.Widgets
            ...
            ' Create a stoplight device and configure it.
            Dim trafficLight As StopLight = New StopLight("TrafficLight")
            With trafficLight
                .Location = New Point(80, 10)
                .Size = New Size(200, 400)
                .Background.Color = Color.DarkGray
                .BulbSpacing = 5
                .StopLightMode = StopLightMode.SingleBulb
            End With
             
            ' Make a "stop" bulb
            Dim bulbStop As Bulb = New Bulb("Stop")
            With bulbStop
                .ActiveFill.BackgroundType = BackgroundType.Gradient
                .ActiveFill.GradientStyle = GradientType.ThreeDBubble
                .ActiveFill.GradientEndColor = Color.Red
                .ActiveFill.GradientStartColor = Color.LightCoral
                .ActiveOutline.Color = Color.Red
            End With
             
            ' Make a "caution" bulb
            Dim bulbCaution As Bulb = New Bulb("Caution")
            With bulbCaution
                .ActiveFill.BackgroundType = BackgroundType.Gradient
                .ActiveFill.GradientStyle = GradientType.ThreeDBubble
                .ActiveFill.GradientEndColor = Color.Yellow
                .ActiveFill.GradientStartColor = Color.LightYellow
                .ActiveOutline.Color = Color.Yellow
            End With
             
            ' Make a "go" bulb
            Dim bulbGo As Bulb = New Bulb("Go")
            With bulbGo
                .ActiveFill.BackgroundType = BackgroundType.Gradient
                .ActiveFill.GradientStyle = GradientType.ThreeDBubble
                .ActiveFill.GradientEndColor = Color.Lime
                .ActiveFill.GradientStartColor = Color.LightGreen
                .ActiveOutline.Color = Color.Lime
            End With
             
            ' Add bulbs to the stoplight
            '
            ' Note: Bulbs display in index order. Normally, this is top-down 
            ' in a vertical stoplight, left-right in a horizontal stoplight.
            ' You can reverse this order by setting the ReverseBulbOrder property.
            '
            With trafficLight
                .BulbList.Add(bulbStop)
                .BulbList.Add(bulbCaution)
                .BulbList.Add(bulbGo)
            End With
             
            ' Set properties all bulbs share
            For Each bulb As Bulb In trafficLight.BulbList
                bulb.IsActive = False
                bulb.BulbType = BulbType.Circle
                bulb.InactiveFill.BackgroundType = BackgroundType.Gradient
                bulb.InactiveFill.GradientStyle = GradientType.ThreeDBubble
                bulb.InactiveFill.GradientEndColor = SystemColors.ControlDarkDark
                bulb.InactiveFill.GradientStartColor = SystemColors.ControlLight
                bulb.InactiveOutline.Color = SystemColors.InactiveBorder
            Next
             
            ' Add the device to the widget
            Me.GsNetWinWidget1.Widget.DeviceList.Add(trafficLight)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.StopLight.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.StopLight.#ctor(System.String)">
            <summary>
            Constructs an instance of this type and sets the string argument in the
            DeviceName property.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.StopLight.GetDeviceType">
            <summary>Gets the object's device type.</summary>
            <returns><see cref="T:GraphicsServer.GSNet.Widgets.DeviceType"/></returns>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.DeviceType">DeviceType Enumeration</seealso>
            <example>
                This example iterates through the device list, looking for a stoplight device. If
                one is found, the bulb display order is either reversed or returned to normal,
                depending on the checked state of checkBox1.
                <code lang="CS" title="C# Example">
            private void checkBox1_CheckStateChanged(object sender, System.EventArgs e)
            {
                foreach (DeviceBase device in this.gsNetWinWidget1.Widget.DeviceList)
                {
                    // Get the stoplight device 
                    if (device.GetDeviceType() == DeviceType.StopLight)
                    {
                        StopLight s = (StopLight) device;
             
                        if (this.checkBox1.CheckState &gt; 0)
                            // Reverse the display order of the bulbs
                            s.ReverseBulbOrder = true;
                        else
                            // Restore normal display order
                            s.ReverseBulbOrder = false;
             
                        // Redraw the widget
                        this.gsNetWinWidget1.Invalidate();                
                    }
                }
            }
                </code>
            	<code lang="VB" title="Visual Basic Example">
            Private Sub CheckBox1_CheckStateChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles CheckBox1.CheckStateChanged
                For Each device As DeviceBase In Me.GsNetWinWidget1.Widget.DeviceList
                    ' Get the stoplight device
                    If (device.GetDeviceType = DeviceType.StopLight) Then
             
                        Dim s As StopLight = CType(device, StopLight)
                        If (Me.CheckBox1.CheckState) Then
                            ' Reverse the display order of the bulbs
                            s.ReverseBulbOrder = True
                        Else
                            ' Restore normal display order
                            s.ReverseBulbOrder = False
                        End If
             
                        ' Redraw the widget
                        Me.GsNetWinWidget1.Invalidate()
                    End If
                Next
            End Sub
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.StopLight.GetScaleValue(System.Drawing.PointF)">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.StopLight.SetBulbActive(GraphicsServer.GSNet.Widgets.Bulb)">
            <summary>
            Turns on the bulb that matches the passed in Bulb object.
            </summary>
            <remarks>
            This method searches the bulblist for a Bulb object that matches
            the object passed in. If found, the bulb's
            IsActive property is set to true. The IsActive property setting for
            other bulbs in the list might be changed as well, depending on the value
            of the <see cref="P:GraphicsServer.GSNet.Widgets.StopLight.StopLightMode"/> property.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.StopLight.StopLightMode">StopLightMode Enumeration</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Bulb.IsActive">IsActive Property</seealso>
            <example>
                The code fragment below responds to a mouse click event by turning on the bulb
                that received the click. 
                <code lang="CS" title="C# Example">
            // Turn off the selectable state for all widget objects 
            // so mouse clicks are not interpreted as selections.
            this.gsNetWinWidget1.Widget.SetAllObjectsIsSelectable(false);
            this.gsNetWinWidget1.Widget.WidgetEventsToEnable.EnableWidgetMouseClickEvent = true;
             
            ... 
             
            private void gsNetWinWidget1_MouseClickWidgetEvent(object sender, GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs e)
            {
                if (e.Bulb != null)
                {
                    // Get the stoplight device 
                    StopLight s = (StopLight) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("TrafficLight"); 
                    //Turn on the bulb receiving the click  
                    s.SetBulbActive(e.Bulb); 
                    // Redraw the widget 
                    this.gsNetWinWidget1.Invalidate();            
                }
            }
                </code>
            	<code lang="VB" title="Visual Basic Example">
            ' Turn off the selectable state for all widget objects 
            ' so mouse clicks are not interpreted as selections.
            Me.GsNetWinWidget1.Widget.SetAllObjectsIsSelectable(False)
            ' Enable the mouse click event
            Me.GsNetWinWidget1.Widget.WidgetEventsToEnable.EnableWidgetMouseClickEvent = True
               
            ... 
             
            Private Sub GsNetWinWidget1_MouseClickWidgetEvent(ByVal sender As Object, ByVal e As GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs) Handles GsNetWinWidget1.MouseClickWidgetEvent
                If Not (e.Bulb Is Nothing) Then
                    ' Get the stoplight device
                    Dim s As StopLight = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("TrafficLight"), StopLight)
                    ' Turn on the bulb receiving the click
                    s.SetBulbActive(e.Bulb)
                    ' Redraw the widget
                    Me.GsNetWinWidget1.Invalidate()
                End If
            End Sub
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.StopLight.SetBulbActive(System.String)">
            <summary>
            Turns on the bulb with the specified name.
            </summary>
            <remarks>
            This method searches the bulblist for a Bulb object whose BulbName
            property matches the passed in string. If found, the bulb's
            IsActive property is set to true. The IsActive property setting for
            other bulbs in the list might be changed as well, depending on the value
            of the <see cref="P:GraphicsServer.GSNet.Widgets.StopLight.StopLightMode"/> property.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.StopLight.StopLightMode">StopLightMode Enumeration</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Bulb.IsActive">IsActive Property</seealso>
            <example>
                The code fragment below turns on a named bulb in a stoplight device. 
                <code lang="CS" title="C# Example">
            // Get the stoplight device 
            StopLight s = (StopLight) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("TrafficLight"); 
            // Turn on the "go" bulb
            s.SetBulbActive("Go");
                </code>
            	<code lang="VB" title="Visual Basic Example">
            ' Get the stoplight device
            Dim s As StopLight = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("TrafficLight"), StopLight)
            ' Turn on the "go" bulb
            s.SetBulbActive("Go")
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.StopLight.SetBulbActive(System.Int32)">
            <summary>
            Turns on the bulb at the specified index in the bulb list.
            </summary>
            <remarks>
            This method sets a value of true in the IsActive property of the Bulb object 
            at the specified index in the bulblist. The IsActive property setting for
            other bulbs in the list might be changed as well, depending on the value
            of the <see cref="P:GraphicsServer.GSNet.Widgets.StopLight.StopLightMode"/> property.
            <para>Pass in -1 to set all bulbs inactive.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.StopLight.StopLightMode">StopLightMode Enumeration</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Bulb.IsActive">IsActive Property</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.BulbList">BulbList Class</seealso>
            <example>
            	<code lang="CS" title="C# Example">
            // Turn off all bulbs in the list
            stoplightStatus.SetBulbActive(-1);
                </code>
            	<code lang="VB" title="Visual Basic Example">
            ' Turn off all bulbs In the list
            stoplightStatus.SetBulbActive(-1)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.StopLight.AutoReSize">
            Derived classes must implement the AutoReSize method so that the
            device will be best fit into the rectangle its contained within.
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.StopLight.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.StopLight.IsVertical">
            <summary>
            Determines whether the stoplight device is vertical or horizontal.
            </summary>
            <remarks>
            If true, the device is vertical. Otherwise, it is horizontal. The default is
            true.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.StopLight.ReverseBulbOrder">
            <summary>
            Determines whether the bulb order is reversed.
            </summary>
            <remarks>
            	<para>If true, the bulb order is reversed. Otherwise, it is not. The default is
                false.</para>
            	<para>Note that only the display order is reversed, not the order in the bulb list.
                This means that for devices in StopLightMode.LED, setting the <em>n</em>th bulb
                active causes all bulbs below it in the list to be set active as well, regardless
                of the displayed positions of the bulbs.</para>
            </remarks>
            <value>bool</value>
            <example>
                The code fragment below reverses the order of the bulbs in a stoplight device
                when checkBox1 is checked and returns bulbs to the normal order when checkBox1 is
                unchecked.
                <code lang="CS" title="C# Example">
            private void checkBox1_CheckStateChanged(object sender, System.EventArgs e)
            {
                // Get the stoplight device 
                StopLight s = (StopLight) this.gsNetWinWidget1.Widget.DeviceList.GetDevice("TrafficLight");
             
                if (this.checkBox1.CheckState &gt; 0)
                    // Reverse the display order of the bulbs
                    s.ReverseBulbOrder = true;
                else
                    // Restore normal display order
                    s.ReverseBulbOrder = false;
             
                // Redraw the widget
                this.gsNetWinWidget1.Invalidate();
            }
                </code>
            	<code lang="VB" title="Visual Basic Example">
            Private Sub CheckBox1_CheckStateChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles CheckBox1.CheckStateChanged
                ' Get the stoplight device
                Dim s As StopLight = CType(Me.GsNetWinWidget1.Widget.DeviceList.GetDevice("TrafficLight"), StopLight)
             
                If (Me.CheckBox1.CheckState) Then
                    ' Reverse the display order of the bulbs
                    s.ReverseBulbOrder = True
                Else
                    ' Restore normal display order
                    s.ReverseBulbOrder = False
                End If
             
                ' Redraw the widget
                Me.GsNetWinWidget1.Invalidate()
            End Sub
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.StopLight.BulbSpacing">
            <summary>
            Sets and gets the percent of space above and below each bulb.
            </summary>
            <remarks>
            The value is a percentage of the height of a bulb's bounding
            rectangle if the device is vertical or, if it is horizontal, a 
            percentage of the bounding rectangle's width.
            <para>The default is 3. A negative value causes the bulbs to overlap.</para>
            </remarks>
            <value>float</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.StopLight.BulbList">
            <summary>
            Gets the Bulblist object that maintains the device's collection of bulbs.
            </summary>
            <remarks>
            This property exists to provide access to the properties and methods of the
            underlying Bulblist object. See the Bulblist class for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.BulbList"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.BulbList">BulbList Class</seealso>
            <example>
                The code fragment below configures all bulbs in the list with the same inactive
                outline and fill. 
                <code lang="CS" title="C# Example">
            foreach (Bulb bulb in stoplightStatus.BulbList)
            {
                bulb.InactiveFill.BackgroundType = BackgroundType.Gradient;
                bulb.InactiveFill.GradientStyle = GradientType.ThreeDBubble;
                bulb.InactiveFill.GradientEndColor = SystemColors.ControlDarkDark;
                bulb.InactiveFill.GradientStartColor = SystemColors.ControlLight;
                bulb.InactiveOutline.Color = SystemColors.InactiveBorder;
            }
                </code>
            	<code lang="VB" title="Visual Basic Example">
            For Each bulb As Bulb In stoplightStatus.BulbList
                bulb.InactiveFill.BackgroundType = BackgroundType.Gradient
                bulb.InactiveFill.GradientStyle = GradientType.ThreeDBubble
                bulb.InactiveFill.GradientEndColor = SystemColors.ControlDarkDark
                bulb.InactiveFill.GradientStartColor = SystemColors.ControlLight
                bulb.InactiveOutline.Color = SystemColors.InactiveBorder
            Next
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.StopLight.StopLightMode">
            <summary>
            Sets and gets the StopLightMode.
            </summary>
            <remarks>
            The stoplight mode determines how bulbs are turned on and off. See the
            StopLightMode enumeration for more information.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.StopLightMode"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.StopLightMode">StopLightMode Enumeration</seealso>
            <example>
            See the example for the class Overview topic.
            </example>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.DeviceType">
            <summary>Specifies the type of device.</summary>
            <remarks>
            This enumeration is used primarily by the built-in devices to identify themselves
            when writing properties out to XML and then reading properties back in. When reading
            properties back in, this enumeration helps determine which device class to instantiate
            and add to the device list.
            </remarks>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.DeviceType.Custom">
            <summary>
            A device type that can be used by third party developers when creating their own
            custom device classes.
            </summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.DeviceType.Gauge">
            <summary>Gauge device type.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.DeviceType.Meter">
            <summary>Meter device type.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.DeviceType.Slider">
            <summary>Slider device type.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.DeviceType.StopLight">
            <summary>StopLight device type.</summary>
        </member>
        <member name="F:GraphicsServer.GSNet.Widgets.DeviceType.Thermometer">
            <summary>Thermometer device type.</summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.DeviceList">
            <summary>
            This class is simply a wrapper around the array list that contains the
            list of Device objects.  Note that the Widget class contains the
            <see cref="P:GraphicsServer.GSNet.Widgets.Widget.DeviceList"/> property which
            is of type DeviceList.
            </summary>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Widget.DeviceList">DeviceList Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceList.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceList.#ctor(System.Collections.ICollection)">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceList.Add(System.Object)">
            <summary>Adds a new Device object to the list.</summary>
            <returns>Index in the list of the added device.</returns>
            <remarks>
            This method is overridden for connecting the Device object to internal
            structures.
            </remarks>
            <example>
                The following code creates a new device and adds it to a widget's device list. 
                <code lang="CS" title="C# Example">
            //Create and configure a meter device
            Meter meterWind = new Meter("Wind Speed");
            meterWind.Size = new Size(480, 300);
            meterWind.Location= new Point(5,5);
            meterWind.ScaleLabelFormatMask = "#0";
            meterWind.ScaleValueMax = 60;
            meterWind.ScaleValueMin = 0;
            meterWind.MajorTicks = 7;
            meterWind.MinorTicks = 5;
             
            //Create a needle and add it to the meter's needle collection
            MeterNeedle needleKnots = new MeterNeedle("Knots");
            needleKnots.Value = 17;
            int indexNeedleKnots = meterWind.NeedleList.Add(needleKnots);
             
            //Create a border label and add it to the meter's border label collection
            WidgetBorderLabel labelTitle = new WidgetBorderLabel();
            labelTitle.Text = meterWind.DeviceName;
            labelTitle.RelativeLocation = RelativeLocation.BottomMiddle;
            int indexLabelTitle = meterWind.BorderLabelList.Add(labelTitle);
             
            //Add the meter to the widget's device collection
            int indexMeterWind = this.gsNetWinWidget1.Widget.DeviceList.Add(meterWind);
                </code>
            	<code lang="VB" title="VB Example">
            'Create and configure a meter device
            Dim meterWind As Meter = New Meter("Wind")
            meterWind.Size = New Size(480, 300)
            meterWind.Location = New Point(5, 5)
            meterWind.ScaleLabelFormatMask = "#0"
            meterWind.ScaleValueMax = 60
            meterWind.ScaleValueMin = 0
            meterWind.MajorTicks = 7
            meterWind.MinorTicks = 5
             
            'Create a needle and add it to the meter's needle collection
            Dim needleKnots As MeterNeedle = New MeterNeedle("Knots")
            needleKnots.Value = 17
            Dim indexNeedleKnots As Integer = meterWind.NeedleList.Add(needleKnots)
             
            'Create a border label and add it to the meter's border label collection
            Dim labelTitle As WidgetBorderLabel = New WidgetBorderLabel
            labelTitle.Text = meterWind.DeviceName
            labelTitle.RelativeLocation = RelativeLocation.BottomMiddle
            Dim indexLabelTitle As Integer = meterWind.BorderLabelList.Add(labelTitle)
             
            'Add the meter to the widget's device collection
            Dim indexMeterWind As Integer = Me.GsNetWinWidget1.Widget.DeviceList.Add(meterWind)
                </code>
            </example>
            <param name="value">Device to add.</param>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.DeviceList.RemoveDevice(System.Int32)">RemoveDevice Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceList.Remove(System.Object)">
            <summary>
            Removes a device from the collection. 
            </summary>
            <remarks>
            The object passed in should be type <see cref="T:GraphicsServer.GSNet.Widgets.DeviceBase"/>.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.DeviceList.RemoveDevice(System.Int32)">RemoveDevice Method</seealso>
            <example>
                The example below includes fragments of code that creates a device, adds it to
                the device list, and then later removes it from the list.
                <code lang="CS" title="C# Example">
            //Create a meter device
            Meter meterWind = new Meter("Wind");
            ...
            //Add the meter to the widget's device collection
            this.gsNetWinWidget1.Widget.DeviceList.Add(meterWind);
            ...
            //Remove the meter from the device collection
            this.gsNetWinWidget1.Widget.DeviceList.Remove((DeviceBase) meterWind);
                </code>
            	<code lang="VB" title="VB Example">
            'Create a meter device
            Dim meterWind As Meter = New Meter("Wind")
            ...
            'Add the meter to the widget's device collection
            Me.GsNetWinWidget1.Widget.DeviceList.Add(meterWind)
            ...
            'Remove the meter from the device collection
            Me.GsNetWinWidget1.Widget.DeviceList.Remove(CType(meterWind, DeviceBase))
                </code>
            </example>
            <param name="value">The Device object to remove from the 
            DeviceList.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceList.SetDeviceAt(System.Int32,GraphicsServer.GSNet.Widgets.DeviceBase)">
            <summary> 
            Adds a Device object to the device list at the specified index. 
            </summary>
            <remarks>
            If a device exists at the specified index, it is replaced with the object
            passed in. If the index does not exist in the list, the device is added
            to the end of the list.
            </remarks>
            <param name="index">Zero-based index.</param>
            <param name="device">Device object to set into the list.</param>
            <returns>Index at which the Device was set in the list.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.DeviceList.Add(System.Object)">Add Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceList.GetDevice(System.Int32)">
            <summary>Retrieves the Device object at a particular index in the device list.</summary>
            <returns>Device object or null if index does not match an object.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.DeviceList.GetDevice(System.Int32)">GetDevice(string) Method</seealso>
            <param name="index">Zero-based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceList.GetDevice(System.String)">
            <summary>Returns the device that matches the specified name.</summary>
            <remarks>
            This method searches the devices in the collection and returns the first one that
            contains the specified string in its 
            <see cref="P:GraphicsServer.GSNet.Widgets.DeviceBase.DeviceName">DeviceName</see>
            property.
            </remarks>
            <returns>Device object or null if not found.</returns>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.DeviceBase.DeviceName">DeviceName Property</seealso>
            <example>
                The following code retrieves a named device from the collection and sets its
                value. Note that the value returned by GetDevice() must be cast as the particular
                device type. 
                <code lang="CS" title="C# Example">
            Widget wgt = this.gsNetWinWidget1.Widget;
            Thermometer temp = (Thermometer) wgt.DeviceList.GetDevice("SeaLevelTemp");
            temp.Value = 57;
                </code>
            	<code lang="VB" title="VB Example">
            Dim wgt As Widget = Me.GsNetWinWidget1.Widget
            Dim temp As Thermometer = CType(wgt.DeviceList.GetDevice("SeaLevelTemp"), Thermometer)
            temp.Value = 57
                </code>
            </example>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.DeviceList.GetDevice(System.Int32)">GetDevice(int) Method</seealso>
            <param name="name">The name of the device to return.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceList.RemoveDevice(System.Int32)">
            <summary>Remove the Device object at the specified index in the device list.</summary>
            <example>
                The example below includes fragments of code that creates a device, adds it to
                the device list, and then later removes it from the list.
                <code lang="CS" title="C# Example">
            //Create a meter device
            Meter meterWind = new Meter("Wind");
            ...
            //Add the meter to the widget's device collection
            int indexMeterWind = this.gsNetWinWidget1.Widget.DeviceList.Add(meterWind);
            ...
            //Remove the meter from the device collection
            this.gsNetWinWidget1.Widget.DeviceList.RemoveDevice(indexMeterWind);
                </code>
            	<code lang="VB" title="VB Example">
            'Create a meter device
            Dim meterWind As Meter = New Meter("Wind")
            ...
            'Add the meter to the widget's device collection
            Dim indexMeterWind As Integer = Me.GsNetWinWidget1.Widget.DeviceList.Add(meterWind)
            ...
            'Remove the meter from the device collection
            Me.GsNetWinWidget1.Widget.DeviceList.RemoveDevice(indexMeterWind)
                </code>
            </example>
            <param name="index">Zero-based index.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceList.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags,System.String)">
            <summary>Writes properties of all Device objects currently in the list out to XML.</summary>
            <returns>
            This method returns an XmlElement if properties are written. A null value is
            returned if there are no properties to write.
            </returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.DeviceList.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">ReadProperties Method</seealso>
            <param name="doc">The XmlDocument context used to create the new element node.</param>
            <param name="flags">Template flags to control template writing.  See <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>.</param>
            <param name="nodeName">Name that will be given to the element node.</param>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags">TemplateWidgetFlags Enumeration</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceList.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">
            <summary>
            Reads properties of all the device objects that are children of the passed in Xml
            Node.
            </summary>
            <param name="node">XmlNode that contains the DeviceList properties.</param>
            <param name="flags">Template flags to control template writing.  See <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>.</param>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags">TemplateWidgetFlags Enumeration</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.DeviceList.WriteImageMapInfo(System.Web.UI.HtmlTextWriter)">
            <summary>
            Wrties HTML image map information (shape, coords, url, tooltip) for all objects
            in the device list.
            </summary>
            <param name="output">HTML fragment</param>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.DeviceAddEventArgs">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.GSNetWebWidget">
            <summary>
            The GSNetWebWidget object is a Web Control that encapsulates
            a Widget object.  This Web Control is a native .NET server control.
            It can be placed on a web form to provide easy access to the Widget 
            object configuration properties.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.GSNetWebWidget.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.GSNetWebWidget.Dispose">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.GSNetWebWidget.RegenDesignTimeHtml">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.GSNetWebWidget.SaveToViewState(System.String,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">
            <summary>
            Saves a subset of widget properties to a view state.
            </summary>
            <remarks>
                Widget properties are saved to the GSNetWebWidget's ViewState based on flags in the
                <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/> parameter. The
                TemplateWidgetFlags class provides the means to save specific subsets of the Widget
                properties. To save different sets of properties, simply call this method multiple
                times using a different name parameter with each call. 
                <para>When loading the properties back in from the ViewState, use the
                <see cref="M:GraphicsServer.GSNet.Widgets.GSNetWebWidget.LoadFromViewState(System.String,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)"/> method.
                Note that LoadFromViewState has two overrides. One override requires a TemplateWidgetFlags
                parameter and the other override does not. The easiest
                method to load properties back into the Widget is the override that does not
                require the TemplateWidgetFlags parameter.</para>
            </remarks>
            <param name="name">The name specifies which state bag to save
            the Widget properties under.
            </param>
            <param name="flags">The template flags specify which
            Widget properties you want to save and which you want to ignore. For more
            information see <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>.
            </param>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags">TemplateWidgetFlags Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.GSNetWebWidget.SaveToViewState(System.String)">
            <summary>
            Saves all the widget's properties to the GSNetWebWidget's ViewState.
            </summary>
            <remarks>
            Internally this method allocates a TemplateWidgetFlags class and sets all the 
            ignore flags to false, which causes all properties to be saved.
            </remarks>
            <param name="name">The name specifies which state bag to save
            the widget properties under.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.GSNetWebWidget.LoadFromViewState(System.String,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">
            <summary>
            Loads specified Widget properties from a previously saved
            ViewState. 
            </summary>
            <remarks>
            The name parameter must equal the name parameter used when the 
            properties were saved. Note that this method requires a 
            <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>
            object to specify which properties to load. If you would like to
            load all the properties saved for the specified name, then it is much
            easier to call the overload that does not require the TemplateWidgetFlags
            object.
            </remarks>
            <param name="name">The name specifies which state bag to load
            the Widget properties under.</param>
            <param name="flags">The template flags specify which
            Widget properties you want to load and which you want to ignore.  For more
            information see <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>.</param>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags">TemplateWidgetFlags Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.GSNetWebWidget.LoadFromViewState(System.String)">
            <summary>
            Loads all Widget properties from a previously saved ViewState.
            </summary>
            <remarks>
            The name parameter must equal the name parameter used when the properties were saved.
            Internally this method allocates a TemplateWidgetFlags class and sets all the 
            ignore flags to false which causes all properties that were saved out
            to be loaded.
            </remarks>
            <param name="name">The name specifies which state bag to load
            the Widget properties under.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.BackColor">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.BorderColor">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.BorderWidth">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.Font">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.CssClass">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.ForeColor">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.Width">
            <summary>
            Sets and gets the width of the control.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.Height">
            <summary>Sets and gets the height of the control.</summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.ImageFormat">
            <summary>
            Bitmap image format.
            </summary>
            <value>ImageFormat</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.Widget">
            <summary>
            Gets the encapsulated Widget object.
            </summary>
            <remarks>
            This property encapsulates the Widget object. See the 
            <see cref="T:GraphicsServer.GSNet.Widgets.Widget"/> object for more information
            regarding the capabilities of this object.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.Widget"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Widget">Widget Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.LogDeletedFiles">
            <summary>
            Enables and disables logging of deleted image files.
            </summary>
            <value>bool</value>
            <remarks>
            Setting this property to true will log all deleted files. The log file
            will be created in the run-time image folder. The name of the file
            is GSNetDeletedFiles.log.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.RunTimeImagesFolderLocation">
            <summary>
            Sets and gets the relative location of the folder where temporary image files created
            by the control are stored.
            </summary>
            <remarks>
            Use the <see cref="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation"/> enumeration
            to specify the relative location for the run-time image folder. The name of this
            folder can be specified using the <see cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.RunTimeDir"/> property.
            <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation">RunTimeImagesFolderLocation Enumeration</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.RunTimeDir">RunTimeDir Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.RunTimeDir">
             <summary>
             Assigns the name of the run-time image folder where generated image files
             are stored and referenced by the client side generated html. 
             </summary>
             <value>string</value>
             <remarks>
             The value of this property can be either a single directory name
             or a relative path plus directory name (for example, MyImages, images/.../MyImages).
             <para>
             The location of the directory is determined by setting of this property plus the 
             setting of the <see cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.RunTimeImagesFolderLocation"/> property.
            </para>
             <para>
             If the RunTimeDir property is left blank, the control
             checks the HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\RunTimeDir
             registry setting for a run-time image folder name.
             If that registry setting does not exist, the run-time image folder name
             defaults to GSNetImages.
             </para>
             <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
             </remarks>
             <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.RunTimeImagesFolderLocation">RunTimeImagesFolderLocation Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.FilesToDelete">
            <summary>
            Specifies the number of run-time image files to delete each time the control's
            directory cleanup routine executes.
            </summary>
            <value>int</value>
            <remarks>
            The control's directory cleanup routine runs each time the control loads.
            If this property is not set (i.e. a value of -1 means not set), then the 
            HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\FilesToDelete
            registry key is checked for a value. If that key does not exist, then
            the number of files to delete defaults to 20.
            <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.MinutesOld">MinutesOld Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.MinutesOld">
            <summary>
            Specifies the age criteria, in minutes, for deleting temporary image files
            created by the control.  
            </summary>
            <value>int</value>
            <remarks>
            If the MinutesOld property is not set (i.e. a value or -1 means not set), then the 
            HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\MinutesOld
            registry key is checked for a value. If that key does not exist, then
            the default setting is 30 minutes.
            <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.FilesToDelete">FilesToDelete Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.DeleteASPNetTempFiles">
            <summary>
            Deletes temporary files the web control creates from the 'ASPNET Temporary Files' folder.
            </summary>
            <value>bool</value>
            <remarks>
            <para>
            Setting this property to true will log delete all temporary files the web
            control creates in the 'ASPNET Temporary Files' folder. The policy for
            deleting these files will be defined by the FilesToDelete and MinutesOld
            properties.
            </para>
            <para>
            This property works in conjunction with the DeleteASPNetTempFileMode property. The
            DeleteASPNetTempFileMode property will determine whether to delete all files or just the ones
            created by the web control.
            </para>
            <para>
            A log file in the ASPNET Temporary Files directory will store the filenames 
            that the web control has created but not yet deleted.
            </para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.DeleteASPNetTempFileMode">
            <summary>
            Sets whether to delete all files or just the ones created by the web control.
            </summary>
            <value>DeleteASPNetTempFileMode</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.InDesignTime">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.RuntimeImageFileName">
            <summary>
            Gets the full path and file name of the run-time
            image file that was generated and referenced in the client side
            HTML page. 
            </summary>
            <value>string</value>
            <remarks>
            Note that this property will return an empty string
            if the control has not yet rendered.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.ImageFileMode">
            <summary>
            Determines how the temporary images are created when
            the Web page is executed.
            </summary>
            <remarks>The default setting is ImageFileMode.WriteToDisk. If your application does not
            have the security permissions needed for this mode, you can set ImageFileMode.ByteStream.</remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.ImageHardDiskFolder">
            <summary>
            Sets and gets a path to the physical folder on the machine
            where temporary images will be written.
            </summary>
            <remarks>
            This property is ignored unless the RunTimeImagesFolderLocation
            property is set to RunTimeImagesFolderLocation.UserDefined and the
            ImageVirtualDirectory property is set to the name of a virtual directory. 
            The virtual directory, through its Web site virtual path, must match up  
            with the ImageHardDiskFolder so that they are both pointing to the same
            folder on the machine. If both paths do not point to the same folder,
            images will not display when the Web page is downloaded to the client browser.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.RunTimeImagesFolderLocation">RunTimeImagesFolderLocation Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.ImageVirtualDirectory">ImageVirtualDirectory Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.ImageVirtualDirectory">
            <summary>
            Sets and gets the name of the virtual folder where temporary images 
            will be referenced from the Web page. 
            </summary>
            <remarks>
            This property is ignored unless the RunTimeImagesFolderLocation property
            is set to RunTimeImagesFolderLocation.UserDefined and the ImageHardDiskFolder
            property is set with a path to the physical folder. The virtual directory, through
            its Web site virtual path, must match up with the ImageHardDiskFolder
            so that they are both pointing to the same folder on the machine. If both paths do 
            not point to the same folder, images will not display when the Web page is downloaded 
            to the client browser.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.RunTimeImagesFolderLocation">RunTimeImagesFolderLocation Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.ImageHardDiskFolder">ImageHardDiskFolder Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWebWidget.AnimatedGifEnabled">
            <summary>
            Enables and disables whether to use the AnimatedGif defined
            within the Widget.
            </summary>
            <value>bool</value>
            <remarks>
            <para>
            If this property is set to true, the AnimatedGif produced by the
            widget is displayed on the Web browser instead of the current widget image. 
            </para>
            <para>
            When false, the current widget image is displayed.</para>
            </remarks>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget">
            <summary>
            The LiveGSNetWebWidget object is a Web Control that encapsulates
            a Widget object.  This Web Control is a Live control, which can be updated
            using the other Live controls and the update doesn't require a page refresh.
            It can be placed on a web form to provide easy access to the Widget 
            object configuration properties.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.Dispose">
            <exclude/>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.RegenDesignTimeHtml">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.Width">
            <summary>
            Sets and gets the width of the control.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.Height">
            <summary>Sets and gets the height of the control.</summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.ImageFormat">
            <summary>
            Bitmap image format.
            </summary>
            <value>ImageFormat</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.Widget">
            <summary>
            Gets the encapsulated Widget object.
            </summary>
            <remarks>
            This property encapsulates the Widget object. See the 
            <see cref="T:GraphicsServer.GSNet.Widgets.Widget"/> object for more information
            regarding the capabilities of this object.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.Widget"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Widget">Widget Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.LogDeletedFiles">
            <summary>
            Enables and disables logging of deleted image files.
            </summary>
            <value>bool</value>
            <remarks>
            Setting this property to true will log all deleted files. The log file
            will be created in the run-time image folder. The name of the file
            is GSNetDeletedFiles.log.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.RunTimeImagesFolderLocation">
            <summary>
            Sets and gets the relative location of the folder where temporary image files created
            by the control are stored.
            </summary>
            <remarks>
            Use the <see cref="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation"/> enumeration
            to specify the relative location for the run-time image folder. The name of this
            folder can be specified using the <see cref="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.RunTimeDir"/> property.
            <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.RunTimeImagesFolderLocation">RunTimeImagesFolderLocation Enumeration</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.RunTimeDir">RunTimeDir Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.RunTimeDir">
             <summary>
             Assigns the name of the run-time image folder where generated image files
             are stored and referenced by the client side generated html. 
             </summary>
             <value>string</value>
             <remarks>
             The value of this property can be either a single directory name
             or a relative path plus directory name (for example, MyImages, images/.../MyImages).
             <para>
             The location of the directory is determined by setting of this property plus the 
             setting of the <see cref="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.RunTimeImagesFolderLocation"/> property.
            </para>
             <para>
             If the RunTimeDir property is left blank, the control
             checks the HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\RunTimeDir
             registry setting for a run-time image folder name.
             If that registry setting does not exist, the run-time image folder name
             defaults to GSNetImages.
             </para>
             <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
             </remarks>
             <seealso cref="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.RunTimeImagesFolderLocation">RunTimeImagesFolderLocation Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.FilesToDelete">
            <summary>
            Specifies the number of run-time image files to delete each time the control's
            directory cleanup routine executes.
            </summary>
            <value>int</value>
            <remarks>
            The control's directory cleanup routine runs each time the control loads.
            If this property is not set (i.e. a value of -1 means not set), then the 
            HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\FilesToDelete
            registry key is checked for a value. If that key does not exist, then
            the number of files to delete defaults to 20.
            <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.MinutesOld">MinutesOld Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.MinutesOld">
            <summary>
            Specifies the age criteria, in minutes, for deleting temporary image files
            created by the control.  
            </summary>
            <value>int</value>
            <remarks>
            If the MinutesOld property is not set (i.e. a value or -1 means not set), then the 
            HKEY_LOCAL_MACHINE\SOFTWARE\Graphics Server Technologies\GSNet\MinutesOld
            registry key is checked for a value. If that key does not exist, then
            the default setting is 30 minutes.
            <para>See <a href="..\howto\gshowManagingWebImageFiles.htm">Managing Web Image Files</a> for more information.</para>
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.FilesToDelete">FilesToDelete Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.DeleteASPNetTempFiles">
            <summary>
            Deletes temporary files the web control creates from the 'ASPNET Temporary Files' folder.
            </summary>
            <value>bool</value>
            <remarks>
            <para>
            Setting this property to true will log delete all temporary files the web
            control creates in the 'ASPNET Temporary Files' folder. The policy for
            deleting these files will be defined by the FilesToDelete and MinutesOld
            properties.
            </para>
            <para>
            This property works in conjunction with the DeleteASPNetTempFileMode property. The
            DeleteASPNetTempFileMode property will determine whether to delete all files or just the ones
            created by the web control.
            </para>
            <para>
            A log file in the ASPNET Temporary Files directory will store the filenames 
            that the web control has created but not yet deleted.
            </para>
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.DeleteASPNetTempFileMode">
            <summary>
            Sets whether to delete all files or just the ones created by the web control.
            </summary>
            <value>DeleteASPNetTempFileMode</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.InDesignTime">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.RuntimeImageFileName">
            <summary>
            Gets the full path and file name of the run-time
            image file that was generated and referenced in the client side
            HTML page. 
            </summary>
            <value>string</value>
            <remarks>
            Note that this property will return an empty string
            if the control has not yet rendered.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.ImageFileMode">
            <summary>
            The ImageFileMode will determine how the image will get created when
            the web page is executed.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.ImageHardDiskFolder">
            <summary>
            The ImageHardDiskFolder assigns the physical folder on the machine
            where the images will be written to. Requires that the 
            RunTimeImagesFolderLocation is set to UserDefined.
            </summary>
            <remarks>
            When using the ImageHardDiskFolder property, then one must also
            set RunTimeImagesFolderLocation to UserDefined and assign the
            ImageVirtualDirectory. The ImageVirtualDirectory, through
            its website virtual path, must match up with the ImageHardDiskFolder
            so that they are both pointing to the same folder on the machine. It
            is the user's duty to verify both paths point to the same folder,
            otherwise one would presumably get a broken image when running the web page
            in a web browser.
            </remarks>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.LiveGSNetWebWidget.ImageVirtualDirectory">
            <summary>
            The ImageVirtualDirectory assigns the virtual folder where the images 
            will be referenced from the web page. Requires that the 
            RunTimeImagesFolderLocation is set to UserDefined.
            </summary>
            <remarks>
            When using the ImageVirtualDirectory property, then one must also
            set RunTimeImagesFolderLocation to UserDefined and assign the
            ImageHardDiskFolder. The ImageVirtualDirectory, through
            its website virtual path, must match up with the ImageHardDiskFolder
            so that they are both pointing to the same folder on the machine. It
            is the user's duty to verify both paths point to the same folder,
            otherwise one would presumably get a broken image when running the web page
            in a web browser.
            </remarks>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.WidgetAnnotation">
            <base>GraphicsServer.GSNet.Charting.Annotation</base>
            <summary>
            The full implementation of the WidgetAnnotation class resides in the
            <see cref="T:GraphicsServer.GSNet.Charting.Annotation"/> class.  The WidgetAnnotation
            object exists in order solve some design-time web control nuances.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.WidgetAnnotation.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.WidgetAnnotationCollection">
            <base>GraphicsServer.GSNet.Charting.AnnotationCollection</base>
            <summary>
            The full implementation of the WidgetAnnotationCollection class resides in the
            <see cref="T:GraphicsServer.GSNet.Charting.AnnotationCollection"/> class.  The WidgetAnnotationCollection
            object exists in order solve some design-time web control nuances.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.WidgetBorderLabel">
            <base>GraphicsServer.GSNet.Charting.BorderLabel</base>
            <summary>
            The full implementation of the WidgetBorderLabel class resides in the
            <see cref="T:GraphicsServer.GSNet.Charting.BorderLabel"/> class.  The WidgetBorderLabel
            object exists in order solve some design-time web control nuances.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.WidgetBorderLabel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.WidgetBorderLabel.#ctor(System.String)">
            <summary>
            Constructs an instance of this type with the Name property 
            set to the specified string.
            </summary>
            <param name="labelName"></param>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.WidgetBorderLabelList">
            <base>GraphicsServer.GSNet.Charting.BorderLabelList</base>
            <summary>
            The full implementation of the WidgetBorderLabelList class resides in the
            <see cref="T:GraphicsServer.GSNet.Charting.BorderLabelList"/> class.  The WidgetBorderLabelList
            object exists in order solve some design-time web control nuances.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.WidgetBorderLabelList.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.WidgetBorderLabelList.#ctor(System.Collections.ICollection)">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.GSNetWinWidget">
            <summary>
            The GSNetWinWidget object is a custom UserControl that encapsulates
            a Widget object. This custom control can be placed on a form to provide
            easy access to Widget object configuration properties.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.GSNetWinWidget.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.GSNetWinWidget.BeginInit">
            <summary>
            Temporarily disables painting triggered by property-setting.
            </summary>
            <remarks>
            This method implements the ISupportInitialize.BeginInit interface method.
            It calls the Widget's BeginInit() method, which disables any
            painting that might be triggered by setting properties
            in the widget. A call to EndInit re-enables normal painting.
            Calling these two methods is useful for doing a block of 
            property seting.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.GSNetWinWidget.EndInit">EndInit Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.GSNetWinWidget.EndInit">
            <summary>
            Re-enables normal painting.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.GSNetWinWidget.BeginInit">BeginInit Method</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.BackColor">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.BackgroundImage">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.ForeColor">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.Font">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.Cursor">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.RightToLeft">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.AllowDrop">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.DataBindings">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.Tag">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.InDesignTime">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.EnableSaveButton">
            <summary>
            Enables and disables the Save Widget to File popup button.
            </summary>
            <remarks>
            If enabled, this button displays when the user moves the mouse over 
            the Widget control.
            <para>When the user clicks the button, a File Save dialog is displayed asking
            the user for the file name. Note that the image format used for storing the chart in
            the file is based on the file extension selected by the user. If the file extension
            is not a standard image file extension, then the Jpeg format is used.</para>
            </remarks>
            <value>bool</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.EnableCopyButton">EnableSaveButton Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.EnablePrintButton">EnablePrintButton Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.EnablePrintButton">
            <summary>
            Enables and disables the Print Widget popup button.
            </summary>
            <remarks>
            If enabled, this button displays when the user moves the mouse over 
            the widget control.
            </remarks>
            <value>bool</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.EnableCopyButton">EnableCopyButton Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.EnableSaveButton">EnableSaveButton Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.EnableCopyButton">
            <summary>
            Enables and disables the Copy Widget to Clipboard popup button.
            </summary>
            <remarks>
            If enabled, this button displays when the user move the mouse over 
            the widget control.
            </remarks>
            <value>bool</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.EnablePrintButton">EnablePrintButton Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.EnableSaveButton">EnableSaveButton Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.EnableDesignTimeDragResize">
            <summary>Allows dragging and resizing devices and annotations at design-time.</summary>
            <remarks>
            <para>
            If true (default), the devices and annotations can be moved around on
            the widget control in design time (within Visual Studio on the form's design-view).
            </para>
            <para>
            If false, the widget control can be moved around the form in design-time. The 
            devices and annotations contained within it cannot be dragged or resized.
            </para>
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.Widget">
            <summary>
            Gets the encapsulated Widget object.
            </summary>
            <remarks>
            This property encapsulates the Widget object. See the 
            <see cref="T:GraphicsServer.GSNet.Widgets.Widget"/> object for more information
            regarding the capabilities of this object.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.Widget"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Widget">Widget Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.LockWidgetObjects">
            <value>bool</value>
            <remarks>
            If this property is true, then in design time all internal Widget objects can be
            clicked and moved/resized.
            </remarks>
            <summary>Locks and unlocks all objects contained within the widget.</summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseHoverReFire">
            <summary>
            Enables all MouseHover events to continue firing as long as the mouse cursor 
            is in the Widget control.
            </summary>
            <remarks>
            If this value is false, the MouseHover event will only fire once when the
            mouse cursor is in the Widget. If this value is true, mouse
            hover events will continually re-fire as long as the mouse cursor is in the 
            Widget control. Be aware that setting this property to true may impact performance.
            </remarks>
            <value>bool</value>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseClickWidgetEvent">
            <summary>
            Event that fires when the mouse is clicked in the Widget control.
            </summary>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseMoveWidgetEvent">
            <summary>
            Event that fires when the mouse is moved in the Widget control.
            </summary>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseHoverWidgetEvent">
            <summary>
            Event that fires when the mouse hovers in the Widget control.
            </summary>
            <remarks>
            Note that the MouseHover event only fires once by default. To continually fire the MouseHover event
            set <see cref="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseHoverReFire"/> to true.
            </remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseHoverReFire">MouseHoverReFire Property</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseWheelWidgetEvent">
            <summary>
            Event that fires when the mouse wheel is used in the Widget control.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.GSNetWinWidget.WidgetMouseEventHandler">
            <summary>
            The prototype/delegate for handling the Widget's mouse events.
            </summary>
            <example>
            See the walkthrough <a href="../walkthru/gswlkWinWidgetEvents.htm">Using Mouse Events in a Widget Device</a>.
            </example>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags">
            <base>GraphicsServer.GSNet.Charting.TemplateFlags</base>
            <summary>
            Contains the flags that control how widget templates are created and
            how they are applied.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.ReadProperties(System.Xml.XmlNode)">
            <summary>
            The ReadProperties method can be used to read TemplateWidgetFlag properties from
            an XmlNode.
            </summary>
            <param name="node">XmlNode that contains the properties of the object.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.WriteProperties(System.Xml.XmlDocument,System.String)">
            <summary>
            The WriteProperties method can be used to write TemplateWidgetFlag properties to
            an XmlElement.
            </summary>
            <returns>This method will return an XmlElement containing the properties.</returns>
            <param name="doc">This paramenter is the XmlDocument context used to create the new element node.</param>
            <param name="nodeName">The name that will be given to the element node.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.SetAllIgnoreFlags(System.Boolean)">
            <summary>
            This method will set all the ignore flags to the boolean passed in as a parameter.
            </summary>
            <param name="setting">boolean to set all the ignore flags to</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreWidgetSize">
            <summary>
            Controls whether the widget's Size property is ignored when reading or writing
            the data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreWidgetProperties">
            <summary>
            Controls whether all widget-level properties are ignored when reading or writing
            the data from/to XML.
            </summary>
            <remarks>
            Ignored properties do not include the
            Widget level properties handled by the IgnoreWidgetSize flag.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreDeviceLayout">
            <summary>
            Controls whether relative device layout information is ignored when reading and
            writing data from/to XML.
            </summary>
            <remarks>
            	<para>The IgnoreDeviceSize and IgnoreDeviceLocation properties control how
                <em>absolute</em> layout data is serialized. In contrast, the IgnoreDeviceLayout
                property controls how <em>relative</em> size and location data is
                serialized.</para>
            	<para>As a rule, relative size and location data is more useful in a template than
                absolute size and location data. When relative data is read back in, the devices
                will be sized and positioned based on the current widget size and the relative data
                being read back in.</para>
            </remarks>
            <value>bool</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreDeviceSize">IgnoreDeviceSize Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreDeviceLocation">IgnoreDeviceLocation Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreDevices">
            <summary>
            Controls whether properties of widget devices are ignored when reading and
            writing data from/to XML.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreDeviceSize">
            <summary>
            Controls whether the Size property of devices is ignored when reading and writing
            data from/to XML.
            </summary>
            <value>bool</value>
            <remarks>See the IgnoreDeviceLayout property for more information.</remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreDeviceLayout">IgnoreDeviceLayout Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreDeviceLocation">
            <summary>
            Controls whether the Location property of devices is ignored when reading and
            writing data from/to XML.
            </summary>
            <value>bool</value>
            <remarks>See the IgnoreDeviceLayout property for more information.</remarks>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreDeviceLayout">IgnoreDeviceLayout Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.ReconcileAxisBeforeReadingProperties">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreChartSize">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreChartProperties">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreChartType">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreSeriesDefaults">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreGrid">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreGridSize">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreGridLocation">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreCage">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreXAxis">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreYAxis">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreXPrimeAxis">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreYPrimeAxis">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.Ignore3DXAxis">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.Ignore3DYAxis">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.Ignore3DZAxis">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnorePieAxis">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreAngularAxis">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreRadialAxis">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreRadarAxis">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreFunnelAxis">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreLegend">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreLegendSize">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreLegendLocation">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreChartTitle">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreChartTitleSize">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreChartTitleLocation">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreSeriesDrawingProperties">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreSeriesName">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreTrends">
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags.IgnoreQuickLayout">
            <exclude/>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.Widget">
            <summary>
            This class exposes all the properties, methods, and events of the Graphics Server
            .NET instrumentation object.
            </summary>
            <remarks>
            	<para>A <em>widget</em> is essentially a container for devices, such as Gauge,
                Meter, Thermometer, Slider, and Stoplight objects, and for WidgetAnnotation
                objects, which are similar to labels. Devices in turn are containers for
                WidgetBorderLabel objects and, depending on the type of device, for one or more
                Needle objects.</para>
            	<para>To facilitate its use in Windows and Web forms, the Widget class is wrapped
                inside a custom Windows user control and a Web user control. It can, however, also
                be used directly within your code.</para>
            </remarks>
            <example>
            	<para>The example below is from an application designed to illustrate the
                relationship between ohms, volts, amps, and watts. The application's main form
                includes a widget containing multiple meters and two text boxes (not shown) for
                entering values for ohms and volts as well as code to validate user input (also not
                shown).</para>
            	<para>The form load event handler (which <em>is</em> shown) creates four Meter
                device objects and sets initial needle values.</para>
            	<code lang="CS" title="C# Example">
            using GraphicsServer.GSNet.Charting;
            using GraphicsServer.GSNet.Widgets;
             
            private void Form1_Load(object sender, System.EventArgs e)
            {
                Widget wgt = this.gsNetWinWidget1.Widget;
             
                // widget background; device background will be transparent
                wgt.Background.BackgroundType = BackgroundType.Simple;
                wgt.Background.Color = Color.White;
             
                wgt.DeviceList.Add(new Meter("Ohms")); // sets the DeviceName property
                wgt.DeviceList.Add(new Meter("Volts"));
                wgt.DeviceList.Add(new Meter("Amps"));
                wgt.DeviceList.Add(new Meter("Watts"));
             
                // calculate device dimensions
                int deviceHeight = wgt.Size.Height/2;
                int deviceWidth = wgt.Size.Width/2;
             
                // set properties that are the same for all four devices
                foreach (Meter mtr in wgt.DeviceList)
                {
                    mtr.Size = new Size(deviceWidth, deviceHeight);
                    mtr.MarginTop = 60; // make room for border labels
             
                    mtr.Background.Transparency = 100; // let the widget background show through
             
                    mtr.ScaleLabelFormatMask = "0";
                    mtr.ScaleOffsetDirection = ScaleOffsetDirection.Bottom;
                    mtr.ScaleValueMin = 0; // we'll set individual max values later
                    mtr.StartAngle = 200;  // start and sweep define limits of the scale's curve
                    mtr.SweepAngle = 140;
                    mtr.TickDrawStyle = TickDrawStyle.ThroughAxis;
                    mtr.TickScaleLineOn = false; // ticks but no scale line
             
                    /* 
                     * Note: Widgets have their own WidgetBorderLabel class,
                     * although it behaves in the same way as the charting
                     * BorderLabel class. Similarly, there is a widget-specific
                     * WidgetAnnotation class.
                     */
                    mtr.BorderLabelList.Add(new WidgetBorderLabel("NeedleValue")); 
                    mtr.BorderLabelList.GetBorderLabel(0).RelativeLocation = RelativeLocation.BottomMiddle;
             
                    mtr.NeedleList.Add(new MeterNeedle());
                    mtr.NeedleList.GetNeedle(0).Background.BackgroundType = BackgroundType.Simple;
                    mtr.NeedleList.GetNeedle(0).Background.Color = Color.Red;
                    mtr.NeedleList.GetNeedle(0).Outline.Color = Color.Red;
                    mtr.NeedleList.GetNeedle(0).Length = 105;
                    mtr.NeedleList.GetNeedle(0).WidthAtBase = 1;
                    mtr.NeedleList.GetNeedle(0).WidthAtEnd = 5;
                    mtr.NeedleList.GetNeedle(0).BorderLabelName = "NeedleValue"; // where to display the value
                    mtr.NeedleList.GetNeedle(0).LabelFormatMask = "#0.0 " + mtr.DeviceName; // how to display the value
               }
             
                // get the devices so we can set properties unique to each device
                Meter mtrOhms = (Meter) wgt.DeviceList.GetDevice("Ohms");
                Meter mtrVolts = (Meter) wgt.DeviceList.GetDevice("Volts");
                Meter mtrAmps = (Meter) wgt.DeviceList.GetDevice("Amps");
                Meter mtrWatts = (Meter) wgt.DeviceList.GetDevice("Watts");
             
                //Ohms
                mtrOhms.Location = new Point(0,0);
                mtrOhms.ReverseScale = true;
                mtrOhms.ScaleValueMax = 5;
                mtrOhms.MajorTicks = 6;
                mtrOhms.MinorTicks = 9;
             
                // Volts
                mtrVolts.Location = new Point(deviceWidth, 0);
                mtrVolts.ScaleValueMax = 10;
                mtrVolts.MajorTicks = 11;
                mtrVolts.MinorTicks = 4;
             
                // Amps
                mtrAmps.Location = new Point(0, deviceHeight);
                mtrAmps.ScaleValueMax = 100;
                mtrAmps.MajorTicks = 11;
                mtrAmps.MinorTicks = 4;
             
                // Watts 
                mtrWatts.Location = new Point(deviceWidth, deviceHeight);
                mtrWatts.ScaleValueMax = 1000;
                mtrWatts.MajorTicks = 11;
                mtrWatts.MinorTicks = 9;
             
                // set initial values
                this.txtOhms.Text = "0.2";
                this.txtVolts.Text = "8.4";
                SetValues(); // this method is called during input validation
            }
             
            private void SetValues()
            {
                // calculate values
                double Ohms = Double.Parse(txtOhms.Text); 
                double Volts = Double.Parse(txtVolts.Text);
                double Amps = Volts/Ohms; // input validation ensures Ohms =&gt; 0.1
                double Watts = Volts * Amps;
             
                // get the devices
                DeviceList lst = this.gsNetWinWidget1.Widget.DeviceList;
                Meter mtrOhms = (Meter) lst.GetDevice("Ohms");
                Meter mtrVolts = (Meter) lst.GetDevice("Volts");
                Meter mtrAmps = (Meter) lst.GetDevice("Amps");
                Meter mtrWatts = (Meter) lst.GetDevice("Watts");
             
                // set the values
                mtrOhms.NeedleList.GetNeedle(0).Value = Ohms;
                mtrVolts.NeedleList.GetNeedle(0).Value = Volts;
                mtrAmps.NeedleList.GetNeedle(0).Value = Amps;
                mtrWatts.NeedleList.GetNeedle(0).Value = Watts;
             
                // redraw
                this.gsNetWinWidget1.Invalidate();
            }
                </code>
            	<code lang="VB" title="VB Example">
            Imports GraphicsServer.GSNet.Charting
            Imports GraphicsServer.GSNet.Widgets
             
            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
             
                 With Me.GsNetWinWidget1.Widget
             
                 ' widget background; device background will be transparent
                 .Background.BackgroundType = BackgroundType.Simple
                 .Background.Color = Color.White
             
                 .DeviceList.Add(New Meter("Ohms")) ' sets the DeviceName property
                 .DeviceList.Add(New Meter("Volts"))
                 .DeviceList.Add(New Meter("Amps"))
                 .DeviceList.Add(New Meter("Watts"))
             
                 ' calculate device dimensions
                 Dim deviceHeight As Integer = .Size.Height / 2
                 Dim deviceWidth As Integer = .Size.Width / 2
             
                 ' set properties that are the same for all four devices
                 For Each mtr As Meter In .DeviceList
             
                     mtr.Size = New Size(deviceWidth, deviceHeight)
                     mtr.MarginTop = 60 ' make room for border labels
             
                     mtr.Background.Transparency = 100 ' let the widget background show through
             
                     mtr.ScaleLabelFormatMask = "0"
                     mtr.ScaleOffsetDirection = ScaleOffsetDirection.Bottom
                     mtr.ScaleValueMin = 0 ' we'll set individual max values later
                     mtr.StartAngle = 200  ' start and sweep define limits of the scale's curve
                     mtr.SweepAngle = 140
                     mtr.TickDrawStyle = TickDrawStyle.ThroughAxis
                     mtr.TickScaleLineOn = False ' ticks but no scale line
             
                     ' Note: Widgets have their own WidgetBorderLabel class,
                     ' although it behaves in the same way as the charting
                     ' BorderLabel class. Similarly, there is a widget-specific
                     ' WidgetAnnotation class.
                     mtr.BorderLabelList.Add(New WidgetBorderLabel("NeedleValue"))
                     mtr.BorderLabelList.GetBorderLabel(0).RelativeLocation = RelativeLocation.BottomMiddle
             
                     mtr.NeedleList.Add(New MeterNeedle)
                     mtr.NeedleList.GetNeedle(0).Background.BackgroundType = BackgroundType.Simple
                     mtr.NeedleList.GetNeedle(0).Background.Color = Color.Red
                     mtr.NeedleList.GetNeedle(0).Outline.Color = Color.Red
                     mtr.NeedleList.GetNeedle(0).Length = 105
                     mtr.NeedleList.GetNeedle(0).WidthAtBase = 1
                     mtr.NeedleList.GetNeedle(0).WidthAtEnd = 5
                     mtr.NeedleList.GetNeedle(0).BorderLabelName = "NeedleValue" ' where to display the value
                     mtr.NeedleList.GetNeedle(0).LabelFormatMask = "#0.0 " + mtr.DeviceName ' how to display the value
                 Next
             
                 ' get the devices so we can set properties unique to each device
                 Dim mtrOhms As Meter = CType(.DeviceList.GetDevice("Ohms"), Meter)
                 Dim mtrVolts As Meter = CType(.DeviceList.GetDevice("Volts"), Meter)
                 Dim mtrAmps As Meter = CType(.DeviceList.GetDevice("Amps"), Meter)
                 Dim mtrWatts As Meter = CType(.DeviceList.GetDevice("Watts"), Meter)
             
                 'Ohms
                 mtrOhms.Location = New Point(0, 0)
                 mtrOhms.ReverseScale = True
                 mtrOhms.ScaleValueMax = 5
                 mtrOhms.MajorTicks = 6
                 mtrOhms.MinorTicks = 9
             
                 ' Volts
                 mtrVolts.Location = New Point(deviceWidth, 0)
                 mtrVolts.ScaleValueMax = 10
                 mtrVolts.MajorTicks = 11
                 mtrVolts.MinorTicks = 4
             
                 ' Amps
                 mtrAmps.Location = New Point(0, deviceHeight)
                 mtrAmps.ScaleValueMax = 100
                 mtrAmps.MajorTicks = 11
                 mtrAmps.MinorTicks = 4
             
                 ' Watts 
                 mtrWatts.Location = New Point(deviceWidth, deviceHeight)
                 mtrWatts.ScaleValueMax = 1000
                 mtrWatts.MajorTicks = 11
                 mtrWatts.MinorTicks = 9
                End With
             
                ' set initial values
                Me.txtOhms.Text = "0.2"
                Me.txtVolts.Text = "8.4"
                SetValues() ' this method is called during input validation
            End Sub
             
            Sub SetValues()
                ' calculate values
                Dim Ohms As Double = Double.Parse(txtOhms.Text)
                Dim Volts As Double = Double.Parse(txtVolts.Text)
                Dim Amps As Double = Volts / Ohms ' input validation ensures Ohms =&gt; 0.1
                Dim Watts As Double = Volts * Amps
             
                ' get the devices
                With Me.GsNetWinWidget1.Widget.DeviceList
                 Dim mtrOhms As Meter = CType(.GetDevice("Ohms"), Meter)
                 Dim mtrVolts As Meter = CType(.GetDevice("Volts"), Meter)
                 Dim mtrAmps As Meter = CType(.GetDevice("Amps"), Meter)
                 Dim mtrWatts As Meter = CType(.GetDevice("Watts"), Meter)
             
                 ' set the values
                 mtrOhms.NeedleList.GetNeedle(0).Value = Ohms
                 mtrVolts.NeedleList.GetNeedle(0).Value = Volts
                 mtrAmps.NeedleList.GetNeedle(0).Value = Amps
                 mtrWatts.NeedleList.GetNeedle(0).Value = Watts
                End With
             
                ' redraw
                Me.GsNetWinWidget1.Invalidate()
            End Sub
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.#ctor">
            <summary>Constructs an instance of this type.</summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.GetSelectedObject">
            <summary>
            Retrieves the object currently selected object in the widget's drawing area. 
            </summary>
            <returns>Returns a <see cref="T:GraphicsServer.GSNet.Charting.VisualChartObject"/> if an object
            is currently selected. Otherwise returns null.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.IsVisualObjectSelected">IsVisualObjectSelected Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.UnselectWidgetObject(System.Boolean)">UnselectChartObject Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">
            <summary>
            Reads the widget properties from the supplied XmlNode.
            </summary>
            The ReadWidgetProperties method calls this method to do all the work. You can, however,
            bypass ReadWidgetProperties and call this method directly. Also note that many of the
            other widget objects have a ReadProperties method that can be called directly.
            <remarks>
            </remarks>
            <param name="node">XmlNode that contains the widget properties.</param>
            <param name="flags">Template flags to control template reading. See <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>.</param>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags">TemplateWidgetFlags Class</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.ReadWidgetProperties(System.String,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">ReadWidgetProperties Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.ReadWidgetProperties(System.String,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">
            <summary>
            Reads Widget properties from XML data in a file.
            </summary>
            <remarks>
            This method reads Widget properties from the XML data stored in the specified
            file and apply those properties as directed by the TemplateWidgetFlags objects. Note
            that the XML data can be sparesly populated. It does not need to contain the full set 
            of property elements for the widget. 
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags">TemplateWidgetFlags Class</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.ReadAllWidgetProperties(System.String)">ReadAllWidgetProperties(string) Method</seealso>
            <param name="filename">Name of the template file to read.</param>
            <param name="flags">Template flags to control template reading. If this 
            parameter is null, then the default flag settings apply. 
            See <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.ReadWidgetProperties(System.IO.Stream,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">
            <summary>
            Reads Widget properties from a stream containing XML data.
            </summary>
            <remarks>
            This method reads Widget properties from the XML data stored in the specified
            stream and apply those properties as directed by the TemplateWidgetFlags objects. Note
            that the XML data can be sparesly populated. It does not need to contain the full set 
            of property elements for the widget. 
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags">TemplateWidgetFlags Class</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.ReadAllWidgetProperties(System.String)">ReadAllWidgetProperties(System.IO.Stream) Method</seealso>
            <param name="stream">Name of the stream to read.</param>
            <param name="flags">Template flags to control template reading. If this 
            parameter is null then the default flag settings apply. 
            See <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.GetAllWidgetPropertyFlags">
            <summary>
            Gets the flags necessary to read/write a complete set of
            Widget properties to an XML template file. 
            </summary>
            <remarks>
            This method returns an instance of <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>
            which contains the options for reading and writing a 
            complete XML template file, including Device Layout data
            and Annotation Layout data.
            </remarks>
            <returns><see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/></returns>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags">TemplateWidgetFlags Class</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.ReadAllWidgetProperties(System.String)">
            <summary>
            The basic method for reading all properties from an XML file. It restores
            the entire state of the Widget.
            </summary>
            <remarks>
            This method reads the all the properties from an XML file, effectively
            restoring a Widget's state.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.WriteAllWidgetProperties(System.String)">WriteAllWidgetProperties(string) Method</seealso>
            <param name="filename">The template file to be read.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.ReadAllWidgetProperties(System.IO.Stream)">
            <summary>
            The basic method for reading all properties from an XML stream. It restores
            the entire state of the Widget.
            </summary>
            <remarks>
            This method reads the all the properties from an XML stream, effectively
            restoring a Widget's state.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.WriteAllWidgetProperties(System.String)">WriteAllWidgetProperties(System.IO.Stream) Method</seealso>
            <param name="stream">The template file stream be read</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.WriteProperties(System.Xml.XmlDocument,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags,System.String)">
            <summary>
            Writes the Widget properties to an XmlNode. 
            </summary>
            <remarks>
            The WriteWidgetProperties method calls this method to do all the work. You can, however,
            bypass ReadWidgetProperties and call this one directly. Also note that many of the
            other widget objects have a WriteProperties method that can be called directly.
            </remarks>
            <returns>
            If properties to write have been found, then this method returns an XmlElement
            containing the properties. If based on the TemplateWidgetFlags no properties are
            written, then null is returned.
            </returns>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags">TemplateWidgetFlags Class</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.WriteWidgetProperties(System.String,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">WriteWidgetProperties Method</seealso>
            <param name="doc">The XmlDocument object that is used as a context to create new XmlElement nodes.</param>
            <param name="flags">Template flags to control template writing. See <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>.</param>
            <param name="nodeName">The name that will be used to label the element node that is returned.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.WriteWidgetProperties(System.String,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">
            <summary>
            Writes selected Widget properties to XML and stores them in the specified
            file.
            </summary>
            <remarks>
            Note that the TemplateWidgetFlags object can be used to control
            which properties get written out.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags">TemplateWidgetFlags Class</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.WriteAllWidgetProperties(System.String)">WriteAllWidgetProperties(string) Method</seealso>
            <param name="filename">Name of the template file to write to.</param>
            <param name="flags">Template flags to control template writing. If this 
            parameter is null, then the default flag settings apply. 
            See <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.WriteWidgetProperties(System.IO.Stream,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">
            <summary>
            Writes Widget properties to XML and stores them in the specified
            stream. 
            </summary>
            <remarks>
            Note that the TemplateWidgetFlags object can be used to control
            which properties get written out.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags">TemplateWidgetFlags Class</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.WriteAllWidgetProperties(System.String)">WriteAllWidgetProperties(System.IO.Stream) Method</seealso>
            <param name="stream">Name of the stream to write to.</param>
            <param name="flags">Template flags to control template writing. If this 
            parameter is null then the default flag settings will apply. 
            See <see cref="T:GraphicsServer.GSNet.Widgets.TemplateWidgetFlags"/>.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.WriteAllWidgetProperties(System.String)">
            <summary>
            This is the basic method for writing all properties to an XML file.
            </summary>
            <remarks>
            This is the basic method for writing all properties to an XML file. It saves
            the entire state of the Widget.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.ReadAllWidgetProperties(System.String)">ReadAllWidgetProperties(string) Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.WriteWidgetProperties(System.String,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">WriteWidgetProperties(string, GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)
            Method</seealso>
            <param name="filename">The filename of the XML template to be written.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.WriteAllWidgetProperties(System.IO.Stream)">
            <summary>This is the basic method for writing all properties to an XML stream.</summary>
            <remarks>
            This is the basic method for writing all properties to an XML file. It saves
            the entire state of the Widget.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.ReadAllWidgetProperties(System.String)">ReadAllWidgetProperties(System.IO.Stream) Method</seealso>
            <param name="stream">The stream for the XML template to be written</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.WriteImageMapString">
            <summary>
            Returns a string containing an HTML image map for the Widget. Image map name
            defaults to WidgetImageMap. 
            </summary>
            <remarks>
            The image map includes all hot regions with associated URLs taken from the
            objects' ImageMapURL property and tooltip text taken from the objects'
            ToolTipText property.
            <para>This method assigns the image map a default name, WidgetImageMap. Use the 
            overloaded method to assign your own image map name.</para>
            </remarks>
            <returns>String containing an HTML image map.</returns>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Widget.ImageMapUrl">ImageMapUrl Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Widget.TooltipText">TooltipText Property</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.WriteImageMapString(System.String)">
            <summary>
            Returns a string containing an HTML image map for the Widget. 
            The ImageMapName parameter assigns a name.
            </summary>
            <remarks>
            The image map includes all hot regions with associated URLs taken from the
            objects' ImageMapURL property and tooltip text taken from the objects'
            ToolTipText property.
            </remarks>
            <returns>String containing an HTML image map.</returns>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Widget.ImageMapUrl">ImageMapUrl Property</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Widget.TooltipText">TooltipText Property</seealso>
            <param name="ImageMapName">Name to be assigned to the image map.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.RenderImageMap(System.Web.UI.HtmlTextWriter,System.String)">
            <summary>
            Writes image map information to HTML.
            </summary>
            <remarks>
            This is a helper method that does all the work for the WriteImageMapString
            method.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.WriteImageMapString">WriteImageMapString(string) Method</seealso>
            <param name="output">HtmlTextWriter object to receive the image map data.</param>
            <param name="ImageMapName">Name to be assigned to the image map.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.PropertyChangedHandler(System.Object,GraphicsServer.GSNet.Charting.PropertyEventArgs)">
            <summary>
            Delegate function that gets called when any of the widget's properties
            or child object properties change.
            </summary>
            <param name="sender">The object that fired/sent the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.GetAnnotation(System.Int32)">
            <summary>Retrieves the WidgetAnnotation object at the specified index.</summary>
            <returns>Annotation object or null if index does not contains an object.</returns>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.WidgetAnnotation">WidgetAnnotation Class</seealso>
            <remarks>
            Note that the WidgetAnnotationCollection has a GetAnnotation method with an
            overload that accepts a string containing the text of the annotation's Name
            property.
            </remarks>
            <example>
                The following code fragments use the GetAnnotation method to retrieve an annotation
                and change its text. 
                <code lang="CS" title="C# Example">
            //Create an annotation 
            WidgetAnnotation ann = new WidgetAnnotation();
            ann.Text = "Wind speed is in knots.";
             
            Widget wgt = this.gsNetWinWidget1.Widget;
             
            //Add the annotation to the widget
            int indexUnitAnnotation = wgt.AnnotationList.Add(ann); 
             
            ...
             
            //Retrieve the annotation and change its text
            wgt.AnnotationList.GetAnnotation(indexUnitAnnotation).Text = "Wind speed is in MPH.";
                </code>
            	<code lang="VB" title="VB Example">
            'Create an annotation 
            Dim ann As WidgetAnnotation = New WidgetAnnotation
            ann.Text = "Wind speed is in knots."
             
            Dim wgt As Widget = Me.GsNetWinWidget1.Widget
             
            'Add the annotation to the widget
            Dim indexUnitAnnotation As Integer = wgt.AnnotationList.Add(ann)
             
            ...
             
            'Retrieve the annotation and change its text
            wgt.AnnotationList.GetAnnotation(indexUnitAnnotation).Text = "Wind speed is in MPH."
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.BeginInit">
            <summary>Temporarily disables painting that might be triggered by property-setting.</summary>
            <remarks>
            Calling this method disables all calls to any of the internal Reconcile and RecalcLayout
            methods. Calling the EndInit method re-enables these calls.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.EndInit">EndInit Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.EndInit">
            <summary>Re-enables normal painting.</summary>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.BeginInit">BeginInit Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.Paint(System.Windows.Forms.PaintEventArgs,System.Boolean)">
            <summary>
            The main drawing method. This method paints into the Graphics object that
            resides within the PaintEventArgs.
            </summary>
            <param name="e">PaintEventArgs</param>
            <param name="drawSelection">Paints the selection rectangle around the select object if true.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.Export(System.Drawing.Graphics,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Exports the widget to the specified file.
            </summary>
            <example>
            	<code lang="CS" title="Win Form (C#)">
            // Using Win Forms
            GraphicsServer.GSNet.Charting.Chart chart = this.gsNetWinChart1.Chart;
            // "this" must refer to a (Win)Form
            chart.Export(this.CreateGraphics(), "C:\\GSImages\\chart1.jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
                </code>
            	<code lang="VB" title="Win Form (VB)">
            ' Using Win Forms
            Dim chart As GraphicsServer.GSNet.Charting.Chart = Me.GsNetWinChart1.Chart
            ' "Me" must refer to a (Win)Form
            chart.Export(Me.CreateGraphics(), "C:\GSImages\chart1.jpg", System.Drawing.Imaging.ImageFormat.Jpeg)
                </code>
            	<code lang="CS" title="Web Form (C#)">
            // Using WebForms
            // Need to create Bitmap and Graphics objects to output chart image to file
            int wid = (int)GSNetWebChart1.Chart.Size.Width;
            int ht = (int)GSNetWebChart1.Chart.Size.Height;
            Bitmap bmap = new Bitmap(wid, ht);
            Graphics gfx = Graphics.FromImage(bmap);
            GSNetWebChart1.Chart.Export(gfx, "C:\\GsWebImages\chart1.png", System.Drawing.Imaging.ImageFormat.Png);
            // Need to clean up gfx object, IN ADDITION TO normal .NET garbage collection
            gfx.Dispose();
            bmap.Dispose();
                </code>
            	<code lang="VB" title="Web Form (VB)">
            ' Using Web Forms
            ' Need to create Bitmap and Graphics objects to output chart image to file
            Dim wid As Integer = CInt(GSNetWebChart1.Chart.Size.Width)
            Dim ht As Integer = CInt(GSNetWebChart1.Chart.Size.Height)
            Dim bmap As Bitmap = New Bitmap(wid, ht)
            Dim gfx As Graphics = Graphics.FromImage(bmap)
            GSNetWebChart1.Chart.Export(gfx, "C:\GSWebImages\chart1.png", System.Drawing.Imaging.ImageFormat.Png)
            ' Need to clean up gfx object, IN ADDITION TO normal .NET garbage collection
            gfx.Dispose()
            bmap.Dispose()
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.Export(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Exports the widget to the specified file.
            </summary>
            <example>
            	<code lang="CS" title="Win Form (C#)">
            // Using Win Forms
            GraphicsServer.GSNet.Charting.Chart chart = this.gsNetWinChart1.Chart;
            // "this" must refer to a (Win)Form
            chart.Export("C:\\GSImages\\chart1.jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
                </code>
            	<code lang="VB" title="Win Form (VB)">
            ' Using Win Forms
            Dim chart As GraphicsServer.GSNet.Charting.Chart = Me.GsNetWinChart1.Chart
            ' "Me" must refer to a (Win)Form
            chart.Export("C:\GSImages\chart1.jpg", System.Drawing.Imaging.ImageFormat.Jpeg)
                </code>
            	<code lang="CS" title="Web Form (C#)">
            // Using Web Forms
            // Need to create Bitmap and Graphics objects to output chart image to file
            GSNetWebChart1.Chart.Export("C:\\GsWebImages\chart1.png", System.Drawing.Imaging.ImageFormat.Png);
                </code>
            	<code lang="VB" title="Web Form (VB)">
            ' Using Web Forms
            ' Need to create Bitmap and Graphics objects to output chart image to file
            GSNetWebChart1.Chart.Export("C:\GSWebImages\chart1.png", System.Drawing.Imaging.ImageFormat.Png)
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.Export(System.String)">
            <summary>
            This method exports the widget to the specified image file.
            </summary>
            <remarks>
            The filename must have a valid image file extension, such as
            filename.JPG, filename.BMP, filename.WMF, etc. The image file
            extension must be a valid ImageFormat from the 
            <see cref="T:System.Drawing.Imaging.ImageFormat"/> enumeration.
            </remarks>
            <param name="fileName">The filename to save to.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.Export(System.Drawing.Graphics,System.String)">
            <summary>
            This method exports the widget to the specified image file.
            </summary>
            <remarks>
            The filename must have a valid image file extension, such as
            filename.JPG, filename.BMP, filename.WMF, etc. The image file
            extension must be a valid ImageFormat from the 
            <see cref="T:System.Drawing.Imaging.ImageFormat"/> enumeration.
            </remarks>
            <param name="g">The Graphics object to help with the export.</param>
            <param name="fileName">The filename to save to.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.Export(System.Drawing.Graphics,System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>
            This method exports the widget to the specified stream.
            </summary>
            <param name="g">The Graphics object to help with the export.</param>
            <param name="s">The stream to save the image to.</param>
            <param name="imageFormat">The image format. See the <see cref="T:System.Drawing.Imaging.ImageFormat"/> enumeration.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.Export(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>
            This method exports the widget to the specified stream.
            </summary>
            <param name="s">The stream to save the image to.</param>
            <param name="imageFormat">The image format. See the <see cref="T:System.Drawing.Imaging.ImageFormat"/> enumeration.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.ExportToClipboard(System.Drawing.Graphics)">
            <summary>
            This method exports the widget to the clipboard.
            </summary>
            <param name="g">The Graphics object to help with the export.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.ExportToClipboard">
            <summary>
            This method exports the widget to the clipboard.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.PrintWidget(System.Drawing.Printing.PrintPageEventArgs,System.Drawing.Point,System.Drawing.Size)">
            <summary>Prints the active widget without changing the Graphics.PageUnit property.</summary>
            <remarks>
            A Graphics.PageUnit setting that produces good results is
            GraphicsUnit.Display.
            </remarks>
            <param name="e">The printing arguments</param>
            <param name="location">The point to offset the printing of the widget on the page.</param>
            <param name="size">The size to print the widget.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.PrintWidget(System.Drawing.Printing.PrintPageEventArgs,System.Drawing.Point)">
            <summary>Prints the active widget without changing the Graphics.PageUnit property.</summary>
            <remarks>
            A Graphics.PageUnit setting that produces good results is
            GraphicsUnit.Display.
            </remarks>
            <param name="e">The printing arguments</param>
            <param name="location">The point to offset the printing of the widget on the page.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.PrintWidget(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>Prints the active widget without changing the Graphics.PageUnit property.</summary>
            <remarks>This method prints the widget in the upper left corner of the page.</remarks>
            <param name="e">The printing arguments</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.SetRelativeLocation(GraphicsServer.GSNet.Charting.VisualChartObject,GraphicsServer.GSNet.Charting.VisualChartObject,GraphicsServer.GSNet.Charting.RelativeLocation)">
            <summary>
            Changes one widget object's location in relation to another widget object.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.RelativeLocation">RelativeLocation Enumeration</seealso>
            <example>
                The following code fragment positions a WidgetAnnotation object relative to one of
                the Device objects in the widget. 
                <code lang="CS" title="C# Example">
            //Create an annotation  
            WidgetAnnotation ann = new WidgetAnnotation();  
            ann.Text = "Wind speed is in knots.";  
             
            Widget wgt = this.gsNetWinWidget1.Widget; 
              
            //Add the annotation to the widget 
            wgt.AnnotationList.Add(ann); 
             
            //Position it relative to the meter device 
            wgt.SetRelativeLocation(ann, meterWind, RelativeLocation.RightMiddle);
                </code>
            	<code lang="VB" title="VB Example">
            'Create an annotation
            Dim ann As WidgetAnnotation = New WidgetAnnotation
            ann.Text = "Wind speed is in knots."
             
            With Me.GsNetWinWidget1.Widget
                'Add the annotation to the widget
                .AnnotationList.Add(ann)
                'Position it relative to the meter device
                .SetRelativeLocation(ann, meterWind, RelativeLocation.RightMiddle)
            End With
                </code>
            </example>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.UnselectWidgetObject(System.Boolean)">
            <summary>Unselects the selected widget object.</summary>
            <remarks>
            Calling this method will unselect the currently selected widget object.
            If there are no currently selected widget object then this method
            will not do anything.
            </remarks>
            <param name="sendWidgetSelectedEvent">Set to true if you want a second selection change event
            to be sent out indicating that the Widget is now the selected object.  This second event
            will go out after the first event which sends information about the object that is being
            unselected.</param>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.IsVisualObjectSelected">IsVisualObjectSelected Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.GetSelectedObject">GetSelectedObject Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.CanDeleteSelectedWidgetObject">
            <summary>Returns true if the selected Widget object can be deleted.</summary>
            <remarks>
            Calling this method returns a boolean indicating whether or not the
            selected Widget object can be deleted. If no object is selected then false
            is returned.
            </remarks>
            <returns>Returns a true if selected object can be deleted.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.DeleteSelectedWidgetObject">DeleteSelectedWidgetObject Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.DeleteSelectedWidgetObject">
            <summary>Deletes the selected widget object.</summary>
            <remarks>
            Calling this method deletes the selected widget object if it can
            be deleted. If no object is selected then nothing happens.
            </remarks>
            <returns>Returns a true if selected object can be deleted.</returns>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.CanDeleteSelectedWidgetObject">CanDeleteSelectedWidgetObject Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.IsVisualObjectSelected">
            <summary>Returns true if a widget object is currently selected.</summary>
            <remarks>
            Call this method to determine if a widget object is currently selected.
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.UnselectWidgetObject(System.Boolean)">UnselectWidgetObject Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.GetSelectedObject">GetSelectedObject Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.SetAllObjectsIsMovable(System.Boolean)">
            <summary>
            This helper method walks all the devices and all the annotations 
            in the Widget and sets their IsMovable property to the specified state.
            </summary>
            <param name="state">Set to true or false.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.SetAllObjectsIsResizable(System.Boolean)">
            <summary>
            This helper method walks all the devices and all the annotations 
            in the Widget and sets their IsResizable property to the specified state.
            </summary>
            <param name="state">Set to true or false.</param>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.Widget.SetAllObjectsIsSelectable(System.Boolean)">
            <summary>
            Sets the IsSelectable property of all Widget objects.
            </summary>
            <remarks>
            This method sets the IsSelectable property of all the internal widget
            objects to the specified state. In other words, if you want to turn off
            the ability for a user to select an object, then call this method with
            the <i>state</i> parameter set to false.
            </remarks>
            <param name="state">Boolean value to set the IsSelectable property to true or false.</param>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.TemplateLoad">
            <summary>
            Pops up a dialog box that allows the user to apply an existing template.
            </summary>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Widget.TemplateSave">TemplateSave Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.TemplateSave">
            <summary>
            Pops up a dialog box that allows the user to save a widget as a template.
            </summary>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Widget.TemplateLoad">TemplateLoad Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.DeviceList">
            <summary>
            Gets the DeviceList object that maintains the collection of devices associated with
            the widget.
            </summary>
            <example>
                The following code creates a new device and adds it to a widget's device list. 
                <code lang="CS" title="C# Example">
            //Create and configure a meter device
            Meter meterWind = new Meter("Wind Speed");
            meterWind.Size = new Size(480, 300);
            meterWind.Location= new Point(5,5);
            meterWind.ScaleLabelFormatMask = "#0";
            meterWind.ScaleValueMax = 60;
            meterWind.ScaleValueMin = 0;
            meterWind.MajorTicks = 7;
            meterWind.MinorTicks = 5;
             
            //Create a needle and add it to the meter's needle collection
            MeterNeedle needleKnots = new MeterNeedle("Knots");
            needleKnots.Value = 17;
            int indexNeedleKnots = meterWind.NeedleList.Add(needleKnots);
             
            //Create a border label and add it to the meter's border label collection
            WidgetBorderLabel labelTitle = new WidgetBorderLabel();
            labelTitle.Text = meterWind.DeviceName;
            labelTitle.RelativeLocation = RelativeLocation.BottomMiddle;
            int indexLabelTitle = meterWind.BorderLabelList.Add(labelTitle);
             
            //Add the meter to the widget's device collection
            int indexMeterWind = this.gsNetWinWidget1.Widget.DeviceList.Add(meterWind);
                </code>
            	<code lang="VB" title="VB Example">
            'Create and configure a meter device
            Dim meterWind As Meter = New Meter("Wind")
            meterWind.Size = New Size(480, 300)
            meterWind.Location = New Point(5, 5)
            meterWind.ScaleLabelFormatMask = "#0"
            meterWind.ScaleValueMax = 60
            meterWind.ScaleValueMin = 0
            meterWind.MajorTicks = 7
            meterWind.MinorTicks = 5
             
            'Create a needle and add it to the meter's needle collection
            Dim needleKnots As MeterNeedle = New MeterNeedle("Knots")
            needleKnots.Value = 17
            Dim indexNeedleKnots As Integer = meterWind.NeedleList.Add(needleKnots)
             
            'Create a border label and add it to the meter's border label collection
            Dim labelTitle As WidgetBorderLabel = New WidgetBorderLabel
            labelTitle.Text = meterWind.DeviceName
            labelTitle.RelativeLocation = RelativeLocation.BottomMiddle
            Dim indexLabelTitle As Integer = meterWind.BorderLabelList.Add(labelTitle)
             
            'Add the meter to the widget's device collection
            Dim indexMeterWind As Integer = Me.GsNetWinWidget1.Widget.DeviceList.Add(meterWind)
                </code>
            </example>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.DeviceList"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.DeviceList">DeviceList Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.Background">
            <summary>
            Gets the Background object that provides the main background for the widget
            drawing area.
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Background">Background</see> class 
            for information on background properties and methods.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Background"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Background">Background Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.Border">
            <summary>
            Gets the Border object that provides the border for the widget drawing area.
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Border">Border</see> class 
            for information on border properties and methods.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Border"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Border">Border Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.AnnotationList">
            <summary>
            Gets the WidgetAnnotationCollection object that maintains annotations on the widget.
            </summary>
            <remarks>
            An annotation is a text object that can be placed anywhere on the widget and can be
            used to add titles or subtitles, or simply to append information that clarifies 
            some aspect of the widget. The AnnotationList property contains a collection of all 
            the widget's annotations. 
            <para>To create an annotation, first allocate a WidgetAnnotation object, then add
            it to the widget's WidgetAnnotation collection by calling the Add method.</para>
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.WidgetAnnotationCollection">WidgetAnnotationCollection Class</seealso>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.WidgetAnnotation">WidgetAnnotation Class</seealso>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.WidgetAnnotationCollection"/></value>
            <example>
                The following code fragment creates a WidgetAnnotation object, adds it to the
                WidgetAnnotationCollection, and positions it relative to a meter device in the
                widget drawing area. (code to create the meter device is not shown.) 
                <code lang="CS" title="C# Example">
            //Create an annotation 
            WidgetAnnotation ann = new WidgetAnnotation(); 
            ann.Text = "Wind speed is in knots.";
            ann.Name = "Units"; 
            ann.Background.Color = Color.LightGoldenrodYellow; //Make it yellow, like a sticky note 
            ann.Border.EdgeEffectType = EdgeEffectType.DropShadow; 
            ann.Size = new Size(80, 45); 
            ann.AutoSizeText = false; //Turn off autosizing when you want a specific font size 
            ann.TextFormat.Font = new Font("Microsoft Sans Serif", 10); 
            ann.TextFormat.VerticalAlignment = StringAlignment.Center; 
             
            Widget wgt = this.gsNetWinWidget1.Widget;
             
            //Add the annotation to the widget
            wgt.AnnotationList.Add(ann);
             
            //Position it relative to the meter device
            wgt.SetRelativeLocation(ann, meterWind, RelativeLocation.RightMiddle);
                </code>
            	<code lang="VB" title="VB Example">
            'Create an annotation 
            Dim ann As WidgetAnnotation = New WidgetAnnotation
            With ann
                .Text = "Wind speed is in knots."
                .Name = "Units"
                .Background.Color = Color.LightGoldenrodYellow 'Make it yellow, like a sticky note 
                .Border.EdgeEffectType = EdgeEffectType.DropShadow
                .Size = New Size(80, 45)
                .AutoSizeText = False 'Turn off autosizing when you want a specific font size 
                .TextFormat.Font = New Font("Microsoft Sans Serif", 10)
                .TextFormat.VerticalAlignment = StringAlignment.Center
            End With
             
            With Me.GsNetWinWidget1.Widget
                'Add the annotation to the widget
                .AnnotationList.Add(ann)
                'Position it relative to the meter device
                .SetRelativeLocation(ann, meterWind, RelativeLocation.RightMiddle)
            End With
                </code>
            </example>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.ImageMapUrl">
            <summary>
            ets and gets the URL to load when the widget is clicked on.
            </summary>
            <value>string</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Widget.EnableWebHotSpots">EnableWebHotSpots Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.TooltipText">
            <summary>
            Indicates the text to display in the popup tooltip.
            </summary>
            <value>string</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Widget.EnableWebHotSpots">EnableWebHotSpots Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.ImageMapExtraString">
            <summary>
            Specifies an extra string to embed in the wiget's image map entry.
            </summary>
            <value>string</value>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.Widget.EnableWebHotSpots">EnableWebHotSpots Property</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.EnableWebHotSpots">
            <summary>
            Specifies whether or not to enable hot spots for Web images. 
            </summary>
            <remarks>
            Features enabled include the ToolTipText, ImageMapUrl and ImageMapExtraString
            properties.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.WidgetEventsToEnable">
            <summary>
            Gets the WidgetEventWrapper object that enables and disables Widget events. The
            WidgetEventsToEnable property exists to provide access to the underlying
            WidgetEventWrapper object.
            </summary>
            <value><see cref="T:GraphicsServer.GSNet.Widgets.WidgetEventWrapper"/></value>
            <remarks>
            The properties of the WidgetEventWrapper object act as switches that enable and
            disable all events that the Widget object can fire. In addition to enabling an event,
            you must also delegate a handler for it.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.WidgetEventWrapper">WidgetEventWrapper Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.Designers">
            <summary>
            Expand the Designers object in the Properties window for access to the list of
            available designer forms.
            </summary>
            <exclude/>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.AutoInvalidate">
            <summary>
            Specifies whether modifying property settings causes the widget to recalculate
            its layout and redraw.
            </summary>
            <remarks>
            AutoInvalidate defaults to false which means that modifying properties will <b>not</b>
            cause the widget to redraw and recalculate the layout.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.Size">
            <summary>
            Size of the widget. 
            </summary>
            <remarks>Set this property only when you are using the widget object independently of the 
            Windows form control or the Web form control. When you are using one of the controls, 
            you should not modify the Size property of the widget object directly. Instead, set the size 
            property of the parent control object and let the widget object inherit the change.
            </remarks>
            <value>Size</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.SmoothingMode">
            <summary>
            Specifies whether smoothing (antialiasing) is applied to lines and curves
            on the widget.
            </summary>
            <value><see cref="T:System.Drawing.Drawing2D.SmoothingMode"/></value>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.Widget.AnimatedGif">
            <summary>
            AnimatedGif allows one to add individual Images, or Bitmaps, to create an
            animation, or slideshow.
            </summary>
            <remarks>
            This requires that one assigns each frame of the animation themself.
            One can also define the speed of the animation.
            </remarks>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.Widget.WidgetSelectionChangedEvent">
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Widget.WidgetSelectionChangedHandler">WidgetSelectionChangedHandler Delegate</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.Widget.WidgetReadTemplateEvent">
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Widget.WidgetReadTemplateEventHandler">WidgetReadTemplateEventHandler Delegate</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.Widget.WidgetChangedEvent">
            <exclude/>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.Widget.MouseClickWidgetEvent">
            <exclude/>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.Widget.MouseMoveWidgetEvent">
            <exclude/>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.Widget.MouseHoverWidgetEvent">
            <exclude/>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.Widget.MouseWheelWidgetEvent">
            <exclude/>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.Widget.OnPostPaintEvent">
            <summary>Fires after the widget finishes painting.</summary>
            <remarks>
            Anything drawn in the handler for this event will draw on top of all widget elements.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Widget.PostPaintEventHandler">PostPaintEventHandler Delegate</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Widgets.Widget.OnPrePaintEvent">
            <summary>Fires before the widget paints.</summary>
            <remarks>
            Specifically, this event fires after the widget's background and border are drawn and
            before the devices, labels, and annotations are drawn. 
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Widget.PrePaintEventHandler">PrePaintEventHandler Delegate</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.Widget.WidgetChangedEventHandler">
            <summary>
            This delegate is used for handling the Widget changed event.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.Widget.WidgetMouseEventHandler">
            <summary>
            This delegate is used for handling the various Widget mouse events.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.Widget.WidgetReadTemplateEventHandler">
            <summary>
            This delegate is called when the Widget reads a template via the ReadProperties
            or ReadWidgetProperties methods.
            </summary>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.ReadProperties(System.Xml.XmlNode,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">ReadProperties Method</seealso>
            <seealso cref="M:GraphicsServer.GSNet.Widgets.Widget.ReadWidgetProperties(System.String,GraphicsServer.GSNet.Widgets.TemplateWidgetFlags)">ReadWidgetProperties Method</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.Widget.WidgetSelectionChangedHandler">
            <summary>
            This delegate is used for handling the selecting and unselecting of visual chart
            object within the Widget.
            </summary>
            <remarks>
            Note that when the selection changes from one object to another object, this
            event is sent twice. The first time is to indicate which object is being unselected
            (the sender is the object being unselected) and the second time is for the object being
            selected (the sender is the object being selected). The WidgetSelectionChangedEventArgs
            will have data indicating whether the sender is being selected or unselected.
            </remarks>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.Widget.PostPaintEventHandler">
            <summary>
            This delegate is used for handling an extra user defined paint event after the widget is drawn.
            </summary>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Widget.PrePaintEventHandler">PrePaintEventHandler Delegate</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.Widget.PrePaintEventHandler">
            <summary>
            This delegate is used for handling an extra user defined paint event before the
            widget is drawn.
            </summary>
            <remarks>
            Specifically, this delegate is called after the Widget's background is drawn and
            before the devices, labels, and annotations are drawn.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Widgets.Widget.PostPaintEventHandler">PostPaintEventHandler Delegate</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetDesigners.LayoutDesigner">
            <summary>
            This property pops up the Widget Layout Designer form.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetDesigners.DeviceSelector">
            <summary>
            This property pops up the Widget Layout Designer form.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs">
            <summary>
            The WidgetMouseEventArgs object is passed back when a widget mouse event occurs.
            This class contains properties that contain information about the event.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.EventType">
            <summary>
            The type of mouse event. For more information see <see cref="T:GraphicsServer.GSNet.Charting.EventType"/>.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.WidgetPoint">
            <summary>
            The cursor coordinate in the widget coordinate space at the time the
            event occurred.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.DevicePt">
            <summary>
            The point of the cursor in the device coordinate space. In device coordinate space
            the origin (0,0) is the upper-left corner of the device.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.MouseButtons">
            <summary>
            An enumeration indicating which button of the mouse was pressed.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.ButtonClicks">
            <summary>
            The number of mouse button clicks.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.WheelDetents">
            <summary>
            The number of detents the mouse wheel was moved.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.ButtonState">
            <summary>
            Indicates the state of the mouse button. For more information see <see cref="T:GraphicsServer.GSNet.Charting.EventType"/>.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.Sender">
            <summary>
            The object within the widget that handled the event. This will be either an Annotation or
            a Device.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.SenderType">
            <summary>
            The type of the object within the widget that handled the event.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.Needle">
            <summary>
            The needle that handled the event. If the event did not occur within a needle
            this property will remain null.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.NeedleType">
            <summary>
            The type of the needle object that handled the event when the Needle property is non-null.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.MeterZone">
            <summary>
            If the event occurs within a MeterZone then this property will be non-null.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.Bulb">
            <summary>
            The Bulb that handled the event. If the event did not occur within a Bulb
            this property will remain null.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetMouseEventArgs.ScaleValue">
            <summary>
            If the event occurred in a device, then this property returns the scale
            value of the current mouse position.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.WidgetChangedEventArgs">
            <base>GraphicsServer.GSNet.Charting.ChartChangedEventArgs</base>
            <summary>
            The WidgetChangedEvent object is passed back when a widget property changes.
            This class contains properties that contain information about the event.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.WidgetChangedEventArgs.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.WidgetSelectionChangedEventArgs">
            <base>GraphicsServer.GSNet.Charting.ChartSelectionChangedEventArgs</base>
            <summary>
            The WidgetSelectionChangedEventArgs object is passed back when a widget 
            object's selection state has changed.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Widgets.WidgetSelectionChangedEventArgs.#ctor">
            <summary>
            Constructs an instance of this type.
            </summary>
        </member>
        <member name="T:GraphicsServer.GSNet.Widgets.WidgetEventWrapper">
            <summary>
            This is a helper class that simply wraps the
            boolean switches that turn widget events on and off.
            </summary>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetEventWrapper.EnableWidgetMouseClickEvent">
            <summary>
            Gets and sets a value that enables or disables mouse click events in the widget.
            </summary>
            <value>boolean</value>
            <seealso cref="F:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseClickWidgetEvent">MouseClickWidgetEvent</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetEventWrapper.EnableWidgetMouseMoveEvent">
            <summary>
            Gets and sets a value that enables or disables mouse move events in the Widget.
            </summary>
            <value>boolean</value>
            <seealso cref="F:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseMoveWidgetEvent">MouseMoveWidgetEvent</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetEventWrapper.EnableWidgetMouseHoverEvent">
            <summary>
            Gets or sets a value that enables or disables mouse hover events in the Widget.
            </summary>
            <remarks>
            Note that the MouseHover event only fires once by default. To continually fire the MouseHover event
            set <see cref="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseHoverReFire"/> to true.
            </remarks>
            <value>boolean</value>
            <seealso cref="F:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseHoverWidgetEvent">MouseHoverWidgetEvent</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseHoverReFire">MouseHoverReFire</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Widgets.WidgetEventWrapper.EnableWidgetMouseWheelEvent">
            <summary>
            Gets and sets a value that enables or disables mouse wheel events in the Widget.
            </summary>
            <value>boolean</value>
            <seealso cref="F:GraphicsServer.GSNet.Widgets.GSNetWinWidget.MouseWheelWidgetEvent">MouseWheelWidgetEvent</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.GSNetWinChart">
            <summary>Represents a Windows chart control.
            </summary>
            <remarks>
            The GSNetWinChart object is a custom UserControl that encapsulates
            a Chart object. This custom control can be placed on a form to provide
            easy access to Chart object configuration properties.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWebChart">GSNetWebChart</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetWinChart.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetWinChart.BeginInit">
            <summary>Temporarily disables Reconcile and RecalcLayout operations.</summary>
            <remarks>
            	<para>Implements the ISupportInitialize.BeginInit interface method.</para>
            	<para>
            		<para>This method calls the chart's BeginInit() method, which disables any
                    Reconcile or RecalcLayout operation that may occur due to setting properties in
                    the chart. A call to EndInit() will re-enable Reconcile and RecalcLayout
                    operations.</para>
            		<para>BeginInit() and EndInit() are useful for doing a block of property
                    setting operations.</para>
            	</para>
            </remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.GSNetWinChart.EndInit">EndInit Method</seealso>
        </member>
        <member name="M:GraphicsServer.GSNet.Charting.GSNetWinChart.EndInit">
            <summary>Resumes Reconcile and RecalcLayout operations.</summary>
            <remarks>See the BeginInit method for more information.</remarks>
            <seealso cref="M:GraphicsServer.GSNet.Charting.GSNetWinChart.BeginInit">BeginInit Method</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWinChart.EnableSaveButton">
            <summary>
            Specifies whether or not to enable the Save Chart to File popup button.
            </summary>
            <remarks>
            If true, the Save button will display when the user moves the mouse over 
            the chart control.
            <para>When the user clicks the Save button, a File Save dialog is displayed asking
            the user for a file name.  Note that the image format used for storing the chart in
            the file is based on the file extension selected by the user.  If the file extension
            is not a standard image file extension, then the Jpeg format is used.</para>
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWinChart.EnablePrintButton">
            <summary>
            Specifies whether or not to enable the Print Chart popup button.
            </summary>
            <remarks>
            If true, the Print button will display when the user moves the mouse over 
            the chart control.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWinChart.EnableCopyButton">
            <summary>
            Specifies whether or not to enable the Copy Chart to Clipboard popup button.
            </summary>
            <remarks>
            If true, the Copy button will display when the user moves the mouse over 
            the chart control.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWinChart.EnableDesignTimeDragResize">
            <summary>Allows dragging and resizing the grid, chart title, legend and annotations at design-time.</summary>
            <remarks>
            <para>
            If true (default), the grid, title, legend and annotations can be moved around on
            the chart control at design time (within Visual Studio on the form's design-view).
            </para>
            <para>
            If false, the chart control can be moved around the form at design-time and resized, but contained
            objects cannot. 
            </para>
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWinChart.Chart">
            <summary>
            This property is the encapsulated Chart object.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.Chart"/> object for more information
            concerning the capabilities of this object.
            </remarks>
            <value><see cref="T:GraphicsServer.GSNet.Charting.Chart"/></value>
            <seealso cref="T:GraphicsServer.GSNet.Charting.Chart">Chart Class</seealso>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWinChart.AutoSizeChartObjects">
            <summary>
            DEPRECATED 
            </summary>
            <remarks>
            This property and the corresponding functionality have been replaced with chart
            object Anchor properties. Chart object anchoring works similarly to anchoring
            of controls within forms. This property remains in the class for backward compatibility.
            <para>Note, however, that if this property is true, then anchoring will be disabled.</para>
            <para>If this property is true, then in design time all internal chart objects
            resize based on the new size of the control.</para>
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWinChart.LockChartObjects">
            <summary>Enables or disables interactive movement and resizing of chart objects.
            </summary>
            <remarks>
            If this property is true, then internal chart objects cannot be 
            interactively clicked and moved or resized in design time or at run time.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverReFire">
            <summary>
            Enables MouseHover events to keep firing as long as the mouse hovers 
            over the chart control.
            </summary>
            <remarks>
            If this value is false, then the MouseHover will only fire once when the
            mouse cursor is in the chart. If this value is true, then mouse
            hover events continually re-fire as long as the cursor is in the chart control. 
            Be aware that setting this property to true may impact performance.
            </remarks>
            <value>bool</value>
        </member>
        <member name="P:GraphicsServer.GSNet.Charting.GSNetWinChart.AlternateContextMenu">
            <summary>
            Enables an alternate context menu to be used 
            in place of Graphics Server's context menu.
            </summary>
            <value>System.Windows.Forms.ContextMenu</value>
            <seealso cref="P:GraphicsServer.GSNet.Charting.Chart.RunTimeProperties">RunTimeProperties Property</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseClickChartEvent">
            <summary>
            Fires when the mouse is clicked in the GSNetWinChart control.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMouseEventHandler"/>
            delegate for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMouseEventHandler">ChartMouseEventHandler Delegate</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseMoveChartEvent">
            <summary>
            Fires when the mouse is moved in the chart control.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMouseEventHandler"/> delegate
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMouseEventHandler">ChartMouseEventHandler Delegate</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverChartEvent">
            <summary>
            Fires when the mouse hovers in the chart control.
            </summary>
            <remarks>
            The MouseHover event only fires once by default. To continually fire the MouseHover event
            set <see cref="P:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverReFire"/> to true.  See the
            <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMouseEventHandler"/> delegate
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMouseEventHandler">ChartMouseEventHandler Delegate</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverReFire">MouseHoverReFire Property</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseWheelChartEvent">
            <summary>
            Fires when the mouse wheel is used in the chart control.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMouseEventHandler"/> delegate
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMouseEventHandler">ChartMouseEventHandler Delegate</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseClickMarkerEvent">
            <summary>
            Fires when the mouse is clicked on a marker.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMarkerEventHandler"/> delegate
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMarkerEventHandler">ChartMarkerEventHandler Delegate</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseMoveMarkerEvent">
            <summary>Fires when the mouse is moved on a marker.</summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMarkerEventHandler"/> delegate
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMarkerEventHandler">ChartMarkerEventHandler Delegate</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverMarkerEvent">
            <summary>Fires when the mouse hovers on a marker.</summary>
            <remarks>
            The MouseHover event only fires once by default. To continually fire the MouseHover event
            set <see cref="P:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverReFire"/> to true.  See the
            <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMarkerEventHandler"/> delegate
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMarkerEventHandler">ChartMarkerEventHandler Delegate</seealso>
            <seealso cref="P:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseHoverReFire">MouseHoverReFire Property</seealso>
        </member>
        <member name="E:GraphicsServer.GSNet.Charting.GSNetWinChart.MouseWheelMarkerEvent">
            <summary>
            Fires when the mouse wheel is thumbed on a marker.  
            </summary>
            <remarks>
            See the <see cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMarkerEventHandler"/> delegate
            for more information.
            </remarks>
            <seealso cref="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMarkerEventHandler">ChartMarkerEventHandler Delegate</seealso>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMouseEventHandler">
            <summary>Handles mouse events for the GSNetWinChart control.</summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.ChartMouseEventArgs">ChartMouseEventArgs Class</seealso>
            <param name="sender">The source of the event.</param>
            <param name="e"><see cref="T:GraphicsServer.GSNet.Charting.ChartMouseEventArgs"/></param>
        </member>
        <member name="T:GraphicsServer.GSNet.Charting.GSNetWinChart.ChartMarkerEventHandler">
            <summary>Handles marker mouse events for the GSNetWinChart control.</summary>
            <seealso cref="T:GraphicsServer.GSNet.Charting.MarkerMouseEventArgs">MarkerMouseEventArgs Class</seealso>
            <param name="sender">The source of the event.</param>
            <param name="e"><see cref="T:GraphicsServer.GSNet.Charting.MarkerMouseEventArgs"/></param>
        </member>
    </members>
</doc>
